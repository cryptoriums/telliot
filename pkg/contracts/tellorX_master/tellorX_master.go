// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tellorX_master

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ControllerMetaData contains all meta data concerning the Controller contract.
var ControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"NewStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"StakeWithdrawRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"_sliceUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"changeOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"changeStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasuryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_target\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_c\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[5]\",\"name\":\"_r\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_diff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getNewValueCountbyQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyQueryIdandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"slashReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"340a1372": "_sliceUint(bytes)",
		"699f200f": "addresses(bytes32)",
		"dd62ed3e": "allowance(address,address)",
		"999cf26c": "allowedToTrade(address,uint256)",
		"095ea7b3": "approve(address,uint256)",
		"288c9c9d": "approveAndTransferFrom(address,address,uint256)",
		"70a08231": "balanceOf(address)",
		"4ee2cd7e": "balanceOfAt(address,uint256)",
		"cbf1304d": "balances(address,uint256)",
		"42966c68": "burn(uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"3c46a185": "changeControllerContract(address)",
		"e8ce51d7": "changeGovernanceContract(address)",
		"1cbd3151": "changeOracleContract(address)",
		"a1332c5c": "changeStakingStatus(address,uint256)",
		"bd87e0c9": "changeTreasuryContract(address)",
		"740358e6": "changeUint(bytes32,uint256)",
		"1fd22364": "currentMiners(uint256)",
		"313ce567": "decimals()",
		"0d2d76a2": "depositStake()",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"133bee5e": "getAddressVars(bytes32)",
		"af0b1327": "getAllDisputeVars(uint256)",
		"da379941": "getDisputeIdByDisputeHash(bytes32)",
		"7f6fd5d9": "getDisputeUintVars(uint256,bytes32)",
		"3180f8df": "getLastNewValueById(uint256)",
		"4049f198": "getNewCurrentVariables()",
		"77b03e0d": "getNewValueCountbyQueryId(bytes32)",
		"46eee1c4": "getNewValueCountbyRequestId(uint256)",
		"733bdef0": "getStakerInfo(address)",
		"ce5e11bf": "getTimestampbyQueryIdandIndex(bytes32,uint256)",
		"77fbb663": "getTimestampbyRequestIDandIndex(uint256,uint256)",
		"612c8f7f": "getUintVar(bytes32)",
		"e1c7392a": "init()",
		"58421ed2": "isMigrated(address)",
		"8fd3ab80": "migrate()",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"28449c3a": "requestStakingWithdraw()",
		"c5958af9": "retrieveData(bytes32,uint256)",
		"93fa4915": "retrieveData(uint256,uint256)",
		"4dfc2a34": "slashReporter(address,address)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"b59e14d4": "uints(bytes32)",
		"fc735e99": "verify()",
		"bed9d861": "withdrawStake()",
	},
	Bin: "0x60806040523480156200001157600080fd5b5060405162003e4738038062003e4783398101604081905262000034916200017c565b8282826001600160a01b038316620000925760405162461bcd60e51b815260206004820152601b60248201527f6d7573742073657420676f7665726e616e636520616464726573730000000000604482015260640160405180910390fd5b60476020527f7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22d80546001600160a01b039485166001600160a01b0319918216179091557fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b58054938516938216939093179092557f1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa6000527fdff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d805491909316911617905550620001c5915050565b80516001600160a01b03811681146200017757600080fd5b919050565b60008060006060848603121562000191578283fd5b6200019c846200015f565b9250620001ac602085016200015f565b9150620001bc604085016200015f565b90509250925092565b613c7280620001d56000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c806362dd1d2a116101d3578063af0b132711610104578063d01f4d9e116100a2578063dd62ed3e1161007c578063dd62ed3e14610b63578063e1c7392a14610b9c578063e8ce51d714610ba4578063fc735e9914610bb75761035d565b8063d01f4d9e14610a6a578063da37994114610a8a578063db085beb14610aaa5761035d565b8063bed9d861116100de578063bed9d86114610a09578063c5958af914610a11578063cbf1304d14610a24578063ce5e11bf14610a575761035d565b8063af0b1327146109ae578063b59e14d4146109d6578063bd87e0c9146109f65761035d565b80637f6fd5d91161017157806395d89b411161014b57806395d89b4114610956578063999cf26c14610975578063a1332c5c14610988578063a9059cbb1461099b5761035d565b80637f6fd5d91461090c5780638fd3ab801461093b57806393fa4915146109435761035d565b8063733bdef0116101ad578063733bdef01461088d578063740358e6146108d357806377b03e0d146108e657806377fbb663146108f95761035d565b806362dd1d2a14610831578063699f200f1461085157806370a082311461087a5761035d565b8063340a1372116102ad57806348b18e541161024b5780634ee2cd7e116102255780634ee2cd7e146107b25780635700242c146107c557806358421ed2146107e5578063612c8f7f146108115761035d565b806348b18e541461074e5780634ba0a5ee1461077c5780634dfc2a341461079f5761035d565b806340c10f191161028757806340c10f191461070257806342966c6814610715578063438c0aa31461072857806346eee1c41461073b5761035d565b8063340a1372146106c45780633c46a185146106d75780634049f198146106ea5761035d565b80631cbd31511161031a57806328449c3a116102f457806328449c3a14610672578063288c9c9d1461067a578063313ce5671461068d5780633180f8df1461069c5761035d565b80631cbd31511461061c5780631fd223641461062f57806323b872dd1461065f5761035d565b8063024c2ddd1461050257806306fdde0314610540578063095ea7b3146105745780630d2d76a214610597578063133bee5e146105a157806318160ddd146105cc575b732754da26f634e04b26c4decd27b3eb144cf405826000805b60048110156103d45761038a816008613a56565b600036838181106103ab57634e487b7160e01b600052603260045260246000fd5b909101356001600160f81b03191690911c929092179150806103cc81613ae0565b915050610376565b506001600160e01b03198116638581af1960e01b148061040457506001600160e01b031981166364e93d7f60e11b145b8061041f57506001600160e01b03198116632698c58760e11b145b8061043a57506001600160e01b03198116639a01ca1360e01b145b61048b5760405162461bcd60e51b815260206004820152601a60248201527f66756e6374696f6e2073686f756c6420626520616c6c6f77656400000000000060448201526064015b60405180910390fd5b6000826001600160a01b03166000366040516104a892919061384e565b600060405180830381855af49150503d80600081146104e3576040519150601f19603f3d011682016040523d82523d6000602084013e6104e8565b606091505b505090503d6000803e8080156104fd573d6000f35b3d6000fd5b61052d6105103660046135fe565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b60408051808201909152600f81526e54656c6c6f7220547269627574657360881b60208201525b6040516105379190613940565b610587610582366004613676565b610bbf565b6040519015158152602001610537565b61059f610c87565b005b6105b46105af3660046136c1565b610f02565b6040516001600160a01b039091168152602001610537565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb738016060005260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e5461052d565b61059f61062a3660046135c6565b610f20565b61064261063d3660046136c1565b611016565b604080519283526001600160a01b03909116602083015201610537565b61058761066d366004613636565b611041565b61059f6110f7565b610587610688366004613636565b611275565b60405160128152602001610537565b6106af6106aa3660046136c1565b61141f565b60408051928352901515602083015201610537565b61052d6106d236600461371e565b611609565b61059f6106e53660046135c6565b611672565b6106f26117ad565b604051610537949392919061387a565b61059f610710366004613676565b6118b6565b61059f6107233660046136c1565b611990565b61052d6107363660046136c1565b61199d565b61052d6107493660046136c1565b6119be565b61058761075c3660046136d9565b603960209081526000928352604080842090915290825290205460ff1681565b61058761078a3660046135c6565b604b6020526000908152604090205460ff1681565b61059f6107ad3660046135fe565b611a85565b61052d6107c0366004613676565b611c60565b61052d6107d33660046136c1565b60376020526000908152604090205481565b6105876107f33660046135c6565b6001600160a01b03166000908152604b602052604090205460ff1690565b61052d61081f3660046136c1565b60009081526046602052604090205490565b61052d61083f3660046136c1565b60486020526000908152604090205481565b6105b461085f3660046136c1565b6047602052600090815260409020546001600160a01b031681565b61052d6108883660046135c6565b611ecb565b6108be61089b3660046135c6565b6001600160a01b0316600090815260446020526040902080546001909101549091565b60408051928352602083019190915201610537565b61059f6108e13660046136fd565b611ed7565b61052d6108f43660046136c1565b611f6e565b61052d6109073660046136fd565b612010565b61052d61091a3660046136fd565b60009182526036602090815260408084209284526005909201905290205490565b61059f6120fc565b61052d6109513660046136fd565b61223b565b6040805180820190915260038152622a292160e91b6020820152610567565b610587610983366004613676565b612366565b61059f610996366004613676565b612414565b6105876109a9366004613676565b612541565b6109c16109bc3660046136c1565b612557565b604051610537999897969594939291906138be565b61052d6109e43660046136c1565b60466020526000908152604090205481565b61059f610a043660046135c6565b612782565b61059f61287a565b610567610a1f3660046136fd565b612970565b610a37610a32366004613676565b612a1c565b604080516001600160801b03938416815292909116602083015201610537565b61052d610a653660046136fd565b612a5f565b61052d610a783660046136c1565b60386020526000908152604090205481565b61052d610a983660046136c1565b60009081526038602052604090205490565b610b14610ab83660046136c1565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e082015261010001610537565b61052d610b713660046135fe565b6001600160a01b039182166000908152604a6020908152604080832093909416825291909152205490565b61059f612b08565b61059f610bb23660046135c6565b612ee6565b61270f61052d565b60006001600160a01b038316610c225760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610482565b336000818152604a602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b600080516020613c1d833981519152543360009081526049602052604090208054610cb490600190613a9d565b81548110610cd257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b03161015610d475760405162461bcd60e51b815260206004820152602260248201527f42616c616e6365206973206c6f776572207468616e207374616b6520616d6f756044820152611b9d60f21b6064820152608401610482565b336000908152604460205260409020541580610d725750336000908152604460205260409020546002145b610dbe5760405162461bcd60e51b815260206004820152601e60248201527f5265706f7274657220697320696e207468652077726f6e6720737461746500006044820152606401610482565b7f10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b600090815260466020527fa5ae3e2b97d73fb849ea855d27f073b72815b38452d976bd57e4a157827dadd3805460019290610e1b908490613a1e565b9091555050604080518082018252600180825242602080840191825233600081815260448352869020945185559151939092019290925591519081527ffef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea910160405180910390a1600080516020613bfd83398151915260009081526047602052600080516020613b3d83398151915254604080516390e5b23560e01b815290516001600160a01b03909216926390e5b2359260048084019382900301818387803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b50505050565b6000818152604760205260409020546001600160a01b03165b919050565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b03163314610fbe5760405162461bcd60e51b81526020600482015260436024820152600080516020613b7d83398151915260448201527f206368616e676520746865204f7261636c6520636f6e7472616374206164647260648201526265737360e81b608482015260a401610482565b610fc781612fe0565b610fd057600080fd5b600080516020613bdd8339815191526000526047602052600080516020613b9d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b603a816005811061102657600080fd5b6002020180546001909101549091506001600160a01b031682565b6001600160a01b0383166000908152604a602090815260408083203384529091528120548211156110a95760405162461bcd60e51b8152602060048201526012602482015271416c6c6f77616e63652069732077726f6e6760701b6044820152606401610482565b6001600160a01b0384166000908152604a60209081526040808320338452909152812080548492906110dc908490613a9d565b909155506110ed90508484846130fc565b5060019392505050565b33600090815260446020526040902080546001146111505760405162461bcd60e51b815260206004820152601660248201527514995c1bdc9d195c881a5cc81b9bdd081cdd185ad95960521b6044820152606401610482565b60028155426001808301919091557f10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b600090815260466020527fa5ae3e2b97d73fb849ea855d27f073b72815b38452d976bd57e4a157827dadd380549091906111ba908490613a9d565b9091555050600080516020613bfd83398151915260009081526047602052600080516020613b3d83398151915254604080516390e5b23560e01b815290516001600160a01b03909216926390e5b2359260048084019382900301818387803b15801561122557600080fd5b505af1158015611239573d6000803e3d6000fd5b50506040513381527f453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf925060200190505b60405180910390a150565b600080516020613bfd83398151915260009081526047602052600080516020613b3d83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b1580156112de57600080fd5b505afa1580156112f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131691906136a1565b8061134f5750600080516020613bbd8339815191526000526047602052600080516020613b5d833981519152546001600160a01b031633145b806113885750600080516020613bdd8339815191526000526047602052600080516020613b9d833981519152546001600160a01b031633145b6114145760405162461bcd60e51b815260206004820152605160248201527f4f6e6c792074686520476f7665726e616e63652c2054726561737572792c206f60448201527f72204f7261636c6520436f6e74726163742063616e20617070726f766520616e60648201527064207472616e7366657220746f6b656e7360781b608482015260a401610482565b6110ed8484846130fc565b600080516020613bdd83398151915260009081526047602052600080516020613b9d83398151915254604051631af3921960e11b815260048101849052829182916001600160a01b03909116906335e724329060240160206040518083038186803b15801561148d57600080fd5b505afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c5919061380a565b9050801561159457600080516020613bdd8339815191526000526047602052600080516020613b9d833981519152546115889085906001600160a01b0316637c37b8b482611514600187613a9d565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b15801561155057600080fd5b505afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610951919061380a565b60019250925050611604565b60008481526045602052604090208054156115fa5780546115ed90869083906115bf90600190613a9d565b815481106115dd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461223b565b6001935093505050611604565b6000809350935050505b915091565b600080805b835181101561166b5761162382610100613a56565b915083818151811061164557634e487b7160e01b600052603260045260246000fd5b01602001516116579060f81c83613a1e565b91508061166381613ae0565b91505061160e565b5092915050565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b031633146117145760405162461bcd60e51b81526020600482015260476024820152600080516020613b7d83398151915260448201527f206368616e67652074686520436f6e74726f6c6c657220636f6e7472616374206064820152666164647265737360c81b608482015260a401610482565b61171d81612fe0565b61172657600080fd5b7f0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a0860005260476020527ffe10c9a395cce5a324df121072934b83aa2f3aa5f594428b2a75cf926b73fae880546001600160a01b0319166001600160a01b0383161790557f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b60006117b7613589565b506040805160a08101825260018082526020808301829052828401829052606083018290526080830191909152600080516020613bdd833981519152600090815260478252600080516020613b9d83398151915254845163607caea960e11b815294519394919384936001600160a01b039092169263c0f95d52926004808301939192829003018186803b15801561184e57600080fd5b505afa158015611862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611886919061380a565b60405160200161189891815260200190565b60405160208183030381529060405280519060200120935090919293565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b03163314806119215750600080516020613bbd8339815191526000526047602052600080516020613b5d833981519152546001600160a01b031633145b806119365750604c546001600160a01b031633145b6119825760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c7920616e2061646d696e2063616e206d696e7420746f6b656e730000006044820152606401610482565b61198c8282613255565b5050565b61199a33826133c1565b50565b603381815481106119ad57600080fd5b600091825260209091200154905081565b600080516020613bdd83398151915260009081526047602052600080516020613b9d83398151915254604051631af3921960e11b81526004810184905282916001600160a01b0316906335e724329060240160206040518083038186803b158015611a2857600080fd5b505afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a60919061380a565b90508015611a6f579050610f1b565b5050600081815260456020526040902054610f1b565b600080516020613bfd8339815191526000526047602052600080516020613b3d83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b158015611aec57600080fd5b505afa158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2491906136a1565b611b8d5760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920617070726f76656420676f7665726e616e636520636f6e747261636044820152733a1031b0b71039b630b9b4103932b837b93a32b960611b6064820152608401610482565b6001600160a01b03821660009081526044602090815260408220600590557f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc9790915260469052600080516020613c1d83398151915254611bec83611ecb565b10611c3c577f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc976000526046602052600080516020613c1d83398151915254611c3790839083906130fc565b61198c565b6000611c4783611ecb565b111561198c5761198c8282611c5b85611ecb565b6130fc565b6001600160a01b038216600090815260496020526040812080541580611cba57508281600081548110611ca357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b0316115b15611cc9576000915050610c81565b80548190611cd990600190613a9d565b81548110611cf757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03168310611d655780548190611d2290600190613a9d565b81548110611d4057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b03169150610c819050565b80546000908190611d7890600290613a9d565b90505b81811115611e845760006002611d918484613a1e565b611d9c906001613a1e565b611da69190613a36565b905085848281548110611dc957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03161415611e2c57838181548110611e0457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b03169450610c819350505050565b85848281548110611e4d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03161015611e7057809250611e7e565b611e7b600182613a9d565b91505b50611d7b565b828281548110611ea457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b03169350610c8192505050565b6000610c818243611c60565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b03163314611f5c5760405162461bcd60e51b81526020600482015260306024820152600080516020613b7d83398151915260448201526f0818da185b99d9481d1a19481d5a5b9d60821b6064820152608401610482565b60009182526046602052604090912055565b600080516020613bdd83398151915260009081526047602052600080516020613b9d83398151915254604051631af3921960e11b8152600481018490526001600160a01b03909116906335e724329060240160206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c81919061380a565b600080516020613bdd83398151915260009081526047602052600080516020613b9d83398151915254604051631f0dee2d60e21b815260048101859052602481018490526001600160a01b0390911690637c37b8b49060440160206040518083038186803b15801561208157600080fd5b505afa9250505080156120b1575060408051601f3d908101601f191682019092526120ae9181019061380a565b60015b6120f55760008381526045602052604090208054839081106120e357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050610c81565b9050610c81565b336000908152604b602052604090205460ff161561214f5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481b5a59dc985d195960821b6044820152606401610482565b7f56e0987db9eaec01ed9e0af003a0fd5c062371f9d23722eb4a3ebc74f16ea37160005260476020527fc930326aab6c1874fc004d856083a6ed34e057e064970b7effb48e8e6e8ca127546040516370a0823160e01b8152336004820181905261221f9290916001600160a01b03909116906370a082319060240160206040518083038186803b1580156121e257600080fd5b505afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a919061380a565b613255565b336000908152604b60205260409020805460ff19166001179055565b7f6c0e91a96227393eb6e42b88e9a99f7c5ebd588098b549c949baf27ac9509d8f600090815260466020527f9dd7c008ae091f0bb92d79df2a27d29a02d7be98e77be1227c4e243dccabda58548210156122b257506000828152604560209081526040808320848452600301909152902054610c81565b600080516020613bdd8339815191526000526047602052600080516020613b9d83398151915254604051630b2d2b0d60e01b8152600481018590526024810184905261235f916001600160a01b031690630b2d2b0d9060440160006040518083038186803b15801561232357600080fd5b505afa158015612337573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106d29190810190613797565b9392505050565b6001600160a01b038216600090815260446020526040812054158015906123a557506001600160a01b0383166000908152604460205260409020546005115b15612401577f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc976000526046602052600080516020613c1d8339815191525482906123ee85611ecb565b6123f89190613a9d565b10159050610c81565b8161240b84611ecb565b10159392505050565b600080516020613bfd8339815191526000526047602052600080516020613b3d83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b15801561247b57600080fd5b505afa15801561248f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b391906136a1565b6125255760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c7920617070726f76656420676f7665726e616e636520636f6e7472616360448201527f742063616e206368616e6765207374616b696e672073746174757300000000006064820152608401610482565b6001600160a01b03909116600090815260446020526040902055565b600061254e3384846130fc565b50600192915050565b600080600080600080600061256a6135a7565b5050506000958652505060366020908152604080862080546002820154600383015460048401548551610120810187527f9f47a2659c3d32b749ae717d975e7962959890862423c4318cf86e4ec220291f8c5260058601808952878d205482527f2f9328a9c75282bec25bb04befad06926366736e0030c985108445fa728335e58d52808952878d2054828a01527f9147231ab14efb72c38117f68521ddef8de64f092c18c69dbfb602ffc4de7f478d52808952878d2054828901527f46f7d53798d31923f6952572c6a19ad2d1a8238d26649c2f3493a6d69e425d288d52808952878d205460608301527f1da378694063870452ce03b189f48e04c1aa026348e74e6c86e10738514ad2c48d52808952878d205460808301527f4b4cefd5ced7569ef0d091282b4bca9c52a034c56471a6061afd1bf307a2de7c8d52808952878d205460a08301527f6de96ee4d33a0617f40a846309c8759048857f51b9d59a12d3c3786d4778883d8d52808952878d205460c08301527f30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b268d52808952878d205460e08301527f1da95f11543c9b03927178e07951795dfc95c7501a9d1cf00e13414ca33bc4098d52909752949099205461010080870191909152600190930154919960ff8083169a948304811699506201000083041697506001600160a01b036301000000909204821696509281169493169291565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b031633146128225760405162461bcd60e51b81526020600482015260456024820152600080516020613b7d83398151915260448201527f206368616e67652074686520547265617375727920636f6e7472616374206164606482015264647265737360d81b608482015260a401610482565b61282b81612fe0565b61283457600080fd5b600080516020613bbd8339815191526000526047602052600080516020613b5d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152604460205260409020600181015462093a809061289d9042613a9d565b10156128e05760405162461bcd60e51b8152602060048201526012602482015271372064617973206469646e2774207061737360701b6044820152606401610482565b805460021461293c5760405162461bcd60e51b815260206004820152602260248201527f5265706f72746572206e6f74206c6f636b656420666f72207769746864726177604482015261185b60f21b6064820152608401610482565b600081556040513381527f4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec9060200161126a565b600080516020613bdd8339815191526000526047602052600080516020613b9d83398151915254604051630b2d2b0d60e01b815260048101849052602481018390526060916001600160a01b031690630b2d2b0d9060440160006040518083038186803b1580156129e057600080fd5b505afa1580156129f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261235f9190810190613797565b60496020528160005260406000208181548110612a3857600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b600080516020613bdd83398151915260009081526047602052600080516020613b9d83398151915254604051631f0dee2d60e21b815260048101859052602481018490526001600160a01b0390911690637c37b8b49060440160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235f919061380a565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b031615612b765760405162461bcd60e51b815260206004820152600e60248201526d4f6e6c7920676f6f64206f6e636560901b6044820152606401610482565b68056bc75e2d63100000600080516020613c1d83398151915255427f9dd7c008ae091f0bb92d79df2a27d29a02d7be98e77be1227c4e243dccabda5855678ac7230489e800007fa7dd4870ca148afe8854be8aed16d8286a45fa3ccd69baa311c29f333d7c830b557f0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a0860005260476020527ffe10c9a395cce5a324df121072934b83aa2f3aa5f594428b2a75cf926b73fae85460405163699f200f60e01b8152600080516020613bfd83398151915260048201526001600160a01b0390911690819063699f200f9060240160206040518083038186803b158015612c7957600080fd5b505afa158015612c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb191906135e2565b600080516020613bfd8339815191526000526047602052600080516020613b3d83398151915280546001600160a01b0319166001600160a01b0392831617905560405163699f200f60e01b8152600080516020613bdd83398151915260048201529082169063699f200f9060240160206040518083038186803b158015612d3757600080fd5b505afa158015612d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6f91906135e2565b600080516020613bdd8339815191526000526047602052600080516020613b9d83398151915280546001600160a01b0319166001600160a01b0392831617905560405163699f200f60e01b8152600080516020613bbd83398151915260048201529082169063699f200f9060240160206040518083038186803b158015612df557600080fd5b505afa158015612e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2d91906135e2565b6047602052600080516020613b5d83398151915280546001600160a01b0319166001600160a01b03928316179055604c54600080516020613bdd833981519152600052600080516020613b9d833981519152546040516340c10f1960e01b81529083166004820152691642910dea5ec680000060248201529116906340c10f1990604401600060405180830381600087803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b5050505050565b600080516020613bfd8339815191526000526047602052600080516020613b3d833981519152546001600160a01b03163314612f885760405162461bcd60e51b81526020600482015260476024820152600080516020613b7d83398151915260448201527f206368616e67652074686520476f7665726e616e636520636f6e7472616374206064820152666164647265737360c81b608482015260a401610482565b612f9181612fe0565b612f9a57600080fd5b600080516020613bfd8339815191526000526047602052600080516020613b3d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b031663fc735e9960405160240161300f90602080825260009082015260400190565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051613048919061385e565b6000604051808303816000865af19150503d8060008114613085576040519150601f19603f3d011682016040523d82523d6000602084013e61308a565b606091505b50915091508180156130b05750612328818060200190518101906130ae919061380a565b115b6110ed5760405162461bcd60e51b815260206004820152601760248201527f6e657720636f6e747261637420697320696e76616c69640000000000000000006044820152606401610482565b806131535760405162461bcd60e51b815260206004820152602160248201527f547269656420746f2073656e64206e6f6e2d706f73697469766520616d6f756e6044820152601d60fa1b6064820152608401610482565b6001600160a01b0382166131a15760405162461bcd60e51b815260206004820152601560248201527452656365697665722069732030206164647265737360581b6044820152606401610482565b6131ab8382612366565b6131c75760405162461bcd60e51b815260040161048290613953565b60006131d284611ecb565b9050816131e8856131e38385613a75565b613474565b6131f184611ecb565b9150613201846131e383856139f3565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161324691815260200190565b60405180910390a35050505050565b806132ac5760405162461bcd60e51b815260206004820152602160248201527f547269656420746f206d696e74206e6f6e2d706f73697469766520616d6f756e6044820152601d60fa1b6064820152608401610482565b6001600160a01b0382166132fa5760405162461bcd60e51b815260206004820152601560248201527452656365697665722069732030206164647265737360581b6044820152606401610482565b600061330583611ecb565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160600090815260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e80549293508492839290613366908490613a1e565b9091555061337a9050846131e383856139f3565b6040518381526001600160a01b038516906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350505050565b806133cb5761198c565b6133d58282612366565b6133f15760405162461bcd60e51b815260040161048290613953565b60006133fc83611ecb565b90508161340d846131e38385613a75565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160600090815260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e8054859290613469908490613a9d565b909155505050505050565b6001600160a01b0382166000908152604960205260409020805415806134dd57508054439082906134a790600190613a9d565b815481106134c557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b031614155b1561352e57604080518082019091526001600160801b03438116825283811660208084019182528454600181018655600086815291909120935191518316600160801b029190921617910155613584565b8054600090829061354190600190613a9d565b8154811061355f57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160801b03808616600160801b029116179055505b505050565b6040518060a001604052806005906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6000602082840312156135d7578081fd5b813561235f81613b27565b6000602082840312156135f3578081fd5b815161235f81613b27565b60008060408385031215613610578081fd5b823561361b81613b27565b9150602083013561362b81613b27565b809150509250929050565b60008060006060848603121561364a578081fd5b833561365581613b27565b9250602084013561366581613b27565b929592945050506040919091013590565b60008060408385031215613688578182fd5b823561369381613b27565b946020939093013593505050565b6000602082840312156136b2578081fd5b8151801515811461235f578182fd5b6000602082840312156136d2578081fd5b5035919050565b600080604083850312156136eb578182fd5b82359150602083013561362b81613b27565b6000806040838503121561370f578182fd5b50508035926020909101359150565b60006020828403121561372f578081fd5b813567ffffffffffffffff811115613745578182fd5b8201601f81018413613755578182fd5b8035613768613763826139cb565b61399a565b81815285602083850101111561377c578384fd5b81602084016020830137908101602001929092525092915050565b6000602082840312156137a8578081fd5b815167ffffffffffffffff8111156137be578182fd5b8201601f810184136137ce578182fd5b80516137dc613763826139cb565b8181528560208385010111156137f0578384fd5b613801826020830160208601613ab4565b95945050505050565b60006020828403121561381b578081fd5b5051919050565b6000815180845261383a816020860160208601613ab4565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251613870818460208701613ab4565b9190910192915050565b848152610100810160208083018660005b60058110156138a85781518352918301919083019060010161388b565b5050505060c082019390935260e0015292915050565b898152881515602080830191909152881515604083015287151560608301526001600160a01b03878116608084015286811660a0840152851660c083015261022082019060e083018560005b60098110156139275781518352918301919083019060010161390a565b50505050826102008301529a9950505050505050505050565b60006020825261235f6020830184613822565b60208082526027908201527f53686f756c6420686176652073756666696369656e742062616c616e636520746040820152666f20747261646560c81b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff811182821017156139c3576139c3613b11565b604052919050565b600067ffffffffffffffff8211156139e5576139e5613b11565b50601f01601f191660200190565b60006001600160801b03808316818516808303821115613a1557613a15613afb565b01949350505050565b60008219821115613a3157613a31613afb565b500190565b600082613a5157634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613a7057613a70613afb565b500290565b60006001600160801b0383811690831681811015613a9557613a95613afb565b039392505050565b600082821015613aaf57613aaf613afb565b500390565b60005b83811015613acf578181015183820152602001613ab7565b83811115610efc5750506000910152565b6000600019821415613af457613af4613afb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461199a57600080fdfe7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22ddff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d4f6e6c792074686520476f7665726e616e636520636f6e74726163742063616eef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b51436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fafa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891eefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd93167af83a0768d27540775cfef6d996eb63f8a61fcdfb26e654c18fb50960e3bea2646970667358221220698e7b9266a00799afcd7dcd6f2788e81fbfe6d06e8047246172a8a7f192a2a364736f6c63430008030033",
}

// ControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ControllerMetaData.ABI instead.
var ControllerABI = ControllerMetaData.ABI

// Deprecated: Use ControllerMetaData.Sigs instead.
// ControllerFuncSigs maps the 4-byte function signature to its string representation.
var ControllerFuncSigs = ControllerMetaData.Sigs

// ControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ControllerMetaData.Bin instead.
var ControllerBin = ControllerMetaData.Bin

// DeployController deploys a new Ethereum contract, binding an instance of Controller to it.
func DeployController(auth *bind.TransactOpts, backend bind.ContractBackend, _governance common.Address, _oracle common.Address, _treasury common.Address) (common.Address, *types.Transaction, *Controller, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ControllerBin), backend, _governance, _oracle, _treasury)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// Controller is an auto generated Go binding around an Ethereum contract.
type Controller struct {
	ControllerCaller     // Read-only binding to the contract
	ControllerTransactor // Write-only binding to the contract
	ControllerFilterer   // Log filterer for contract events
}

// ControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ControllerSession struct {
	Contract     *Controller       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ControllerCallerSession struct {
	Contract *ControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ControllerTransactorSession struct {
	Contract     *ControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ControllerRaw struct {
	Contract *Controller // Generic contract binding to access the raw methods on
}

// ControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ControllerCallerRaw struct {
	Contract *ControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ControllerTransactorRaw struct {
	Contract *ControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewController creates a new instance of Controller, bound to a specific deployed contract.
func NewController(address common.Address, backend bind.ContractBackend) (*Controller, error) {
	contract, err := bindController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// NewControllerCaller creates a new read-only instance of Controller, bound to a specific deployed contract.
func NewControllerCaller(address common.Address, caller bind.ContractCaller) (*ControllerCaller, error) {
	contract, err := bindController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerCaller{contract: contract}, nil
}

// NewControllerTransactor creates a new write-only instance of Controller, bound to a specific deployed contract.
func NewControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ControllerTransactor, error) {
	contract, err := bindController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerTransactor{contract: contract}, nil
}

// NewControllerFilterer creates a new log filterer instance of Controller, bound to a specific deployed contract.
func NewControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ControllerFilterer, error) {
	contract, err := bindController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ControllerFilterer{contract: contract}, nil
}

// bindController binds a generic wrapper to an already deployed contract.
func bindController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.ControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Controller *ControllerCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Controller *ControllerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Controller.Contract.Allowances(&_Controller.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Controller *ControllerCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Controller.Contract.Allowances(&_Controller.CallOpts, arg0, arg1)
}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Controller *ControllerCaller) SliceUint(opts *bind.CallOpts, _b []byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "_sliceUint", _b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Controller *ControllerSession) SliceUint(_b []byte) (*big.Int, error) {
	return _Controller.Contract.SliceUint(&_Controller.CallOpts, _b)
}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Controller *ControllerCallerSession) SliceUint(_b []byte) (*big.Int, error) {
	return _Controller.Contract.SliceUint(&_Controller.CallOpts, _b)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Controller *ControllerCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Controller *ControllerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Controller.Contract.Addresses(&_Controller.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Controller *ControllerCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Controller.Contract.Addresses(&_Controller.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Controller *ControllerCaller) Allowance(opts *bind.CallOpts, _user common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "allowance", _user, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Controller *ControllerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _Controller.Contract.Allowance(&_Controller.CallOpts, _user, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Controller *ControllerCallerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _Controller.Contract.Allowance(&_Controller.CallOpts, _user, _spender)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Controller *ControllerCaller) AllowedToTrade(opts *bind.CallOpts, _user common.Address, _amount *big.Int) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "allowedToTrade", _user, _amount)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Controller *ControllerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _Controller.Contract.AllowedToTrade(&_Controller.CallOpts, _user, _amount)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Controller *ControllerCallerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _Controller.Contract.AllowedToTrade(&_Controller.CallOpts, _user, _amount)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Controller *ControllerCaller) BalanceOf(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "balanceOf", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Controller *ControllerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _Controller.Contract.BalanceOf(&_Controller.CallOpts, _user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Controller *ControllerCallerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _Controller.Contract.BalanceOf(&_Controller.CallOpts, _user)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Controller *ControllerCaller) BalanceOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "balanceOfAt", _user, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Controller *ControllerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _Controller.Contract.BalanceOfAt(&_Controller.CallOpts, _user, _blockNumber)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Controller *ControllerCallerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _Controller.Contract.BalanceOfAt(&_Controller.CallOpts, _user, _blockNumber)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Controller *ControllerCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Controller *ControllerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Controller.Contract.Balances(&_Controller.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Controller *ControllerCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Controller.Contract.Balances(&_Controller.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Controller *ControllerCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Controller *ControllerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Controller.Contract.BytesVars(&_Controller.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Controller *ControllerCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Controller.Contract.BytesVars(&_Controller.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Controller *ControllerCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Controller *ControllerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Controller.Contract.CurrentMiners(&_Controller.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Controller *ControllerCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Controller.Contract.CurrentMiners(&_Controller.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Controller *ControllerCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Controller *ControllerSession) Decimals() (uint8, error) {
	return _Controller.Contract.Decimals(&_Controller.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Controller *ControllerCallerSession) Decimals() (uint8, error) {
	return _Controller.Contract.Decimals(&_Controller.CallOpts)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.DisputeIdByDisputeHash(&_Controller.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.DisputeIdByDisputeHash(&_Controller.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Controller *ControllerCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Controller *ControllerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Controller.Contract.DisputesById(&_Controller.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Controller *ControllerCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Controller.Contract.DisputesById(&_Controller.CallOpts, arg0)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Controller *ControllerCaller) GetAddressVars(opts *bind.CallOpts, _data [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getAddressVars", _data)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Controller *ControllerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _Controller.Contract.GetAddressVars(&_Controller.CallOpts, _data)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Controller *ControllerCallerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _Controller.Contract.GetAddressVars(&_Controller.CallOpts, _data)
}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Controller *ControllerCaller) GetAllDisputeVars(opts *bind.CallOpts, _disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getAllDisputeVars", _disputeId)

	if err != nil {
		return *new([32]byte), *new(bool), *new(bool), *new(bool), *new(common.Address), *new(common.Address), *new(common.Address), *new([9]*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	out5 := *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	out6 := *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	out7 := *abi.ConvertType(out[7], new([9]*big.Int)).(*[9]*big.Int)
	out8 := *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, out5, out6, out7, out8, err

}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Controller *ControllerSession) GetAllDisputeVars(_disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	return _Controller.Contract.GetAllDisputeVars(&_Controller.CallOpts, _disputeId)
}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Controller *ControllerCallerSession) GetAllDisputeVars(_disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	return _Controller.Contract.GetAllDisputeVars(&_Controller.CallOpts, _disputeId)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Controller *ControllerCaller) GetDisputeIdByDisputeHash(opts *bind.CallOpts, _hash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getDisputeIdByDisputeHash", _hash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Controller *ControllerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetDisputeIdByDisputeHash(&_Controller.CallOpts, _hash)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Controller *ControllerCallerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetDisputeIdByDisputeHash(&_Controller.CallOpts, _hash)
}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Controller *ControllerCaller) GetDisputeUintVars(opts *bind.CallOpts, _disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getDisputeUintVars", _disputeId, _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Controller *ControllerSession) GetDisputeUintVars(_disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetDisputeUintVars(&_Controller.CallOpts, _disputeId, _data)
}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Controller *ControllerCallerSession) GetDisputeUintVars(_disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetDisputeUintVars(&_Controller.CallOpts, _disputeId, _data)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Controller *ControllerCaller) GetLastNewValueById(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getLastNewValueById", _requestId)

	if err != nil {
		return *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Controller *ControllerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _Controller.Contract.GetLastNewValueById(&_Controller.CallOpts, _requestId)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Controller *ControllerCallerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _Controller.Contract.GetLastNewValueById(&_Controller.CallOpts, _requestId)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Controller *ControllerCaller) GetNewCurrentVariables(opts *bind.CallOpts) (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getNewCurrentVariables")

	outstruct := new(struct {
		C    [32]byte
		R    [5]*big.Int
		Diff *big.Int
		Tip  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.C = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.R = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.Diff = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Tip = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Controller *ControllerSession) GetNewCurrentVariables() (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	return _Controller.Contract.GetNewCurrentVariables(&_Controller.CallOpts)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Controller *ControllerCallerSession) GetNewCurrentVariables() (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	return _Controller.Contract.GetNewCurrentVariables(&_Controller.CallOpts)
}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Controller *ControllerCaller) GetNewValueCountbyQueryId(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getNewValueCountbyQueryId", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Controller *ControllerSession) GetNewValueCountbyQueryId(_queryId [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetNewValueCountbyQueryId(&_Controller.CallOpts, _queryId)
}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Controller *ControllerCallerSession) GetNewValueCountbyQueryId(_queryId [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetNewValueCountbyQueryId(&_Controller.CallOpts, _queryId)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Controller *ControllerCaller) GetNewValueCountbyRequestId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getNewValueCountbyRequestId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Controller *ControllerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetNewValueCountbyRequestId(&_Controller.CallOpts, _requestId)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Controller *ControllerCallerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetNewValueCountbyRequestId(&_Controller.CallOpts, _requestId)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_Controller *ControllerCaller) GetStakerInfo(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getStakerInfo", _staker)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_Controller *ControllerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _Controller.Contract.GetStakerInfo(&_Controller.CallOpts, _staker)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_Controller *ControllerCallerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _Controller.Contract.GetStakerInfo(&_Controller.CallOpts, _staker)
}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Controller *ControllerCaller) GetTimestampbyQueryIdandIndex(opts *bind.CallOpts, _queryId [32]byte, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getTimestampbyQueryIdandIndex", _queryId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Controller *ControllerSession) GetTimestampbyQueryIdandIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetTimestampbyQueryIdandIndex(&_Controller.CallOpts, _queryId, _index)
}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Controller *ControllerCallerSession) GetTimestampbyQueryIdandIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetTimestampbyQueryIdandIndex(&_Controller.CallOpts, _queryId, _index)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Controller *ControllerCaller) GetTimestampbyRequestIDandIndex(opts *bind.CallOpts, _requestId *big.Int, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getTimestampbyRequestIDandIndex", _requestId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Controller *ControllerSession) GetTimestampbyRequestIDandIndex(_requestId *big.Int, _index *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetTimestampbyRequestIDandIndex(&_Controller.CallOpts, _requestId, _index)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Controller *ControllerCallerSession) GetTimestampbyRequestIDandIndex(_requestId *big.Int, _index *big.Int) (*big.Int, error) {
	return _Controller.Contract.GetTimestampbyRequestIDandIndex(&_Controller.CallOpts, _requestId, _index)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Controller *ControllerCaller) GetUintVar(opts *bind.CallOpts, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getUintVar", _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Controller *ControllerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetUintVar(&_Controller.CallOpts, _data)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Controller *ControllerCallerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _Controller.Contract.GetUintVar(&_Controller.CallOpts, _data)
}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Controller *ControllerCaller) IsMigrated(opts *bind.CallOpts, _addy common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isMigrated", _addy)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Controller *ControllerSession) IsMigrated(_addy common.Address) (bool, error) {
	return _Controller.Contract.IsMigrated(&_Controller.CallOpts, _addy)
}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Controller *ControllerCallerSession) IsMigrated(_addy common.Address) (bool, error) {
	return _Controller.Contract.IsMigrated(&_Controller.CallOpts, _addy)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Controller *ControllerCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Controller *ControllerSession) Migrated(arg0 common.Address) (bool, error) {
	return _Controller.Contract.Migrated(&_Controller.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Controller *ControllerCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _Controller.Contract.Migrated(&_Controller.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Controller *ControllerCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Controller *ControllerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Controller.Contract.MinersByChallenge(&_Controller.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Controller *ControllerCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Controller.Contract.MinersByChallenge(&_Controller.CallOpts, arg0, arg1)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Controller *ControllerCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Controller *ControllerSession) Name() (string, error) {
	return _Controller.Contract.Name(&_Controller.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Controller *ControllerCallerSession) Name() (string, error) {
	return _Controller.Contract.Name(&_Controller.CallOpts)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Controller *ControllerCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Controller *ControllerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Controller.Contract.NewValueTimestamps(&_Controller.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Controller *ControllerCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Controller.Contract.NewValueTimestamps(&_Controller.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.RequestIdByQueryHash(&_Controller.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Controller *ControllerCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.RequestIdByQueryHash(&_Controller.CallOpts, arg0)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Controller *ControllerCaller) RetrieveData(opts *bind.CallOpts, _requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "retrieveData", _requestId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Controller *ControllerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _Controller.Contract.RetrieveData(&_Controller.CallOpts, _requestId, _timestamp)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Controller *ControllerCallerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _Controller.Contract.RetrieveData(&_Controller.CallOpts, _requestId, _timestamp)
}

// RetrieveData0 is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Controller *ControllerCaller) RetrieveData0(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "retrieveData0", _queryId, _timestamp)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// RetrieveData0 is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Controller *ControllerSession) RetrieveData0(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _Controller.Contract.RetrieveData0(&_Controller.CallOpts, _queryId, _timestamp)
}

// RetrieveData0 is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Controller *ControllerCallerSession) RetrieveData0(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _Controller.Contract.RetrieveData0(&_Controller.CallOpts, _queryId, _timestamp)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Controller *ControllerCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Controller *ControllerSession) Symbol() (string, error) {
	return _Controller.Contract.Symbol(&_Controller.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Controller *ControllerCallerSession) Symbol() (string, error) {
	return _Controller.Contract.Symbol(&_Controller.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Controller *ControllerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Controller *ControllerSession) TotalSupply() (*big.Int, error) {
	return _Controller.Contract.TotalSupply(&_Controller.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Controller *ControllerCallerSession) TotalSupply() (*big.Int, error) {
	return _Controller.Contract.TotalSupply(&_Controller.CallOpts)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Controller *ControllerCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Controller *ControllerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.Uints(&_Controller.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Controller *ControllerCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Controller.Contract.Uints(&_Controller.CallOpts, arg0)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Controller *ControllerCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Controller *ControllerSession) Verify() (*big.Int, error) {
	return _Controller.Contract.Verify(&_Controller.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Controller *ControllerCallerSession) Verify() (*big.Int, error) {
	return _Controller.Contract.Verify(&_Controller.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Controller *ControllerTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Controller *ControllerSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Approve(&_Controller.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Controller *ControllerTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Approve(&_Controller.TransactOpts, _spender, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Controller *ControllerTransactor) ApproveAndTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "approveAndTransferFrom", _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Controller *ControllerSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ApproveAndTransferFrom(&_Controller.TransactOpts, _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Controller *ControllerTransactorSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ApproveAndTransferFrom(&_Controller.TransactOpts, _from, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Controller *ControllerTransactor) Burn(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "burn", _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Controller *ControllerSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Burn(&_Controller.TransactOpts, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Controller *ControllerTransactorSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Burn(&_Controller.TransactOpts, _amount)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_Controller *ControllerTransactor) ChangeControllerContract(opts *bind.TransactOpts, _newController common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeControllerContract", _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_Controller *ControllerSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeControllerContract(&_Controller.TransactOpts, _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_Controller *ControllerTransactorSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeControllerContract(&_Controller.TransactOpts, _newController)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_Controller *ControllerTransactor) ChangeGovernanceContract(opts *bind.TransactOpts, _newGovernance common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeGovernanceContract", _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_Controller *ControllerSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeGovernanceContract(&_Controller.TransactOpts, _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_Controller *ControllerTransactorSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeGovernanceContract(&_Controller.TransactOpts, _newGovernance)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_Controller *ControllerTransactor) ChangeOracleContract(opts *bind.TransactOpts, _newOracle common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeOracleContract", _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_Controller *ControllerSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeOracleContract(&_Controller.TransactOpts, _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_Controller *ControllerTransactorSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeOracleContract(&_Controller.TransactOpts, _newOracle)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_Controller *ControllerTransactor) ChangeStakingStatus(opts *bind.TransactOpts, _reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeStakingStatus", _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_Controller *ControllerSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ChangeStakingStatus(&_Controller.TransactOpts, _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_Controller *ControllerTransactorSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ChangeStakingStatus(&_Controller.TransactOpts, _reporter, _status)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_Controller *ControllerTransactor) ChangeTreasuryContract(opts *bind.TransactOpts, _newTreasury common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeTreasuryContract", _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_Controller *ControllerSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeTreasuryContract(&_Controller.TransactOpts, _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_Controller *ControllerTransactorSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _Controller.Contract.ChangeTreasuryContract(&_Controller.TransactOpts, _newTreasury)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_Controller *ControllerTransactor) ChangeUint(opts *bind.TransactOpts, _target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "changeUint", _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_Controller *ControllerSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ChangeUint(&_Controller.TransactOpts, _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_Controller *ControllerTransactorSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.ChangeUint(&_Controller.TransactOpts, _target, _amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_Controller *ControllerTransactor) DepositStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "depositStake")
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_Controller *ControllerSession) DepositStake() (*types.Transaction, error) {
	return _Controller.Contract.DepositStake(&_Controller.TransactOpts)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_Controller *ControllerTransactorSession) DepositStake() (*types.Transaction, error) {
	return _Controller.Contract.DepositStake(&_Controller.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Controller *ControllerTransactor) Init(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "init")
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Controller *ControllerSession) Init() (*types.Transaction, error) {
	return _Controller.Contract.Init(&_Controller.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Controller *ControllerTransactorSession) Init() (*types.Transaction, error) {
	return _Controller.Contract.Init(&_Controller.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_Controller *ControllerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_Controller *ControllerSession) Migrate() (*types.Transaction, error) {
	return _Controller.Contract.Migrate(&_Controller.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_Controller *ControllerTransactorSession) Migrate() (*types.Transaction, error) {
	return _Controller.Contract.Migrate(&_Controller.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Controller *ControllerTransactor) Mint(opts *bind.TransactOpts, _receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "mint", _receiver, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Controller *ControllerSession) Mint(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Mint(&_Controller.TransactOpts, _receiver, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _receiver, uint256 _amount) returns()
func (_Controller *ControllerTransactorSession) Mint(_receiver common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Mint(&_Controller.TransactOpts, _receiver, _amount)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_Controller *ControllerTransactor) RequestStakingWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "requestStakingWithdraw")
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_Controller *ControllerSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _Controller.Contract.RequestStakingWithdraw(&_Controller.TransactOpts)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_Controller *ControllerTransactorSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _Controller.Contract.RequestStakingWithdraw(&_Controller.TransactOpts)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_Controller *ControllerTransactor) SlashReporter(opts *bind.TransactOpts, _reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "slashReporter", _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_Controller *ControllerSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SlashReporter(&_Controller.TransactOpts, _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_Controller *ControllerTransactorSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SlashReporter(&_Controller.TransactOpts, _reporter, _disputer)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Transfer(&_Controller.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Transfer(&_Controller.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "transferFrom", _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TransferFrom(&_Controller.TransactOpts, _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Controller *ControllerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TransferFrom(&_Controller.TransactOpts, _from, _to, _amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Controller *ControllerTransactor) WithdrawStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "withdrawStake")
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Controller *ControllerSession) WithdrawStake() (*types.Transaction, error) {
	return _Controller.Contract.WithdrawStake(&_Controller.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_Controller *ControllerTransactorSession) WithdrawStake() (*types.Transaction, error) {
	return _Controller.Contract.WithdrawStake(&_Controller.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Controller *ControllerTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Controller.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Controller *ControllerSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Controller.Contract.Fallback(&_Controller.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Controller *ControllerTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Controller.Contract.Fallback(&_Controller.TransactOpts, calldata)
}

// ControllerApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Controller contract.
type ControllerApprovalIterator struct {
	Event *ControllerApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerApproval represents a Approval event raised by the Controller contract.
type ControllerApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Controller *ControllerFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _spender []common.Address) (*ControllerApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return &ControllerApprovalIterator{contract: _Controller.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Controller *ControllerFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ControllerApproval, _owner []common.Address, _spender []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerApproval)
				if err := _Controller.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Controller *ControllerFilterer) ParseApproval(log types.Log) (*ControllerApproval, error) {
	event := new(ControllerApproval)
	if err := _Controller.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerNewStakerIterator is returned from FilterNewStaker and is used to iterate over the raw logs and unpacked data for NewStaker events raised by the Controller contract.
type ControllerNewStakerIterator struct {
	Event *ControllerNewStaker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerNewStakerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerNewStaker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerNewStaker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerNewStakerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerNewStakerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerNewStaker represents a NewStaker event raised by the Controller contract.
type ControllerNewStaker struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewStaker is a free log retrieval operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_Controller *ControllerFilterer) FilterNewStaker(opts *bind.FilterOpts) (*ControllerNewStakerIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "NewStaker")
	if err != nil {
		return nil, err
	}
	return &ControllerNewStakerIterator{contract: _Controller.contract, event: "NewStaker", logs: logs, sub: sub}, nil
}

// WatchNewStaker is a free log subscription operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_Controller *ControllerFilterer) WatchNewStaker(opts *bind.WatchOpts, sink chan<- *ControllerNewStaker) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "NewStaker")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerNewStaker)
				if err := _Controller.contract.UnpackLog(event, "NewStaker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStaker is a log parse operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_Controller *ControllerFilterer) ParseNewStaker(log types.Log) (*ControllerNewStaker, error) {
	event := new(ControllerNewStaker)
	if err := _Controller.contract.UnpackLog(event, "NewStaker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerStakeWithdrawRequestedIterator is returned from FilterStakeWithdrawRequested and is used to iterate over the raw logs and unpacked data for StakeWithdrawRequested events raised by the Controller contract.
type ControllerStakeWithdrawRequestedIterator struct {
	Event *ControllerStakeWithdrawRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerStakeWithdrawRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerStakeWithdrawRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerStakeWithdrawRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerStakeWithdrawRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerStakeWithdrawRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerStakeWithdrawRequested represents a StakeWithdrawRequested event raised by the Controller contract.
type ControllerStakeWithdrawRequested struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakeWithdrawRequested is a free log retrieval operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_Controller *ControllerFilterer) FilterStakeWithdrawRequested(opts *bind.FilterOpts) (*ControllerStakeWithdrawRequestedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "StakeWithdrawRequested")
	if err != nil {
		return nil, err
	}
	return &ControllerStakeWithdrawRequestedIterator{contract: _Controller.contract, event: "StakeWithdrawRequested", logs: logs, sub: sub}, nil
}

// WatchStakeWithdrawRequested is a free log subscription operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_Controller *ControllerFilterer) WatchStakeWithdrawRequested(opts *bind.WatchOpts, sink chan<- *ControllerStakeWithdrawRequested) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "StakeWithdrawRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerStakeWithdrawRequested)
				if err := _Controller.contract.UnpackLog(event, "StakeWithdrawRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeWithdrawRequested is a log parse operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_Controller *ControllerFilterer) ParseStakeWithdrawRequested(log types.Log) (*ControllerStakeWithdrawRequested, error) {
	event := new(ControllerStakeWithdrawRequested)
	if err := _Controller.contract.UnpackLog(event, "StakeWithdrawRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerStakeWithdrawnIterator is returned from FilterStakeWithdrawn and is used to iterate over the raw logs and unpacked data for StakeWithdrawn events raised by the Controller contract.
type ControllerStakeWithdrawnIterator struct {
	Event *ControllerStakeWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerStakeWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerStakeWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerStakeWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerStakeWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerStakeWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerStakeWithdrawn represents a StakeWithdrawn event raised by the Controller contract.
type ControllerStakeWithdrawn struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakeWithdrawn is a free log retrieval operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_Controller *ControllerFilterer) FilterStakeWithdrawn(opts *bind.FilterOpts) (*ControllerStakeWithdrawnIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "StakeWithdrawn")
	if err != nil {
		return nil, err
	}
	return &ControllerStakeWithdrawnIterator{contract: _Controller.contract, event: "StakeWithdrawn", logs: logs, sub: sub}, nil
}

// WatchStakeWithdrawn is a free log subscription operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_Controller *ControllerFilterer) WatchStakeWithdrawn(opts *bind.WatchOpts, sink chan<- *ControllerStakeWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "StakeWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerStakeWithdrawn)
				if err := _Controller.contract.UnpackLog(event, "StakeWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeWithdrawn is a log parse operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_Controller *ControllerFilterer) ParseStakeWithdrawn(log types.Log) (*ControllerStakeWithdrawn, error) {
	event := new(ControllerStakeWithdrawn)
	if err := _Controller.contract.UnpackLog(event, "StakeWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Controller contract.
type ControllerTransferIterator struct {
	Event *ControllerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerTransfer represents a Transfer event raised by the Controller contract.
type ControllerTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Controller *ControllerFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address) (*ControllerTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &ControllerTransferIterator{contract: _Controller.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Controller *ControllerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ControllerTransfer, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerTransfer)
				if err := _Controller.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Controller *ControllerFilterer) ParseTransfer(log types.Log) (*ControllerTransfer, error) {
	event := new(ControllerTransfer)
	if err := _Controller.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GettersMetaData contains all meta data concerning the Getters contract.
var GettersMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getNewValueCountbyQueryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyQueryIdandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"699f200f": "addresses(bytes32)",
		"cbf1304d": "balances(address,uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"1fd22364": "currentMiners(uint256)",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"77b03e0d": "getNewValueCountbyQueryId(bytes32)",
		"ce5e11bf": "getTimestampbyQueryIdandIndex(bytes32,uint256)",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"c5958af9": "retrieveData(bytes32,uint256)",
		"b59e14d4": "uints(bytes32)",
	},
	Bin: "0x608060405234801561001057600080fd5b50610927806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063699f200f11610097578063cbf1304d11610066578063cbf1304d146102b0578063ce5e11bf146102e3578063d01f4d9e146102f6578063db085beb14610316576100f5565b8063699f200f1461021c57806377b03e0d1461025d578063b59e14d414610270578063c5958af914610290576100f5565b806348b18e54116100d357806348b18e541461017b5780634ba0a5ee146101b95780635700242c146101dc57806362dd1d2a146101fc576100f5565b8063024c2ddd146100fa5780631fd2236414610138578063438c0aa314610168575b600080fd5b610125610108366004610701565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61014b61014636600461075c565b6103cf565b604080519283526001600160a01b0390911660208301520161012f565b61012561017636600461075c565b6103fa565b6101a9610189366004610774565b603960209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161012f565b6101a96101c73660046106e7565b604b6020526000908152604090205460ff1681565b6101256101ea36600461075c565b60376020526000908152604090205481565b61012561020a36600461075c565b60486020526000908152604090205481565b61024561022a36600461075c565b6047602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b61012561026b36600461075c565b61041b565b61012561027e36600461075c565b60466020526000908152604090205481565b6102a361029e366004610796565b6104e9565b60405161012f9190610878565b6102c36102be366004610733565b6105c0565b604080516001600160801b0393841681529290911660208301520161012f565b6101256102f1366004610796565b610603565b61012561030436600461075c565b60386020526000908152604090205481565b61038061032436600461075c565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e08201526101000161012f565b603a81600581106103df57600080fd5b6002020180546001909101549091506001600160a01b031682565b6033818154811061040a57600080fd5b600091825260209091200154905081565b7ffa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e600090815260476020527fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b554604051631af3921960e11b8152600481018490526001600160a01b03909116906335e724329060240160206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190610860565b90505b919050565b7ffa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e60005260476020527fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b554604051630b2d2b0d60e01b815260048101849052602481018390526060916001600160a01b031690630b2d2b0d9060440160006040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b991908101906107b7565b9392505050565b604960205281600052604060002081815481106105dc57600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b7ffa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e600090815260476020527fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b554604051631f0dee2d60e21b815260048101859052602481018490526001600160a01b0390911690637c37b8b49060440160206040518083038186803b15801561069857600080fd5b505afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610860565b80356001600160a01b03811681146104e457600080fd5b6000602082840312156106f8578081fd5b6105b9826106d0565b60008060408385031215610713578081fd5b61071c836106d0565b915061072a602084016106d0565b90509250929050565b60008060408385031215610745578182fd5b61074e836106d0565b946020939093013593505050565b60006020828403121561076d578081fd5b5035919050565b60008060408385031215610786578182fd5b8235915061072a602084016106d0565b600080604083850312156107a8578182fd5b50508035926020909101359150565b6000602082840312156107c8578081fd5b815167ffffffffffffffff808211156107df578283fd5b818401915084601f8301126107f2578283fd5b815181811115610804576108046108db565b604051601f8201601f19908116603f0116810190838211818310171561082c5761082c6108db565b81604052828152876020848701011115610844578586fd5b6108558360208301602088016108ab565b979650505050505050565b600060208284031215610871578081fd5b5051919050565b60006020825282518060208401526108978160408501602087016108ab565b601f01601f19169190910160400192915050565b60005b838110156108c65781810151838201526020016108ae565b838111156108d5576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122082983e8dd5d7db6e6aafd14f67de2902b8f65b293f0082b85f6bc7a988cd3bd264736f6c63430008030033",
}

// GettersABI is the input ABI used to generate the binding from.
// Deprecated: Use GettersMetaData.ABI instead.
var GettersABI = GettersMetaData.ABI

// Deprecated: Use GettersMetaData.Sigs instead.
// GettersFuncSigs maps the 4-byte function signature to its string representation.
var GettersFuncSigs = GettersMetaData.Sigs

// GettersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GettersMetaData.Bin instead.
var GettersBin = GettersMetaData.Bin

// DeployGetters deploys a new Ethereum contract, binding an instance of Getters to it.
func DeployGetters(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Getters, error) {
	parsed, err := GettersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GettersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Getters{GettersCaller: GettersCaller{contract: contract}, GettersTransactor: GettersTransactor{contract: contract}, GettersFilterer: GettersFilterer{contract: contract}}, nil
}

// Getters is an auto generated Go binding around an Ethereum contract.
type Getters struct {
	GettersCaller     // Read-only binding to the contract
	GettersTransactor // Write-only binding to the contract
	GettersFilterer   // Log filterer for contract events
}

// GettersCaller is an auto generated read-only Go binding around an Ethereum contract.
type GettersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GettersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GettersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GettersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GettersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GettersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GettersSession struct {
	Contract     *Getters          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GettersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GettersCallerSession struct {
	Contract *GettersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// GettersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GettersTransactorSession struct {
	Contract     *GettersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// GettersRaw is an auto generated low-level Go binding around an Ethereum contract.
type GettersRaw struct {
	Contract *Getters // Generic contract binding to access the raw methods on
}

// GettersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GettersCallerRaw struct {
	Contract *GettersCaller // Generic read-only contract binding to access the raw methods on
}

// GettersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GettersTransactorRaw struct {
	Contract *GettersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGetters creates a new instance of Getters, bound to a specific deployed contract.
func NewGetters(address common.Address, backend bind.ContractBackend) (*Getters, error) {
	contract, err := bindGetters(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Getters{GettersCaller: GettersCaller{contract: contract}, GettersTransactor: GettersTransactor{contract: contract}, GettersFilterer: GettersFilterer{contract: contract}}, nil
}

// NewGettersCaller creates a new read-only instance of Getters, bound to a specific deployed contract.
func NewGettersCaller(address common.Address, caller bind.ContractCaller) (*GettersCaller, error) {
	contract, err := bindGetters(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GettersCaller{contract: contract}, nil
}

// NewGettersTransactor creates a new write-only instance of Getters, bound to a specific deployed contract.
func NewGettersTransactor(address common.Address, transactor bind.ContractTransactor) (*GettersTransactor, error) {
	contract, err := bindGetters(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GettersTransactor{contract: contract}, nil
}

// NewGettersFilterer creates a new log filterer instance of Getters, bound to a specific deployed contract.
func NewGettersFilterer(address common.Address, filterer bind.ContractFilterer) (*GettersFilterer, error) {
	contract, err := bindGetters(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GettersFilterer{contract: contract}, nil
}

// bindGetters binds a generic wrapper to an already deployed contract.
func bindGetters(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GettersABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Getters *GettersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Getters.Contract.GettersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Getters *GettersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Getters.Contract.GettersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Getters *GettersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Getters.Contract.GettersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Getters *GettersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Getters.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Getters *GettersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Getters.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Getters *GettersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Getters.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Getters *GettersCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Getters *GettersSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Getters.Contract.Allowances(&_Getters.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Getters *GettersCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Getters.Contract.Allowances(&_Getters.CallOpts, arg0, arg1)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Getters *GettersCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Getters *GettersSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Getters.Contract.Addresses(&_Getters.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Getters *GettersCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Getters.Contract.Addresses(&_Getters.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Getters *GettersCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Getters *GettersSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Getters.Contract.Balances(&_Getters.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Getters *GettersCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Getters.Contract.Balances(&_Getters.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Getters *GettersCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Getters *GettersSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Getters.Contract.BytesVars(&_Getters.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Getters *GettersCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Getters.Contract.BytesVars(&_Getters.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Getters *GettersCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Getters *GettersSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Getters.Contract.CurrentMiners(&_Getters.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Getters *GettersCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Getters.Contract.CurrentMiners(&_Getters.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Getters *GettersCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Getters *GettersSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.DisputeIdByDisputeHash(&_Getters.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Getters *GettersCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.DisputeIdByDisputeHash(&_Getters.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Getters *GettersCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Getters *GettersSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Getters.Contract.DisputesById(&_Getters.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Getters *GettersCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Getters.Contract.DisputesById(&_Getters.CallOpts, arg0)
}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Getters *GettersCaller) GetNewValueCountbyQueryId(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "getNewValueCountbyQueryId", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Getters *GettersSession) GetNewValueCountbyQueryId(_queryId [32]byte) (*big.Int, error) {
	return _Getters.Contract.GetNewValueCountbyQueryId(&_Getters.CallOpts, _queryId)
}

// GetNewValueCountbyQueryId is a free data retrieval call binding the contract method 0x77b03e0d.
//
// Solidity: function getNewValueCountbyQueryId(bytes32 _queryId) view returns(uint256)
func (_Getters *GettersCallerSession) GetNewValueCountbyQueryId(_queryId [32]byte) (*big.Int, error) {
	return _Getters.Contract.GetNewValueCountbyQueryId(&_Getters.CallOpts, _queryId)
}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Getters *GettersCaller) GetTimestampbyQueryIdandIndex(opts *bind.CallOpts, _queryId [32]byte, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "getTimestampbyQueryIdandIndex", _queryId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Getters *GettersSession) GetTimestampbyQueryIdandIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _Getters.Contract.GetTimestampbyQueryIdandIndex(&_Getters.CallOpts, _queryId, _index)
}

// GetTimestampbyQueryIdandIndex is a free data retrieval call binding the contract method 0xce5e11bf.
//
// Solidity: function getTimestampbyQueryIdandIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_Getters *GettersCallerSession) GetTimestampbyQueryIdandIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _Getters.Contract.GetTimestampbyQueryIdandIndex(&_Getters.CallOpts, _queryId, _index)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Getters *GettersCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Getters *GettersSession) Migrated(arg0 common.Address) (bool, error) {
	return _Getters.Contract.Migrated(&_Getters.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Getters *GettersCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _Getters.Contract.Migrated(&_Getters.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Getters *GettersCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Getters *GettersSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Getters.Contract.MinersByChallenge(&_Getters.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Getters *GettersCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Getters.Contract.MinersByChallenge(&_Getters.CallOpts, arg0, arg1)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Getters *GettersCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Getters *GettersSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Getters.Contract.NewValueTimestamps(&_Getters.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Getters *GettersCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Getters.Contract.NewValueTimestamps(&_Getters.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Getters *GettersCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Getters *GettersSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.RequestIdByQueryHash(&_Getters.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Getters *GettersCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.RequestIdByQueryHash(&_Getters.CallOpts, arg0)
}

// RetrieveData is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Getters *GettersCaller) RetrieveData(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "retrieveData", _queryId, _timestamp)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// RetrieveData is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Getters *GettersSession) RetrieveData(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _Getters.Contract.RetrieveData(&_Getters.CallOpts, _queryId, _timestamp)
}

// RetrieveData is a free data retrieval call binding the contract method 0xc5958af9.
//
// Solidity: function retrieveData(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_Getters *GettersCallerSession) RetrieveData(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _Getters.Contract.RetrieveData(&_Getters.CallOpts, _queryId, _timestamp)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Getters *GettersCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Getters.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Getters *GettersSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.Uints(&_Getters.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Getters *GettersCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Getters.Contract.Uints(&_Getters.CallOpts, arg0)
}

// IControllerMetaData contains all meta data concerning the IController contract.
var IControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minerIndex\",\"type\":\"uint256\"}],\"name\":\"beginDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"changeOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"changeStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasuryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_target\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_c\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[5]\",\"name\":\"_r\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"idsOnDeck\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"tipsOnDeck\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"slashReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tipQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"unlockDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supportsDispute\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"699f200f": "addresses(bytes32)",
		"dd62ed3e": "allowance(address,address)",
		"999cf26c": "allowedToTrade(address,uint256)",
		"095ea7b3": "approve(address,uint256)",
		"288c9c9d": "approveAndTransferFrom(address,address,uint256)",
		"70a08231": "balanceOf(address)",
		"4ee2cd7e": "balanceOfAt(address,uint256)",
		"8581af19": "beginDispute(uint256,uint256,uint256)",
		"42966c68": "burn(uint256)",
		"3c46a185": "changeControllerContract(address)",
		"47abd7f1": "changeDeity(address)",
		"e8ce51d7": "changeGovernanceContract(address)",
		"1cbd3151": "changeOracleContract(address)",
		"a6f9dae1": "changeOwner(address)",
		"a1332c5c": "changeStakingStatus(address,uint256)",
		"ae0a8279": "changeTellorContract(address)",
		"bd87e0c9": "changeTreasuryContract(address)",
		"740358e6": "changeUint(bytes32,uint256)",
		"313ce567": "decimals()",
		"0d2d76a2": "depositStake()",
		"133bee5e": "getAddressVars(bytes32)",
		"da379941": "getDisputeIdByDisputeHash(bytes32)",
		"3180f8df": "getLastNewValueById(uint256)",
		"4049f198": "getNewCurrentVariables()",
		"46eee1c4": "getNewValueCountbyRequestId(uint256)",
		"9a7077ab": "getNewVariablesOnDeck()",
		"733bdef0": "getStakerInfo(address)",
		"77fbb663": "getTimestampbyRequestIDandIndex(uint256,uint256)",
		"612c8f7f": "getUintVar(bytes32)",
		"e1c7392a": "init()",
		"8fd3ab80": "migrate()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"28449c3a": "requestStakingWithdraw()",
		"93fa4915": "retrieveData(uint256,uint256)",
		"4dfc2a34": "slashReporter(address,address)",
		"95d89b41": "symbol()",
		"4d318b0e": "tallyVotes(uint256)",
		"2227dff8": "tipQuery(uint256,uint256,bytes)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"b59e14d4": "uints(bytes32)",
		"9a01ca13": "unlockDisputeFee(uint256)",
		"c9d27afe": "vote(uint256,bool)",
		"bed9d861": "withdrawStake()",
	},
}

// IControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IControllerMetaData.ABI instead.
var IControllerABI = IControllerMetaData.ABI

// Deprecated: Use IControllerMetaData.Sigs instead.
// IControllerFuncSigs maps the 4-byte function signature to its string representation.
var IControllerFuncSigs = IControllerMetaData.Sigs

// IController is an auto generated Go binding around an Ethereum contract.
type IController struct {
	IControllerCaller     // Read-only binding to the contract
	IControllerTransactor // Write-only binding to the contract
	IControllerFilterer   // Log filterer for contract events
}

// IControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IControllerSession struct {
	Contract     *IController      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IControllerCallerSession struct {
	Contract *IControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IControllerTransactorSession struct {
	Contract     *IControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IControllerRaw struct {
	Contract *IController // Generic contract binding to access the raw methods on
}

// IControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IControllerCallerRaw struct {
	Contract *IControllerCaller // Generic read-only contract binding to access the raw methods on
}

// IControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IControllerTransactorRaw struct {
	Contract *IControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIController creates a new instance of IController, bound to a specific deployed contract.
func NewIController(address common.Address, backend bind.ContractBackend) (*IController, error) {
	contract, err := bindIController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IController{IControllerCaller: IControllerCaller{contract: contract}, IControllerTransactor: IControllerTransactor{contract: contract}, IControllerFilterer: IControllerFilterer{contract: contract}}, nil
}

// NewIControllerCaller creates a new read-only instance of IController, bound to a specific deployed contract.
func NewIControllerCaller(address common.Address, caller bind.ContractCaller) (*IControllerCaller, error) {
	contract, err := bindIController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IControllerCaller{contract: contract}, nil
}

// NewIControllerTransactor creates a new write-only instance of IController, bound to a specific deployed contract.
func NewIControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*IControllerTransactor, error) {
	contract, err := bindIController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IControllerTransactor{contract: contract}, nil
}

// NewIControllerFilterer creates a new log filterer instance of IController, bound to a specific deployed contract.
func NewIControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*IControllerFilterer, error) {
	contract, err := bindIController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IControllerFilterer{contract: contract}, nil
}

// bindIController binds a generic wrapper to an already deployed contract.
func bindIController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IController *IControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IController.Contract.IControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IController *IControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.Contract.IControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IController *IControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IController.Contract.IControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IController *IControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IController *IControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IController *IControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IController.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerCaller) Allowance(opts *bind.CallOpts, _user common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "allowance", _user, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _IController.Contract.Allowance(&_IController.CallOpts, _user, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerCallerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _IController.Contract.Allowance(&_IController.CallOpts, _user, _spender)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerCaller) AllowedToTrade(opts *bind.CallOpts, _user common.Address, _amount *big.Int) (bool, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "allowedToTrade", _user, _amount)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _IController.Contract.AllowedToTrade(&_IController.CallOpts, _user, _amount)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerCallerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _IController.Contract.AllowedToTrade(&_IController.CallOpts, _user, _amount)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerCaller) BalanceOf(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "balanceOf", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _IController.Contract.BalanceOf(&_IController.CallOpts, _user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerCallerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _IController.Contract.BalanceOf(&_IController.CallOpts, _user)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerCaller) BalanceOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "balanceOfAt", _user, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _IController.Contract.BalanceOfAt(&_IController.CallOpts, _user, _blockNumber)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerCallerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _IController.Contract.BalanceOfAt(&_IController.CallOpts, _user, _blockNumber)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerSession) Decimals() (uint8, error) {
	return _IController.Contract.Decimals(&_IController.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerCallerSession) Decimals() (uint8, error) {
	return _IController.Contract.Decimals(&_IController.CallOpts)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerCaller) GetAddressVars(opts *bind.CallOpts, _data [32]byte) (common.Address, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getAddressVars", _data)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _IController.Contract.GetAddressVars(&_IController.CallOpts, _data)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerCallerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _IController.Contract.GetAddressVars(&_IController.CallOpts, _data)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerCaller) GetDisputeIdByDisputeHash(opts *bind.CallOpts, _hash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getDisputeIdByDisputeHash", _hash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _IController.Contract.GetDisputeIdByDisputeHash(&_IController.CallOpts, _hash)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerCallerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _IController.Contract.GetDisputeIdByDisputeHash(&_IController.CallOpts, _hash)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerCaller) GetLastNewValueById(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, bool, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getLastNewValueById", _requestId)

	if err != nil {
		return *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _IController.Contract.GetLastNewValueById(&_IController.CallOpts, _requestId)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerCallerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _IController.Contract.GetLastNewValueById(&_IController.CallOpts, _requestId)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerCaller) GetNewCurrentVariables(opts *bind.CallOpts) (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewCurrentVariables")

	outstruct := new(struct {
		C [32]byte
		R [5]*big.Int
		D *big.Int
		T *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.C = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.R = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.D = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.T = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerSession) GetNewCurrentVariables() (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	return _IController.Contract.GetNewCurrentVariables(&_IController.CallOpts)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerCallerSession) GetNewCurrentVariables() (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	return _IController.Contract.GetNewCurrentVariables(&_IController.CallOpts)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerCaller) GetNewValueCountbyRequestId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewValueCountbyRequestId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _IController.Contract.GetNewValueCountbyRequestId(&_IController.CallOpts, _requestId)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerCallerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _IController.Contract.GetNewValueCountbyRequestId(&_IController.CallOpts, _requestId)
}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerCaller) GetNewVariablesOnDeck(opts *bind.CallOpts) (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewVariablesOnDeck")

	outstruct := new(struct {
		IdsOnDeck  [5]*big.Int
		TipsOnDeck [5]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdsOnDeck = *abi.ConvertType(out[0], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.TipsOnDeck = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)

	return *outstruct, err

}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerSession) GetNewVariablesOnDeck() (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	return _IController.Contract.GetNewVariablesOnDeck(&_IController.CallOpts)
}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerCallerSession) GetNewVariablesOnDeck() (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	return _IController.Contract.GetNewVariablesOnDeck(&_IController.CallOpts)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerCaller) GetStakerInfo(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getStakerInfo", _staker)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _IController.Contract.GetStakerInfo(&_IController.CallOpts, _staker)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerCallerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _IController.Contract.GetStakerInfo(&_IController.CallOpts, _staker)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerCaller) GetTimestampbyRequestIDandIndex(opts *bind.CallOpts, _requestID *big.Int, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getTimestampbyRequestIDandIndex", _requestID, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerSession) GetTimestampbyRequestIDandIndex(_requestID *big.Int, _index *big.Int) (*big.Int, error) {
	return _IController.Contract.GetTimestampbyRequestIDandIndex(&_IController.CallOpts, _requestID, _index)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerCallerSession) GetTimestampbyRequestIDandIndex(_requestID *big.Int, _index *big.Int) (*big.Int, error) {
	return _IController.Contract.GetTimestampbyRequestIDandIndex(&_IController.CallOpts, _requestID, _index)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerCaller) GetUintVar(opts *bind.CallOpts, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getUintVar", _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _IController.Contract.GetUintVar(&_IController.CallOpts, _data)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerCallerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _IController.Contract.GetUintVar(&_IController.CallOpts, _data)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerSession) Name() (string, error) {
	return _IController.Contract.Name(&_IController.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerCallerSession) Name() (string, error) {
	return _IController.Contract.Name(&_IController.CallOpts)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerCaller) RetrieveData(opts *bind.CallOpts, _requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "retrieveData", _requestId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _IController.Contract.RetrieveData(&_IController.CallOpts, _requestId, _timestamp)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerCallerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _IController.Contract.RetrieveData(&_IController.CallOpts, _requestId, _timestamp)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerSession) Symbol() (string, error) {
	return _IController.Contract.Symbol(&_IController.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerCallerSession) Symbol() (string, error) {
	return _IController.Contract.Symbol(&_IController.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerSession) TotalSupply() (*big.Int, error) {
	return _IController.Contract.TotalSupply(&_IController.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerCallerSession) TotalSupply() (*big.Int, error) {
	return _IController.Contract.TotalSupply(&_IController.CallOpts)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerTransactor) Addresses(opts *bind.TransactOpts, arg0 [32]byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "addresses", arg0)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerSession) Addresses(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Addresses(&_IController.TransactOpts, arg0)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerTransactorSession) Addresses(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Addresses(&_IController.TransactOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Approve(&_IController.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Approve(&_IController.TransactOpts, _spender, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerTransactor) ApproveAndTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "approveAndTransferFrom", _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ApproveAndTransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerTransactorSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ApproveAndTransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerTransactor) BeginDispute(opts *bind.TransactOpts, _requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "beginDispute", _requestId, _timestamp, _minerIndex)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerSession) BeginDispute(_requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.Contract.BeginDispute(&_IController.TransactOpts, _requestId, _timestamp, _minerIndex)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerTransactorSession) BeginDispute(_requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.Contract.BeginDispute(&_IController.TransactOpts, _requestId, _timestamp, _minerIndex)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerTransactor) Burn(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "burn", _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Burn(&_IController.TransactOpts, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerTransactorSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Burn(&_IController.TransactOpts, _amount)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerTransactor) ChangeControllerContract(opts *bind.TransactOpts, _newController common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeControllerContract", _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeControllerContract(&_IController.TransactOpts, _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerTransactorSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeControllerContract(&_IController.TransactOpts, _newController)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerTransactor) ChangeDeity(opts *bind.TransactOpts, _newDeity common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeDeity", _newDeity)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerSession) ChangeDeity(_newDeity common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeDeity(&_IController.TransactOpts, _newDeity)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerTransactorSession) ChangeDeity(_newDeity common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeDeity(&_IController.TransactOpts, _newDeity)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerTransactor) ChangeGovernanceContract(opts *bind.TransactOpts, _newGovernance common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeGovernanceContract", _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeGovernanceContract(&_IController.TransactOpts, _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerTransactorSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeGovernanceContract(&_IController.TransactOpts, _newGovernance)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerTransactor) ChangeOracleContract(opts *bind.TransactOpts, _newOracle common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeOracleContract", _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOracleContract(&_IController.TransactOpts, _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerTransactorSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOracleContract(&_IController.TransactOpts, _newOracle)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOwner(&_IController.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOwner(&_IController.TransactOpts, _newOwner)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerTransactor) ChangeStakingStatus(opts *bind.TransactOpts, _reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeStakingStatus", _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeStakingStatus(&_IController.TransactOpts, _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerTransactorSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeStakingStatus(&_IController.TransactOpts, _reporter, _status)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerTransactor) ChangeTellorContract(opts *bind.TransactOpts, _tContract common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeTellorContract", _tContract)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerSession) ChangeTellorContract(_tContract common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTellorContract(&_IController.TransactOpts, _tContract)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerTransactorSession) ChangeTellorContract(_tContract common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTellorContract(&_IController.TransactOpts, _tContract)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerTransactor) ChangeTreasuryContract(opts *bind.TransactOpts, _newTreasury common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeTreasuryContract", _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTreasuryContract(&_IController.TransactOpts, _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerTransactorSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTreasuryContract(&_IController.TransactOpts, _newTreasury)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerTransactor) ChangeUint(opts *bind.TransactOpts, _target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeUint", _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeUint(&_IController.TransactOpts, _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerTransactorSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeUint(&_IController.TransactOpts, _target, _amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerTransactor) DepositStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "depositStake")
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerSession) DepositStake() (*types.Transaction, error) {
	return _IController.Contract.DepositStake(&_IController.TransactOpts)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerTransactorSession) DepositStake() (*types.Transaction, error) {
	return _IController.Contract.DepositStake(&_IController.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerTransactor) Init(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "init")
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerSession) Init() (*types.Transaction, error) {
	return _IController.Contract.Init(&_IController.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerTransactorSession) Init() (*types.Transaction, error) {
	return _IController.Contract.Init(&_IController.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerSession) Migrate() (*types.Transaction, error) {
	return _IController.Contract.Migrate(&_IController.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerTransactorSession) Migrate() (*types.Transaction, error) {
	return _IController.Contract.Migrate(&_IController.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerTransactor) Mint(opts *bind.TransactOpts, _reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "mint", _reciever, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerSession) Mint(_reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Mint(&_IController.TransactOpts, _reciever, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerTransactorSession) Mint(_reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Mint(&_IController.TransactOpts, _reciever, _amount)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerTransactor) RequestStakingWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "requestStakingWithdraw")
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _IController.Contract.RequestStakingWithdraw(&_IController.TransactOpts)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerTransactorSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _IController.Contract.RequestStakingWithdraw(&_IController.TransactOpts)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerTransactor) SlashReporter(opts *bind.TransactOpts, _reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "slashReporter", _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.Contract.SlashReporter(&_IController.TransactOpts, _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerTransactorSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.Contract.SlashReporter(&_IController.TransactOpts, _reporter, _disputer)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerTransactor) TallyVotes(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "tallyVotes", _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TallyVotes(&_IController.TransactOpts, _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerTransactorSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TallyVotes(&_IController.TransactOpts, _disputeId)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerTransactor) TipQuery(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "tipQuery", arg0, arg1, arg2)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerSession) TipQuery(arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.Contract.TipQuery(&_IController.TransactOpts, arg0, arg1, arg2)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerTransactorSession) TipQuery(arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.Contract.TipQuery(&_IController.TransactOpts, arg0, arg1, arg2)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Transfer(&_IController.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Transfer(&_IController.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "transferFrom", _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerTransactor) Uints(opts *bind.TransactOpts, arg0 [32]byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "uints", arg0)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerSession) Uints(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Uints(&_IController.TransactOpts, arg0)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerTransactorSession) Uints(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Uints(&_IController.TransactOpts, arg0)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerTransactor) UnlockDisputeFee(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "unlockDisputeFee", _disputeId)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerSession) UnlockDisputeFee(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.UnlockDisputeFee(&_IController.TransactOpts, _disputeId)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerTransactorSession) UnlockDisputeFee(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.UnlockDisputeFee(&_IController.TransactOpts, _disputeId)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerTransactor) Vote(opts *bind.TransactOpts, _disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "vote", _disputeId, _supportsDispute)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerSession) Vote(_disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.Contract.Vote(&_IController.TransactOpts, _disputeId, _supportsDispute)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerTransactorSession) Vote(_disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.Contract.Vote(&_IController.TransactOpts, _disputeId, _supportsDispute)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerTransactor) WithdrawStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "withdrawStake")
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerSession) WithdrawStake() (*types.Transaction, error) {
	return _IController.Contract.WithdrawStake(&_IController.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerTransactorSession) WithdrawStake() (*types.Transaction, error) {
	return _IController.Contract.WithdrawStake(&_IController.TransactOpts)
}

// IGovernanceMetaData contains all meta data concerning the IGovernance contract.
var IGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"beginDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegateOfAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getDelegateInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getOpenDisputesOnId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getVoteInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool[2]\",\"name\":\"\",\"type\":\"bool[2]\"},{\"internalType\":\"enumIGovernance.VoteResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getVoteRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isApprovedGovernanceContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"isFunctionApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_function\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"proposeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setApprovedFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"testMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMinDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supports\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_invalidQuery\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addys\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supports\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_invalidQuery\",\"type\":\"bool\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"1f379acc": "beginDispute(bytes32,uint256)",
		"5c19a95c": "delegate(address)",
		"b3427a2b": "delegateOfAt(address,uint256)",
		"a7c438bc": "didVote(uint256,address)",
		"f98a4eca": "executeVote(uint256)",
		"10c67e1c": "getDelegateInfo(address)",
		"6169c308": "getDisputeInfo(uint256)",
		"64558c8f": "getOpenDisputesOnId(uint256)",
		"e7b3387c": "getVoteCount()",
		"8d824273": "getVoteInfo(uint256)",
		"248638e5": "getVoteRounds(bytes32)",
		"fd3171b2": "isApprovedGovernanceContract(address)",
		"2d2506a9": "isFunctionApproved(bytes4)",
		"0b5e95c3": "proposeVote(address,bytes4,bytes,uint256)",
		"e48d4b3b": "setApprovedFunction(bytes4,bool)",
		"4d318b0e": "tallyVotes(uint256)",
		"1abe5974": "testMin(uint256,uint256)",
		"90e5b235": "updateMinDisputeFee()",
		"fc735e99": "verify()",
		"df133bca": "vote(uint256,bool,bool)",
		"e5d91314": "voteFor(address[],uint256,bool,bool)",
	},
}

// IGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use IGovernanceMetaData.ABI instead.
var IGovernanceABI = IGovernanceMetaData.ABI

// Deprecated: Use IGovernanceMetaData.Sigs instead.
// IGovernanceFuncSigs maps the 4-byte function signature to its string representation.
var IGovernanceFuncSigs = IGovernanceMetaData.Sigs

// IGovernance is an auto generated Go binding around an Ethereum contract.
type IGovernance struct {
	IGovernanceCaller     // Read-only binding to the contract
	IGovernanceTransactor // Write-only binding to the contract
	IGovernanceFilterer   // Log filterer for contract events
}

// IGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type IGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IGovernanceSession struct {
	Contract     *IGovernance      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IGovernanceCallerSession struct {
	Contract *IGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IGovernanceTransactorSession struct {
	Contract     *IGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type IGovernanceRaw struct {
	Contract *IGovernance // Generic contract binding to access the raw methods on
}

// IGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IGovernanceCallerRaw struct {
	Contract *IGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// IGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IGovernanceTransactorRaw struct {
	Contract *IGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIGovernance creates a new instance of IGovernance, bound to a specific deployed contract.
func NewIGovernance(address common.Address, backend bind.ContractBackend) (*IGovernance, error) {
	contract, err := bindIGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IGovernance{IGovernanceCaller: IGovernanceCaller{contract: contract}, IGovernanceTransactor: IGovernanceTransactor{contract: contract}, IGovernanceFilterer: IGovernanceFilterer{contract: contract}}, nil
}

// NewIGovernanceCaller creates a new read-only instance of IGovernance, bound to a specific deployed contract.
func NewIGovernanceCaller(address common.Address, caller bind.ContractCaller) (*IGovernanceCaller, error) {
	contract, err := bindIGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IGovernanceCaller{contract: contract}, nil
}

// NewIGovernanceTransactor creates a new write-only instance of IGovernance, bound to a specific deployed contract.
func NewIGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*IGovernanceTransactor, error) {
	contract, err := bindIGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IGovernanceTransactor{contract: contract}, nil
}

// NewIGovernanceFilterer creates a new log filterer instance of IGovernance, bound to a specific deployed contract.
func NewIGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*IGovernanceFilterer, error) {
	contract, err := bindIGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IGovernanceFilterer{contract: contract}, nil
}

// bindIGovernance binds a generic wrapper to an already deployed contract.
func bindIGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IGovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovernance *IGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IGovernance.Contract.IGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovernance *IGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovernance.Contract.IGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovernance *IGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovernance.Contract.IGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IGovernance *IGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IGovernance *IGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IGovernance *IGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IGovernance.Contract.contract.Transact(opts, method, params...)
}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_IGovernance *IGovernanceCaller) DelegateOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "delegateOfAt", _user, _blockNumber)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_IGovernance *IGovernanceSession) DelegateOfAt(_user common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _IGovernance.Contract.DelegateOfAt(&_IGovernance.CallOpts, _user, _blockNumber)
}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_IGovernance *IGovernanceCallerSession) DelegateOfAt(_user common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _IGovernance.Contract.DelegateOfAt(&_IGovernance.CallOpts, _user, _blockNumber)
}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_IGovernance *IGovernanceCaller) DidVote(opts *bind.CallOpts, _disputeId *big.Int, _voter common.Address) (bool, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "didVote", _disputeId, _voter)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_IGovernance *IGovernanceSession) DidVote(_disputeId *big.Int, _voter common.Address) (bool, error) {
	return _IGovernance.Contract.DidVote(&_IGovernance.CallOpts, _disputeId, _voter)
}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_IGovernance *IGovernanceCallerSession) DidVote(_disputeId *big.Int, _voter common.Address) (bool, error) {
	return _IGovernance.Contract.DidVote(&_IGovernance.CallOpts, _disputeId, _voter)
}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_IGovernance *IGovernanceCaller) GetDelegateInfo(opts *bind.CallOpts, _holder common.Address) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getDelegateInfo", _holder)

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_IGovernance *IGovernanceSession) GetDelegateInfo(_holder common.Address) (common.Address, *big.Int, error) {
	return _IGovernance.Contract.GetDelegateInfo(&_IGovernance.CallOpts, _holder)
}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_IGovernance *IGovernanceCallerSession) GetDelegateInfo(_holder common.Address) (common.Address, *big.Int, error) {
	return _IGovernance.Contract.GetDelegateInfo(&_IGovernance.CallOpts, _holder)
}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(uint256, uint256, bytes, address)
func (_IGovernance *IGovernanceCaller) GetDisputeInfo(opts *bind.CallOpts, _disputeId *big.Int) (*big.Int, *big.Int, []byte, common.Address, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getDisputeInfo", _disputeId)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new([]byte), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	out3 := *abi.ConvertType(out[3], new(common.Address)).(*common.Address)

	return out0, out1, out2, out3, err

}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(uint256, uint256, bytes, address)
func (_IGovernance *IGovernanceSession) GetDisputeInfo(_disputeId *big.Int) (*big.Int, *big.Int, []byte, common.Address, error) {
	return _IGovernance.Contract.GetDisputeInfo(&_IGovernance.CallOpts, _disputeId)
}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(uint256, uint256, bytes, address)
func (_IGovernance *IGovernanceCallerSession) GetDisputeInfo(_disputeId *big.Int) (*big.Int, *big.Int, []byte, common.Address, error) {
	return _IGovernance.Contract.GetDisputeInfo(&_IGovernance.CallOpts, _disputeId)
}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x64558c8f.
//
// Solidity: function getOpenDisputesOnId(uint256 _disputeId) view returns(uint256)
func (_IGovernance *IGovernanceCaller) GetOpenDisputesOnId(opts *bind.CallOpts, _disputeId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getOpenDisputesOnId", _disputeId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x64558c8f.
//
// Solidity: function getOpenDisputesOnId(uint256 _disputeId) view returns(uint256)
func (_IGovernance *IGovernanceSession) GetOpenDisputesOnId(_disputeId *big.Int) (*big.Int, error) {
	return _IGovernance.Contract.GetOpenDisputesOnId(&_IGovernance.CallOpts, _disputeId)
}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x64558c8f.
//
// Solidity: function getOpenDisputesOnId(uint256 _disputeId) view returns(uint256)
func (_IGovernance *IGovernanceCallerSession) GetOpenDisputesOnId(_disputeId *big.Int) (*big.Int, error) {
	return _IGovernance.Contract.GetOpenDisputesOnId(&_IGovernance.CallOpts, _disputeId)
}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_IGovernance *IGovernanceCaller) GetVoteCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getVoteCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_IGovernance *IGovernanceSession) GetVoteCount() (*big.Int, error) {
	return _IGovernance.Contract.GetVoteCount(&_IGovernance.CallOpts)
}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_IGovernance *IGovernanceCallerSession) GetVoteCount() (*big.Int, error) {
	return _IGovernance.Contract.GetVoteCount(&_IGovernance.CallOpts)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_IGovernance *IGovernanceCaller) GetVoteInfo(opts *bind.CallOpts, _disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getVoteInfo", _disputeId)

	if err != nil {
		return *new([32]byte), *new([8]*big.Int), *new([2]bool), *new(uint8), *new([]byte), *new([4]byte), *new([2]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new([8]*big.Int)).(*[8]*big.Int)
	out2 := *abi.ConvertType(out[2], new([2]bool)).(*[2]bool)
	out3 := *abi.ConvertType(out[3], new(uint8)).(*uint8)
	out4 := *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	out5 := *abi.ConvertType(out[5], new([4]byte)).(*[4]byte)
	out6 := *abi.ConvertType(out[6], new([2]common.Address)).(*[2]common.Address)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_IGovernance *IGovernanceSession) GetVoteInfo(_disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	return _IGovernance.Contract.GetVoteInfo(&_IGovernance.CallOpts, _disputeId)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_IGovernance *IGovernanceCallerSession) GetVoteInfo(_disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	return _IGovernance.Contract.GetVoteInfo(&_IGovernance.CallOpts, _disputeId)
}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_IGovernance *IGovernanceCaller) GetVoteRounds(opts *bind.CallOpts, _hash [32]byte) ([]*big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "getVoteRounds", _hash)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_IGovernance *IGovernanceSession) GetVoteRounds(_hash [32]byte) ([]*big.Int, error) {
	return _IGovernance.Contract.GetVoteRounds(&_IGovernance.CallOpts, _hash)
}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_IGovernance *IGovernanceCallerSession) GetVoteRounds(_hash [32]byte) ([]*big.Int, error) {
	return _IGovernance.Contract.GetVoteRounds(&_IGovernance.CallOpts, _hash)
}

// IsApprovedGovernanceContract is a free data retrieval call binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) view returns(bool)
func (_IGovernance *IGovernanceCaller) IsApprovedGovernanceContract(opts *bind.CallOpts, _contract common.Address) (bool, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "isApprovedGovernanceContract", _contract)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedGovernanceContract is a free data retrieval call binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) view returns(bool)
func (_IGovernance *IGovernanceSession) IsApprovedGovernanceContract(_contract common.Address) (bool, error) {
	return _IGovernance.Contract.IsApprovedGovernanceContract(&_IGovernance.CallOpts, _contract)
}

// IsApprovedGovernanceContract is a free data retrieval call binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) view returns(bool)
func (_IGovernance *IGovernanceCallerSession) IsApprovedGovernanceContract(_contract common.Address) (bool, error) {
	return _IGovernance.Contract.IsApprovedGovernanceContract(&_IGovernance.CallOpts, _contract)
}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_IGovernance *IGovernanceCaller) IsFunctionApproved(opts *bind.CallOpts, _func [4]byte) (bool, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "isFunctionApproved", _func)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_IGovernance *IGovernanceSession) IsFunctionApproved(_func [4]byte) (bool, error) {
	return _IGovernance.Contract.IsFunctionApproved(&_IGovernance.CallOpts, _func)
}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_IGovernance *IGovernanceCallerSession) IsFunctionApproved(_func [4]byte) (bool, error) {
	return _IGovernance.Contract.IsFunctionApproved(&_IGovernance.CallOpts, _func)
}

// TestMin is a free data retrieval call binding the contract method 0x1abe5974.
//
// Solidity: function testMin(uint256 a, uint256 b) pure returns(uint256)
func (_IGovernance *IGovernanceCaller) TestMin(opts *bind.CallOpts, a *big.Int, b *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "testMin", a, b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TestMin is a free data retrieval call binding the contract method 0x1abe5974.
//
// Solidity: function testMin(uint256 a, uint256 b) pure returns(uint256)
func (_IGovernance *IGovernanceSession) TestMin(a *big.Int, b *big.Int) (*big.Int, error) {
	return _IGovernance.Contract.TestMin(&_IGovernance.CallOpts, a, b)
}

// TestMin is a free data retrieval call binding the contract method 0x1abe5974.
//
// Solidity: function testMin(uint256 a, uint256 b) pure returns(uint256)
func (_IGovernance *IGovernanceCallerSession) TestMin(a *big.Int, b *big.Int) (*big.Int, error) {
	return _IGovernance.Contract.TestMin(&_IGovernance.CallOpts, a, b)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IGovernance *IGovernanceCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IGovernance.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IGovernance *IGovernanceSession) Verify() (*big.Int, error) {
	return _IGovernance.Contract.Verify(&_IGovernance.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IGovernance *IGovernanceCallerSession) Verify() (*big.Int, error) {
	return _IGovernance.Contract.Verify(&_IGovernance.CallOpts)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceTransactor) BeginDispute(opts *bind.TransactOpts, _queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "beginDispute", _queryId, _timestamp)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceSession) BeginDispute(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.BeginDispute(&_IGovernance.TransactOpts, _queryId, _timestamp)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceTransactorSession) BeginDispute(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.BeginDispute(&_IGovernance.TransactOpts, _queryId, _timestamp)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_IGovernance *IGovernanceTransactor) Delegate(opts *bind.TransactOpts, _delegate common.Address) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "delegate", _delegate)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_IGovernance *IGovernanceSession) Delegate(_delegate common.Address) (*types.Transaction, error) {
	return _IGovernance.Contract.Delegate(&_IGovernance.TransactOpts, _delegate)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_IGovernance *IGovernanceTransactorSession) Delegate(_delegate common.Address) (*types.Transaction, error) {
	return _IGovernance.Contract.Delegate(&_IGovernance.TransactOpts, _delegate)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceTransactor) ExecuteVote(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "executeVote", _disputeId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceSession) ExecuteVote(_disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.ExecuteVote(&_IGovernance.TransactOpts, _disputeId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceTransactorSession) ExecuteVote(_disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.ExecuteVote(&_IGovernance.TransactOpts, _disputeId)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceTransactor) ProposeVote(opts *bind.TransactOpts, _contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "proposeVote", _contract, _function, _data, _timestamp)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceSession) ProposeVote(_contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.ProposeVote(&_IGovernance.TransactOpts, _contract, _function, _data, _timestamp)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_IGovernance *IGovernanceTransactorSession) ProposeVote(_contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.ProposeVote(&_IGovernance.TransactOpts, _contract, _function, _data, _timestamp)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_IGovernance *IGovernanceTransactor) SetApprovedFunction(opts *bind.TransactOpts, _func [4]byte, _val bool) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "setApprovedFunction", _func, _val)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_IGovernance *IGovernanceSession) SetApprovedFunction(_func [4]byte, _val bool) (*types.Transaction, error) {
	return _IGovernance.Contract.SetApprovedFunction(&_IGovernance.TransactOpts, _func, _val)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_IGovernance *IGovernanceTransactorSession) SetApprovedFunction(_func [4]byte, _val bool) (*types.Transaction, error) {
	return _IGovernance.Contract.SetApprovedFunction(&_IGovernance.TransactOpts, _func, _val)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceTransactor) TallyVotes(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "tallyVotes", _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.TallyVotes(&_IGovernance.TransactOpts, _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IGovernance *IGovernanceTransactorSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IGovernance.Contract.TallyVotes(&_IGovernance.TransactOpts, _disputeId)
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_IGovernance *IGovernanceTransactor) UpdateMinDisputeFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "updateMinDisputeFee")
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_IGovernance *IGovernanceSession) UpdateMinDisputeFee() (*types.Transaction, error) {
	return _IGovernance.Contract.UpdateMinDisputeFee(&_IGovernance.TransactOpts)
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_IGovernance *IGovernanceTransactorSession) UpdateMinDisputeFee() (*types.Transaction, error) {
	return _IGovernance.Contract.UpdateMinDisputeFee(&_IGovernance.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceTransactor) Vote(opts *bind.TransactOpts, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "vote", _disputeId, _supports, _invalidQuery)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceSession) Vote(_disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.Contract.Vote(&_IGovernance.TransactOpts, _disputeId, _supports, _invalidQuery)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceTransactorSession) Vote(_disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.Contract.Vote(&_IGovernance.TransactOpts, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceTransactor) VoteFor(opts *bind.TransactOpts, _addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.contract.Transact(opts, "voteFor", _addys, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceSession) VoteFor(_addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.Contract.VoteFor(&_IGovernance.TransactOpts, _addys, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_IGovernance *IGovernanceTransactorSession) VoteFor(_addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _IGovernance.Contract.VoteFor(&_IGovernance.TransactOpts, _addys, _disputeId, _supports, _invalidQuery)
}

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"burnTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReportingLock\",\"type\":\"uint256\"}],\"name\":\"changeReportingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeBasedReward\",\"type\":\"uint256\"}],\"name\":\"changeTimeBasedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBlockNumberByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReportTimestampByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getReporterByTimestamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReporterLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReportsSubmittedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeOfLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTimestampCountById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTimestampIndexByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTipsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTipsByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValueByTimestamp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"removeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"submitValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"tipQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"df0a6eb7": "burnTips()",
		"5d183cfa": "changeReportingLock(uint256)",
		"6d53585f": "changeTimeBasedReward(uint256)",
		"935408d0": "getBlockNumberByTimestamp(bytes32,uint256)",
		"adf1639d": "getCurrentValue(bytes32)",
		"7c37b8b4": "getReportTimestampByIndex(bytes32,uint256)",
		"e07c5486": "getReporterByTimestamp(bytes32,uint256)",
		"50005b83": "getReporterLastTimestamp(address)",
		"3878293e": "getReportsSubmittedByAddress(address)",
		"c0f95d52": "getTimeOfLastNewValue()",
		"35e72432": "getTimestampCountById(bytes32)",
		"9d9b16ed": "getTimestampIndexByTimestamp(bytes32,uint256)",
		"ef4c262d": "getTipsById(bytes32)",
		"b736ec36": "getTipsByUser(address)",
		"0b2d2b0d": "getValueByTimestamp(bytes32,uint256)",
		"5b5edcfc": "removeValue(bytes32,uint256)",
		"3321fc41": "reportingLock()",
		"5eaa9ced": "submitValue(bytes32,bytes,uint256,bytes)",
		"ef0234ad": "tipQuery(bytes32,uint256,bytes)",
		"fc735e99": "verify()",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	IOracleCaller     // Read-only binding to the contract
	IOracleTransactor // Write-only binding to the contract
	IOracleFilterer   // Log filterer for contract events
}

// IOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOracleSession struct {
	Contract     *IOracle          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOracleCallerSession struct {
	Contract *IOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOracleTransactorSession struct {
	Contract     *IOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOracleRaw struct {
	Contract *IOracle // Generic contract binding to access the raw methods on
}

// IOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOracleCallerRaw struct {
	Contract *IOracleCaller // Generic read-only contract binding to access the raw methods on
}

// IOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOracleTransactorRaw struct {
	Contract *IOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOracle creates a new instance of IOracle, bound to a specific deployed contract.
func NewIOracle(address common.Address, backend bind.ContractBackend) (*IOracle, error) {
	contract, err := bindIOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOracle{IOracleCaller: IOracleCaller{contract: contract}, IOracleTransactor: IOracleTransactor{contract: contract}, IOracleFilterer: IOracleFilterer{contract: contract}}, nil
}

// NewIOracleCaller creates a new read-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleCaller(address common.Address, caller bind.ContractCaller) (*IOracleCaller, error) {
	contract, err := bindIOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleCaller{contract: contract}, nil
}

// NewIOracleTransactor creates a new write-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*IOracleTransactor, error) {
	contract, err := bindIOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleTransactor{contract: contract}, nil
}

// NewIOracleFilterer creates a new log filterer instance of IOracle, bound to a specific deployed contract.
func NewIOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*IOracleFilterer, error) {
	contract, err := bindIOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOracleFilterer{contract: contract}, nil
}

// bindIOracle binds a generic wrapper to an already deployed contract.
func bindIOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.IOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transact(opts, method, params...)
}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCaller) GetBlockNumberByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getBlockNumberByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleSession) GetBlockNumberByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetBlockNumberByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetBlockNumberByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetBlockNumberByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleCaller) GetCurrentValue(opts *bind.CallOpts, _queryId [32]byte) ([]byte, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getCurrentValue", _queryId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleSession) GetCurrentValue(_queryId [32]byte) ([]byte, error) {
	return _IOracle.Contract.GetCurrentValue(&_IOracle.CallOpts, _queryId)
}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleCallerSession) GetCurrentValue(_queryId [32]byte) ([]byte, error) {
	return _IOracle.Contract.GetCurrentValue(&_IOracle.CallOpts, _queryId)
}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleCaller) GetReportTimestampByIndex(opts *bind.CallOpts, _queryId [32]byte, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReportTimestampByIndex", _queryId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleSession) GetReportTimestampByIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetReportTimestampByIndex(&_IOracle.CallOpts, _queryId, _index)
}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReportTimestampByIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetReportTimestampByIndex(&_IOracle.CallOpts, _queryId, _index)
}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleCaller) GetReporterByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReporterByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleSession) GetReporterByTimestamp(_queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	return _IOracle.Contract.GetReporterByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleCallerSession) GetReporterByTimestamp(_queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	return _IOracle.Contract.GetReporterByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleCaller) GetReporterLastTimestamp(opts *bind.CallOpts, _reporter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReporterLastTimestamp", _reporter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleSession) GetReporterLastTimestamp(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReporterLastTimestamp(&_IOracle.CallOpts, _reporter)
}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReporterLastTimestamp(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReporterLastTimestamp(&_IOracle.CallOpts, _reporter)
}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleCaller) GetReportsSubmittedByAddress(opts *bind.CallOpts, _reporter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReportsSubmittedByAddress", _reporter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleSession) GetReportsSubmittedByAddress(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReportsSubmittedByAddress(&_IOracle.CallOpts, _reporter)
}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReportsSubmittedByAddress(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReportsSubmittedByAddress(&_IOracle.CallOpts, _reporter)
}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleCaller) GetTimeOfLastNewValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimeOfLastNewValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleSession) GetTimeOfLastNewValue() (*big.Int, error) {
	return _IOracle.Contract.GetTimeOfLastNewValue(&_IOracle.CallOpts)
}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimeOfLastNewValue() (*big.Int, error) {
	return _IOracle.Contract.GetTimeOfLastNewValue(&_IOracle.CallOpts)
}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCaller) GetTimestampCountById(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimestampCountById", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleSession) GetTimestampCountById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampCountById(&_IOracle.CallOpts, _queryId)
}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimestampCountById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampCountById(&_IOracle.CallOpts, _queryId)
}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCaller) GetTimestampIndexByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimestampIndexByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleSession) GetTimestampIndexByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampIndexByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimestampIndexByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampIndexByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCaller) GetTipsById(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTipsById", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleSession) GetTipsById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTipsById(&_IOracle.CallOpts, _queryId)
}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTipsById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTipsById(&_IOracle.CallOpts, _queryId)
}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleCaller) GetTipsByUser(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTipsByUser", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleSession) GetTipsByUser(_user common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetTipsByUser(&_IOracle.CallOpts, _user)
}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTipsByUser(_user common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetTipsByUser(&_IOracle.CallOpts, _user)
}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleCaller) GetValueByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getValueByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleSession) GetValueByTimestamp(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _IOracle.Contract.GetValueByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleCallerSession) GetValueByTimestamp(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _IOracle.Contract.GetValueByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleCaller) ReportingLock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "reportingLock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleSession) ReportingLock() (*big.Int, error) {
	return _IOracle.Contract.ReportingLock(&_IOracle.CallOpts)
}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleCallerSession) ReportingLock() (*big.Int, error) {
	return _IOracle.Contract.ReportingLock(&_IOracle.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleSession) Verify() (*big.Int, error) {
	return _IOracle.Contract.Verify(&_IOracle.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleCallerSession) Verify() (*big.Int, error) {
	return _IOracle.Contract.Verify(&_IOracle.CallOpts)
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleTransactor) BurnTips(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "burnTips")
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleSession) BurnTips() (*types.Transaction, error) {
	return _IOracle.Contract.BurnTips(&_IOracle.TransactOpts)
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleTransactorSession) BurnTips() (*types.Transaction, error) {
	return _IOracle.Contract.BurnTips(&_IOracle.TransactOpts)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleTransactor) ChangeReportingLock(opts *bind.TransactOpts, _newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "changeReportingLock", _newReportingLock)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleSession) ChangeReportingLock(_newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeReportingLock(&_IOracle.TransactOpts, _newReportingLock)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleTransactorSession) ChangeReportingLock(_newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeReportingLock(&_IOracle.TransactOpts, _newReportingLock)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleTransactor) ChangeTimeBasedReward(opts *bind.TransactOpts, _newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "changeTimeBasedReward", _newTimeBasedReward)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleSession) ChangeTimeBasedReward(_newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeTimeBasedReward(&_IOracle.TransactOpts, _newTimeBasedReward)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleTransactorSession) ChangeTimeBasedReward(_newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeTimeBasedReward(&_IOracle.TransactOpts, _newTimeBasedReward)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleTransactor) RemoveValue(opts *bind.TransactOpts, _queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "removeValue", _queryId, _timestamp)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleSession) RemoveValue(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.RemoveValue(&_IOracle.TransactOpts, _queryId, _timestamp)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleTransactorSession) RemoveValue(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.RemoveValue(&_IOracle.TransactOpts, _queryId, _timestamp)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleTransactor) SubmitValue(opts *bind.TransactOpts, _queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "submitValue", _queryId, _value, _nonce, _queryData)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleSession) SubmitValue(_queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.SubmitValue(&_IOracle.TransactOpts, _queryId, _value, _nonce, _queryData)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleTransactorSession) SubmitValue(_queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.SubmitValue(&_IOracle.TransactOpts, _queryId, _value, _nonce, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleTransactor) TipQuery(opts *bind.TransactOpts, _queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "tipQuery", _queryId, _tip, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleSession) TipQuery(_queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.TipQuery(&_IOracle.TransactOpts, _queryId, _tip, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleTransactorSession) TipQuery(_queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.TipQuery(&_IOracle.TransactOpts, _queryId, _tip, _queryData)
}

// TellorStakingMetaData contains all meta data concerning the TellorStaking contract.
var TellorStakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"NewStaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"StakeWithdrawRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"changeStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"slashReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"699f200f": "addresses(bytes32)",
		"dd62ed3e": "allowance(address,address)",
		"999cf26c": "allowedToTrade(address,uint256)",
		"095ea7b3": "approve(address,uint256)",
		"288c9c9d": "approveAndTransferFrom(address,address,uint256)",
		"70a08231": "balanceOf(address)",
		"4ee2cd7e": "balanceOfAt(address,uint256)",
		"cbf1304d": "balances(address,uint256)",
		"42966c68": "burn(uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"a1332c5c": "changeStakingStatus(address,uint256)",
		"1fd22364": "currentMiners(uint256)",
		"0d2d76a2": "depositStake()",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"733bdef0": "getStakerInfo(address)",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"28449c3a": "requestStakingWithdraw()",
		"4dfc2a34": "slashReporter(address,address)",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"b59e14d4": "uints(bytes32)",
		"bed9d861": "withdrawStake()",
	},
	Bin: "0x608060405234801561001057600080fd5b50611ac1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80635700242c116100f9578063a9059cbb11610097578063cbf1304d11610071578063cbf1304d1461044f578063d01f4d9e14610482578063db085beb146104a2578063dd62ed3e1461055b576101a9565b8063a9059cbb14610414578063b59e14d414610427578063bed9d86114610447576101a9565b806370a08231116100d357806370a0823114610395578063733bdef0146103a8578063999cf26c146103ee578063a1332c5c14610401576101a9565b80635700242c1461031457806362dd1d2a14610334578063699f200f14610354576101a9565b8063288c9c9d1161016657806348b18e541161014057806348b18e541461029d5780634ba0a5ee146102cb5780634dfc2a34146102ee5780634ee2cd7e14610301576101a9565b8063288c9c9d1461026457806342966c6814610277578063438c0aa31461028a576101a9565b8063024c2ddd146101ae578063095ea7b3146101ec5780630d2d76a21461020f5780631fd223641461021957806323b872dd1461024957806328449c3a1461025c575b600080fd5b6101d96101bc36600461183c565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101ff6101fa3660046118a9565b610594565b60405190151581526020016101e3565b610217610661565b005b61022c6102273660046118f2565b6108dc565b604080519283526001600160a01b039091166020830152016101e3565b6101ff61025736600461186e565b610907565b6102176109bd565b6101ff61027236600461186e565b610b3b565b6102176102853660046118f2565b610d2d565b6101d96102983660046118f2565b610d3a565b6101ff6102ab36600461190a565b603960209081526000928352604080842090915290825290205460ff1681565b6101ff6102d936600461181b565b604b6020526000908152604090205460ff1681565b6102176102fc36600461183c565b610d5b565b6101d961030f3660046118a9565b610f3a565b6101d96103223660046118f2565b60376020526000908152604090205481565b6101d96103423660046118f2565b60486020526000908152604090205481565b61037d6103623660046118f2565b6047602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101e3565b6101d96103a336600461181b565b6111a5565b6103d96103b636600461181b565b6001600160a01b0316600090815260446020526040902080546001909101549091565b604080519283526020830191909152016101e3565b6101ff6103fc3660046118a9565b6111b9565b61021761040f3660046118a9565b611267565b6101ff6104223660046118a9565b611394565b6101d96104353660046118f2565b60466020526000908152604090205481565b6102176113aa565b61046261045d3660046118a9565b6114a0565b604080516001600160801b039384168152929091166020830152016101e3565b6101d96104903660046118f2565b60386020526000908152604090205481565b61050c6104b03660046118f2565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e0820152610100016101e3565b6101d961056936600461183c565b6001600160a01b039182166000908152604a6020908152604080832093909416825291909152205490565b60006001600160a01b0383166105fc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b336000818152604a602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b600080516020611a6c83398151915254336000908152604960205260409020805461068e906001906119fe565b815481106106ac57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b031610156107215760405162461bcd60e51b815260206004820152602260248201527f42616c616e6365206973206c6f776572207468616e207374616b6520616d6f756044820152611b9d60f21b60648201526084016105f3565b33600090815260446020526040902054158061074c5750336000908152604460205260409020546002145b6107985760405162461bcd60e51b815260206004820152601e60248201527f5265706f7274657220697320696e207468652077726f6e67207374617465000060448201526064016105f3565b7f10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b600090815260466020527fa5ae3e2b97d73fb849ea855d27f073b72815b38452d976bd57e4a157827dadd38054600192906107f590849061199e565b9091555050604080518082018252600180825242602080840191825233600081815260448352869020945185559151939092019290925591519081527ffef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea910160405180910390a1600080516020611a4c83398151915260009081526047602052600080516020611a2c83398151915254604080516390e5b23560e01b815290516001600160a01b03909216926390e5b2359260048084019382900301818387803b1580156108c257600080fd5b505af11580156108d6573d6000803e3d6000fd5b50505050565b603a81600581106108ec57600080fd5b6002020180546001909101549091506001600160a01b031682565b6001600160a01b0383166000908152604a6020908152604080832033845290915281205482111561096f5760405162461bcd60e51b8152602060048201526012602482015271416c6c6f77616e63652069732077726f6e6760701b60448201526064016105f3565b6001600160a01b0384166000908152604a60209081526040808320338452909152812080548492906109a29084906119fe565b909155506109b390508484846114e3565b5060019392505050565b3360009081526044602052604090208054600114610a165760405162461bcd60e51b815260206004820152601660248201527514995c1bdc9d195c881a5cc81b9bdd081cdd185ad95960521b60448201526064016105f3565b60028155426001808301919091557f10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b600090815260466020527fa5ae3e2b97d73fb849ea855d27f073b72815b38452d976bd57e4a157827dadd38054909190610a809084906119fe565b9091555050600080516020611a4c83398151915260009081526047602052600080516020611a2c83398151915254604080516390e5b23560e01b815290516001600160a01b03909216926390e5b2359260048084019382900301818387803b158015610aeb57600080fd5b505af1158015610aff573d6000803e3d6000fd5b50506040513381527f453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf925060200190505b60405180910390a150565b600080516020611a4c83398151915260009081526047602052600080516020611a2c83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b158015610ba457600080fd5b505afa158015610bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdc91906118d2565b80610c3957507f1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa60005260476020527fdff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d546001600160a01b031633145b80610c9657507ffa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e60005260476020527fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b5546001600160a01b031633145b610d225760405162461bcd60e51b815260206004820152605160248201527f4f6e6c792074686520476f7665726e616e63652c2054726561737572792c206f60448201527f72204f7261636c6520436f6e74726163742063616e20617070726f766520616e60648201527064207472616e7366657220746f6b656e7360781b608482015260a4016105f3565b6109b38484846114e3565b610d37338261163c565b50565b60338181548110610d4a57600080fd5b600091825260209091200154905081565b600080516020611a4c8339815191526000526047602052600080516020611a2c83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b158015610dc257600080fd5b505afa158015610dd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfa91906118d2565b610e635760405162461bcd60e51b815260206004820152603460248201527f4f6e6c7920617070726f76656420676f7665726e616e636520636f6e747261636044820152733a1031b0b71039b630b9b4103932b837b93a32b960611b60648201526084016105f3565b6001600160a01b03821660009081526044602090815260408220600590557f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc9790915260469052600080516020611a6c83398151915254610ec2836111a5565b10610f12577f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc976000526046602052600080516020611a6c83398151915254610f0d90839083906114e3565b610f36565b6000610f1d836111a5565b1115610f3657610f368282610f31856111a5565b6114e3565b5050565b6001600160a01b038216600090815260496020526040812080541580610f9457508281600081548110610f7d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b0316115b15610fa357600091505061065b565b80548190610fb3906001906119fe565b81548110610fd157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b0316831061103f5780548190610ffc906001906119fe565b8154811061101a57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b0316915061065b9050565b80546000908190611052906002906119fe565b90505b8181111561115e576000600261106b848461199e565b61107690600161199e565b61108091906119b6565b9050858482815481106110a357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03161415611106578381815481106110de57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b0316945061065b9350505050565b8584828154811061112757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b0316101561114a57809250611158565b6111556001826119fe565b91505b50611055565b82828154811061117e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b0316935061065b92505050565b60006111b18243610f3a565b90505b919050565b6001600160a01b038216600090815260446020526040812054158015906111f857506001600160a01b0383166000908152604460205260409020546005115b15611254577f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc976000526046602052600080516020611a6c833981519152548290611241856111a5565b61124b91906119fe565b1015905061065b565b8161125e846111a5565b10159392505050565b600080516020611a4c8339815191526000526047602052600080516020611a2c83398151915254604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b1580156112ce57600080fd5b505afa1580156112e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130691906118d2565b6113785760405162461bcd60e51b815260206004820152603b60248201527f4f6e6c7920617070726f76656420676f7665726e616e636520636f6e7472616360448201527f742063616e206368616e6765207374616b696e6720737461747573000000000060648201526084016105f3565b6001600160a01b03909116600090815260446020526040902055565b60006113a13384846114e3565b50600192915050565b336000908152604460205260409020600181015462093a80906113cd90426119fe565b10156114105760405162461bcd60e51b8152602060048201526012602482015271372064617973206469646e2774207061737360701b60448201526064016105f3565b805460021461146c5760405162461bcd60e51b815260206004820152602260248201527f5265706f72746572206e6f74206c6f636b656420666f72207769746864726177604482015261185b60f21b60648201526084016105f3565b600081556040513381527f4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec90602001610b30565b604960205281600052604060002081815481106114bc57600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b8061153a5760405162461bcd60e51b815260206004820152602160248201527f547269656420746f2073656e64206e6f6e2d706f73697469766520616d6f756e6044820152601d60fa1b60648201526084016105f3565b6001600160a01b0382166115885760405162461bcd60e51b815260206004820152601560248201527452656365697665722069732030206164647265737360581b60448201526064016105f3565b61159283826111b9565b6115ae5760405162461bcd60e51b81526004016105f39061192c565b60006115b9846111a5565b9050816115cf856115ca83856119d6565b6116ef565b6115d8846111a5565b91506115e8846115ca8385611973565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161162d91815260200190565b60405180910390a35050505050565b8061164657610f36565b61165082826111b9565b61166c5760405162461bcd60e51b81526004016105f39061192c565b6000611677836111a5565b905081611688846115ca83856119d6565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160600090815260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e80548592906116e49084906119fe565b909155505050505050565b6001600160a01b0382166000908152604960205260409020805415806117585750805443908290611722906001906119fe565b8154811061174057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b031614155b156117a957604080518082019091526001600160801b03438116825283811660208084019182528454600181018655600086815291909120935191518316600160801b0291909216179101556117ff565b805460009082906117bc906001906119fe565b815481106117da57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160801b03808616600160801b029116179055505b505050565b80356001600160a01b03811681146111b457600080fd5b60006020828403121561182c578081fd5b61183582611804565b9392505050565b6000806040838503121561184e578081fd5b61185783611804565b915061186560208401611804565b90509250929050565b600080600060608486031215611882578081fd5b61188b84611804565b925061189960208501611804565b9150604084013590509250925092565b600080604083850312156118bb578182fd5b6118c483611804565b946020939093013593505050565b6000602082840312156118e3578081fd5b81518015158114611835578182fd5b600060208284031215611903578081fd5b5035919050565b6000806040838503121561191c578182fd5b8235915061186560208401611804565b60208082526027908201527f53686f756c6420686176652073756666696369656e742062616c616e636520746040820152666f20747261646560c81b606082015260800190565b60006001600160801b0380831681851680830382111561199557611995611a15565b01949350505050565b600082198211156119b1576119b1611a15565b500190565b6000826119d157634e487b7160e01b81526012600452602481fd5b500490565b60006001600160801b03838116908316818110156119f6576119f6611a15565b039392505050565b600082821015611a1057611a10611a15565b500390565b634e487b7160e01b600052601160045260246000fdfe7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22defa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd93167af83a0768d27540775cfef6d996eb63f8a61fcdfb26e654c18fb50960e3bea264697066735822122084f0ed7d2b83ed2d60caf4f21ab7e81769ad1c859184bc2b21fec1307aeac11e64736f6c63430008030033",
}

// TellorStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorStakingMetaData.ABI instead.
var TellorStakingABI = TellorStakingMetaData.ABI

// Deprecated: Use TellorStakingMetaData.Sigs instead.
// TellorStakingFuncSigs maps the 4-byte function signature to its string representation.
var TellorStakingFuncSigs = TellorStakingMetaData.Sigs

// TellorStakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorStakingMetaData.Bin instead.
var TellorStakingBin = TellorStakingMetaData.Bin

// DeployTellorStaking deploys a new Ethereum contract, binding an instance of TellorStaking to it.
func DeployTellorStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorStaking, error) {
	parsed, err := TellorStakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorStakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorStaking{TellorStakingCaller: TellorStakingCaller{contract: contract}, TellorStakingTransactor: TellorStakingTransactor{contract: contract}, TellorStakingFilterer: TellorStakingFilterer{contract: contract}}, nil
}

// TellorStaking is an auto generated Go binding around an Ethereum contract.
type TellorStaking struct {
	TellorStakingCaller     // Read-only binding to the contract
	TellorStakingTransactor // Write-only binding to the contract
	TellorStakingFilterer   // Log filterer for contract events
}

// TellorStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorStakingSession struct {
	Contract     *TellorStaking    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorStakingCallerSession struct {
	Contract *TellorStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TellorStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorStakingTransactorSession struct {
	Contract     *TellorStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TellorStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorStakingRaw struct {
	Contract *TellorStaking // Generic contract binding to access the raw methods on
}

// TellorStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorStakingCallerRaw struct {
	Contract *TellorStakingCaller // Generic read-only contract binding to access the raw methods on
}

// TellorStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorStakingTransactorRaw struct {
	Contract *TellorStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorStaking creates a new instance of TellorStaking, bound to a specific deployed contract.
func NewTellorStaking(address common.Address, backend bind.ContractBackend) (*TellorStaking, error) {
	contract, err := bindTellorStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorStaking{TellorStakingCaller: TellorStakingCaller{contract: contract}, TellorStakingTransactor: TellorStakingTransactor{contract: contract}, TellorStakingFilterer: TellorStakingFilterer{contract: contract}}, nil
}

// NewTellorStakingCaller creates a new read-only instance of TellorStaking, bound to a specific deployed contract.
func NewTellorStakingCaller(address common.Address, caller bind.ContractCaller) (*TellorStakingCaller, error) {
	contract, err := bindTellorStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorStakingCaller{contract: contract}, nil
}

// NewTellorStakingTransactor creates a new write-only instance of TellorStaking, bound to a specific deployed contract.
func NewTellorStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorStakingTransactor, error) {
	contract, err := bindTellorStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorStakingTransactor{contract: contract}, nil
}

// NewTellorStakingFilterer creates a new log filterer instance of TellorStaking, bound to a specific deployed contract.
func NewTellorStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorStakingFilterer, error) {
	contract, err := bindTellorStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorStakingFilterer{contract: contract}, nil
}

// bindTellorStaking binds a generic wrapper to an already deployed contract.
func bindTellorStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorStakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorStaking *TellorStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorStaking.Contract.TellorStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorStaking *TellorStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStaking.Contract.TellorStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorStaking *TellorStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorStaking.Contract.TellorStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorStaking *TellorStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorStaking *TellorStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorStaking *TellorStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorStaking.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStaking *TellorStakingSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.Allowances(&_TellorStaking.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.Allowances(&_TellorStaking.CallOpts, arg0, arg1)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStaking *TellorStakingCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStaking *TellorStakingSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _TellorStaking.Contract.Addresses(&_TellorStaking.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStaking *TellorStakingCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _TellorStaking.Contract.Addresses(&_TellorStaking.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) Allowance(opts *bind.CallOpts, _user common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "allowance", _user, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_TellorStaking *TellorStakingSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.Allowance(&_TellorStaking.CallOpts, _user, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.Allowance(&_TellorStaking.CallOpts, _user, _spender)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_TellorStaking *TellorStakingCaller) AllowedToTrade(opts *bind.CallOpts, _user common.Address, _amount *big.Int) (bool, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "allowedToTrade", _user, _amount)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_TellorStaking *TellorStakingSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _TellorStaking.Contract.AllowedToTrade(&_TellorStaking.CallOpts, _user, _amount)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_TellorStaking *TellorStakingCallerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _TellorStaking.Contract.AllowedToTrade(&_TellorStaking.CallOpts, _user, _amount)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) BalanceOf(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "balanceOf", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_TellorStaking *TellorStakingSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.BalanceOf(&_TellorStaking.CallOpts, _user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _TellorStaking.Contract.BalanceOf(&_TellorStaking.CallOpts, _user)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) BalanceOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "balanceOfAt", _user, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_TellorStaking *TellorStakingSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _TellorStaking.Contract.BalanceOfAt(&_TellorStaking.CallOpts, _user, _blockNumber)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _TellorStaking.Contract.BalanceOfAt(&_TellorStaking.CallOpts, _user, _blockNumber)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStaking *TellorStakingCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStaking *TellorStakingSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _TellorStaking.Contract.Balances(&_TellorStaking.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStaking *TellorStakingCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _TellorStaking.Contract.Balances(&_TellorStaking.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStaking *TellorStakingCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStaking *TellorStakingSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _TellorStaking.Contract.BytesVars(&_TellorStaking.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStaking *TellorStakingCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _TellorStaking.Contract.BytesVars(&_TellorStaking.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStaking *TellorStakingCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStaking *TellorStakingSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _TellorStaking.Contract.CurrentMiners(&_TellorStaking.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStaking *TellorStakingCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _TellorStaking.Contract.CurrentMiners(&_TellorStaking.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.DisputeIdByDisputeHash(&_TellorStaking.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.DisputeIdByDisputeHash(&_TellorStaking.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStaking *TellorStakingCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStaking *TellorStakingSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _TellorStaking.Contract.DisputesById(&_TellorStaking.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStaking *TellorStakingCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _TellorStaking.Contract.DisputesById(&_TellorStaking.CallOpts, arg0)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_TellorStaking *TellorStakingCaller) GetStakerInfo(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "getStakerInfo", _staker)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_TellorStaking *TellorStakingSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _TellorStaking.Contract.GetStakerInfo(&_TellorStaking.CallOpts, _staker)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_TellorStaking *TellorStakingCallerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _TellorStaking.Contract.GetStakerInfo(&_TellorStaking.CallOpts, _staker)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStaking *TellorStakingCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStaking *TellorStakingSession) Migrated(arg0 common.Address) (bool, error) {
	return _TellorStaking.Contract.Migrated(&_TellorStaking.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStaking *TellorStakingCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _TellorStaking.Contract.Migrated(&_TellorStaking.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStaking *TellorStakingCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStaking *TellorStakingSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _TellorStaking.Contract.MinersByChallenge(&_TellorStaking.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStaking *TellorStakingCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _TellorStaking.Contract.MinersByChallenge(&_TellorStaking.CallOpts, arg0, arg1)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStaking *TellorStakingSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _TellorStaking.Contract.NewValueTimestamps(&_TellorStaking.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _TellorStaking.Contract.NewValueTimestamps(&_TellorStaking.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.RequestIdByQueryHash(&_TellorStaking.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.RequestIdByQueryHash(&_TellorStaking.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStaking.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.Uints(&_TellorStaking.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStaking *TellorStakingCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _TellorStaking.Contract.Uints(&_TellorStaking.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Approve(&_TellorStaking.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Approve(&_TellorStaking.TransactOpts, _spender, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingTransactor) ApproveAndTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "approveAndTransferFrom", _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.ApproveAndTransferFrom(&_TellorStaking.TransactOpts, _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_TellorStaking *TellorStakingTransactorSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.ApproveAndTransferFrom(&_TellorStaking.TransactOpts, _from, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_TellorStaking *TellorStakingTransactor) Burn(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "burn", _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_TellorStaking *TellorStakingSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Burn(&_TellorStaking.TransactOpts, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_TellorStaking *TellorStakingTransactorSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Burn(&_TellorStaking.TransactOpts, _amount)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_TellorStaking *TellorStakingTransactor) ChangeStakingStatus(opts *bind.TransactOpts, _reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "changeStakingStatus", _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_TellorStaking *TellorStakingSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.ChangeStakingStatus(&_TellorStaking.TransactOpts, _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_TellorStaking *TellorStakingTransactorSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.ChangeStakingStatus(&_TellorStaking.TransactOpts, _reporter, _status)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_TellorStaking *TellorStakingTransactor) DepositStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "depositStake")
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_TellorStaking *TellorStakingSession) DepositStake() (*types.Transaction, error) {
	return _TellorStaking.Contract.DepositStake(&_TellorStaking.TransactOpts)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_TellorStaking *TellorStakingTransactorSession) DepositStake() (*types.Transaction, error) {
	return _TellorStaking.Contract.DepositStake(&_TellorStaking.TransactOpts)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_TellorStaking *TellorStakingTransactor) RequestStakingWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "requestStakingWithdraw")
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_TellorStaking *TellorStakingSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _TellorStaking.Contract.RequestStakingWithdraw(&_TellorStaking.TransactOpts)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_TellorStaking *TellorStakingTransactorSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _TellorStaking.Contract.RequestStakingWithdraw(&_TellorStaking.TransactOpts)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_TellorStaking *TellorStakingTransactor) SlashReporter(opts *bind.TransactOpts, _reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "slashReporter", _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_TellorStaking *TellorStakingSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _TellorStaking.Contract.SlashReporter(&_TellorStaking.TransactOpts, _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_TellorStaking *TellorStakingTransactorSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _TellorStaking.Contract.SlashReporter(&_TellorStaking.TransactOpts, _reporter, _disputer)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Transfer(&_TellorStaking.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.Transfer(&_TellorStaking.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "transferFrom", _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.TransferFrom(&_TellorStaking.TransactOpts, _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_TellorStaking *TellorStakingTransactorSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _TellorStaking.Contract.TransferFrom(&_TellorStaking.TransactOpts, _from, _to, _amount)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_TellorStaking *TellorStakingTransactor) WithdrawStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStaking.contract.Transact(opts, "withdrawStake")
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_TellorStaking *TellorStakingSession) WithdrawStake() (*types.Transaction, error) {
	return _TellorStaking.Contract.WithdrawStake(&_TellorStaking.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_TellorStaking *TellorStakingTransactorSession) WithdrawStake() (*types.Transaction, error) {
	return _TellorStaking.Contract.WithdrawStake(&_TellorStaking.TransactOpts)
}

// TellorStakingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TellorStaking contract.
type TellorStakingApprovalIterator struct {
	Event *TellorStakingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TellorStakingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TellorStakingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TellorStakingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TellorStakingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TellorStakingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TellorStakingApproval represents a Approval event raised by the TellorStaking contract.
type TellorStakingApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _spender []common.Address) (*TellorStakingApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _TellorStaking.contract.FilterLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return &TellorStakingApprovalIterator{contract: _TellorStaking.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TellorStakingApproval, _owner []common.Address, _spender []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _TellorStaking.contract.WatchLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TellorStakingApproval)
				if err := _TellorStaking.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) ParseApproval(log types.Log) (*TellorStakingApproval, error) {
	event := new(TellorStakingApproval)
	if err := _TellorStaking.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TellorStakingNewStakerIterator is returned from FilterNewStaker and is used to iterate over the raw logs and unpacked data for NewStaker events raised by the TellorStaking contract.
type TellorStakingNewStakerIterator struct {
	Event *TellorStakingNewStaker // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TellorStakingNewStakerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TellorStakingNewStaker)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TellorStakingNewStaker)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TellorStakingNewStakerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TellorStakingNewStakerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TellorStakingNewStaker represents a NewStaker event raised by the TellorStaking contract.
type TellorStakingNewStaker struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewStaker is a free log retrieval operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_TellorStaking *TellorStakingFilterer) FilterNewStaker(opts *bind.FilterOpts) (*TellorStakingNewStakerIterator, error) {

	logs, sub, err := _TellorStaking.contract.FilterLogs(opts, "NewStaker")
	if err != nil {
		return nil, err
	}
	return &TellorStakingNewStakerIterator{contract: _TellorStaking.contract, event: "NewStaker", logs: logs, sub: sub}, nil
}

// WatchNewStaker is a free log subscription operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_TellorStaking *TellorStakingFilterer) WatchNewStaker(opts *bind.WatchOpts, sink chan<- *TellorStakingNewStaker) (event.Subscription, error) {

	logs, sub, err := _TellorStaking.contract.WatchLogs(opts, "NewStaker")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TellorStakingNewStaker)
				if err := _TellorStaking.contract.UnpackLog(event, "NewStaker", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStaker is a log parse operation binding the contract event 0xfef374abf45e2e3ec7bf325aef6e240bfbc166fd230c511d058f061af7106aea.
//
// Solidity: event NewStaker(address _staker)
func (_TellorStaking *TellorStakingFilterer) ParseNewStaker(log types.Log) (*TellorStakingNewStaker, error) {
	event := new(TellorStakingNewStaker)
	if err := _TellorStaking.contract.UnpackLog(event, "NewStaker", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TellorStakingStakeWithdrawRequestedIterator is returned from FilterStakeWithdrawRequested and is used to iterate over the raw logs and unpacked data for StakeWithdrawRequested events raised by the TellorStaking contract.
type TellorStakingStakeWithdrawRequestedIterator struct {
	Event *TellorStakingStakeWithdrawRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TellorStakingStakeWithdrawRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TellorStakingStakeWithdrawRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TellorStakingStakeWithdrawRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TellorStakingStakeWithdrawRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TellorStakingStakeWithdrawRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TellorStakingStakeWithdrawRequested represents a StakeWithdrawRequested event raised by the TellorStaking contract.
type TellorStakingStakeWithdrawRequested struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakeWithdrawRequested is a free log retrieval operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_TellorStaking *TellorStakingFilterer) FilterStakeWithdrawRequested(opts *bind.FilterOpts) (*TellorStakingStakeWithdrawRequestedIterator, error) {

	logs, sub, err := _TellorStaking.contract.FilterLogs(opts, "StakeWithdrawRequested")
	if err != nil {
		return nil, err
	}
	return &TellorStakingStakeWithdrawRequestedIterator{contract: _TellorStaking.contract, event: "StakeWithdrawRequested", logs: logs, sub: sub}, nil
}

// WatchStakeWithdrawRequested is a free log subscription operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_TellorStaking *TellorStakingFilterer) WatchStakeWithdrawRequested(opts *bind.WatchOpts, sink chan<- *TellorStakingStakeWithdrawRequested) (event.Subscription, error) {

	logs, sub, err := _TellorStaking.contract.WatchLogs(opts, "StakeWithdrawRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TellorStakingStakeWithdrawRequested)
				if err := _TellorStaking.contract.UnpackLog(event, "StakeWithdrawRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeWithdrawRequested is a log parse operation binding the contract event 0x453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf.
//
// Solidity: event StakeWithdrawRequested(address _staker)
func (_TellorStaking *TellorStakingFilterer) ParseStakeWithdrawRequested(log types.Log) (*TellorStakingStakeWithdrawRequested, error) {
	event := new(TellorStakingStakeWithdrawRequested)
	if err := _TellorStaking.contract.UnpackLog(event, "StakeWithdrawRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TellorStakingStakeWithdrawnIterator is returned from FilterStakeWithdrawn and is used to iterate over the raw logs and unpacked data for StakeWithdrawn events raised by the TellorStaking contract.
type TellorStakingStakeWithdrawnIterator struct {
	Event *TellorStakingStakeWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TellorStakingStakeWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TellorStakingStakeWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TellorStakingStakeWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TellorStakingStakeWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TellorStakingStakeWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TellorStakingStakeWithdrawn represents a StakeWithdrawn event raised by the TellorStaking contract.
type TellorStakingStakeWithdrawn struct {
	Staker common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterStakeWithdrawn is a free log retrieval operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_TellorStaking *TellorStakingFilterer) FilterStakeWithdrawn(opts *bind.FilterOpts) (*TellorStakingStakeWithdrawnIterator, error) {

	logs, sub, err := _TellorStaking.contract.FilterLogs(opts, "StakeWithdrawn")
	if err != nil {
		return nil, err
	}
	return &TellorStakingStakeWithdrawnIterator{contract: _TellorStaking.contract, event: "StakeWithdrawn", logs: logs, sub: sub}, nil
}

// WatchStakeWithdrawn is a free log subscription operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_TellorStaking *TellorStakingFilterer) WatchStakeWithdrawn(opts *bind.WatchOpts, sink chan<- *TellorStakingStakeWithdrawn) (event.Subscription, error) {

	logs, sub, err := _TellorStaking.contract.WatchLogs(opts, "StakeWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TellorStakingStakeWithdrawn)
				if err := _TellorStaking.contract.UnpackLog(event, "StakeWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeWithdrawn is a log parse operation binding the contract event 0x4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec.
//
// Solidity: event StakeWithdrawn(address _staker)
func (_TellorStaking *TellorStakingFilterer) ParseStakeWithdrawn(log types.Log) (*TellorStakingStakeWithdrawn, error) {
	event := new(TellorStakingStakeWithdrawn)
	if err := _TellorStaking.contract.UnpackLog(event, "StakeWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TellorStakingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TellorStaking contract.
type TellorStakingTransferIterator struct {
	Event *TellorStakingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TellorStakingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TellorStakingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TellorStakingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TellorStakingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TellorStakingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TellorStakingTransfer represents a Transfer event raised by the TellorStaking contract.
type TellorStakingTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address) (*TellorStakingTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _TellorStaking.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &TellorStakingTransferIterator{contract: _TellorStaking.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TellorStakingTransfer, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _TellorStaking.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TellorStakingTransfer)
				if err := _TellorStaking.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_TellorStaking *TellorStakingFilterer) ParseTransfer(log types.Log) (*TellorStakingTransfer, error) {
	event := new(TellorStakingTransfer)
	if err := _TellorStaking.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TellorStorageMetaData contains all meta data concerning the TellorStorage contract.
var TellorStorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"699f200f": "addresses(bytes32)",
		"cbf1304d": "balances(address,uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"1fd22364": "currentMiners(uint256)",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"b59e14d4": "uints(bytes32)",
	},
	Bin: "0x608060405234801561001057600080fd5b506104df806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806362dd1d2a1161007157806362dd1d2a146101bb578063699f200f146101db578063b59e14d41461021c578063cbf1304d1461023c578063d01f4d9e1461026f578063db085beb1461028f576100b4565b8063024c2ddd146100b95780631fd22364146100f7578063438c0aa31461012757806348b18e541461013a5780634ba0a5ee146101785780635700242c1461019b575b600080fd5b6100e46100c7366004610414565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61010a61010536600461046f565b610348565b604080519283526001600160a01b039091166020830152016100ee565b6100e461013536600461046f565b610373565b610168610148366004610487565b603960209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ee565b6101686101863660046103f3565b604b6020526000908152604090205460ff1681565b6100e46101a936600461046f565b60376020526000908152604090205481565b6100e46101c936600461046f565b60486020526000908152604090205481565b6102046101e936600461046f565b6047602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100ee565b6100e461022a36600461046f565b60466020526000908152604090205481565b61024f61024a366004610446565b610394565b604080516001600160801b039384168152929091166020830152016100ee565b6100e461027d36600461046f565b60386020526000908152604090205481565b6102f961029d36600461046f565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e0820152610100016100ee565b603a816005811061035857600080fd5b6002020180546001909101549091506001600160a01b031682565b6033818154811061038357600080fd5b600091825260209091200154905081565b604960205281600052604060002081815481106103b057600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b80356001600160a01b03811681146103ee57600080fd5b919050565b600060208284031215610404578081fd5b61040d826103d7565b9392505050565b60008060408385031215610426578081fd5b61042f836103d7565b915061043d602084016103d7565b90509250929050565b60008060408385031215610458578182fd5b610461836103d7565b946020939093013593505050565b600060208284031215610480578081fd5b5035919050565b60008060408385031215610499578182fd5b8235915061043d602084016103d756fea264697066735822122010642acc387fde1afb2df1799c9990335a0b0ad3e4b397739aefdd39c7fc4d0664736f6c63430008030033",
}

// TellorStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorStorageMetaData.ABI instead.
var TellorStorageABI = TellorStorageMetaData.ABI

// Deprecated: Use TellorStorageMetaData.Sigs instead.
// TellorStorageFuncSigs maps the 4-byte function signature to its string representation.
var TellorStorageFuncSigs = TellorStorageMetaData.Sigs

// TellorStorageBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorStorageMetaData.Bin instead.
var TellorStorageBin = TellorStorageMetaData.Bin

// DeployTellorStorage deploys a new Ethereum contract, binding an instance of TellorStorage to it.
func DeployTellorStorage(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorStorage, error) {
	parsed, err := TellorStorageMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorStorageBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorStorage{TellorStorageCaller: TellorStorageCaller{contract: contract}, TellorStorageTransactor: TellorStorageTransactor{contract: contract}, TellorStorageFilterer: TellorStorageFilterer{contract: contract}}, nil
}

// TellorStorage is an auto generated Go binding around an Ethereum contract.
type TellorStorage struct {
	TellorStorageCaller     // Read-only binding to the contract
	TellorStorageTransactor // Write-only binding to the contract
	TellorStorageFilterer   // Log filterer for contract events
}

// TellorStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorStorageSession struct {
	Contract     *TellorStorage    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorStorageCallerSession struct {
	Contract *TellorStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// TellorStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorStorageTransactorSession struct {
	Contract     *TellorStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// TellorStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorStorageRaw struct {
	Contract *TellorStorage // Generic contract binding to access the raw methods on
}

// TellorStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorStorageCallerRaw struct {
	Contract *TellorStorageCaller // Generic read-only contract binding to access the raw methods on
}

// TellorStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorStorageTransactorRaw struct {
	Contract *TellorStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorStorage creates a new instance of TellorStorage, bound to a specific deployed contract.
func NewTellorStorage(address common.Address, backend bind.ContractBackend) (*TellorStorage, error) {
	contract, err := bindTellorStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorStorage{TellorStorageCaller: TellorStorageCaller{contract: contract}, TellorStorageTransactor: TellorStorageTransactor{contract: contract}, TellorStorageFilterer: TellorStorageFilterer{contract: contract}}, nil
}

// NewTellorStorageCaller creates a new read-only instance of TellorStorage, bound to a specific deployed contract.
func NewTellorStorageCaller(address common.Address, caller bind.ContractCaller) (*TellorStorageCaller, error) {
	contract, err := bindTellorStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorStorageCaller{contract: contract}, nil
}

// NewTellorStorageTransactor creates a new write-only instance of TellorStorage, bound to a specific deployed contract.
func NewTellorStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorStorageTransactor, error) {
	contract, err := bindTellorStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorStorageTransactor{contract: contract}, nil
}

// NewTellorStorageFilterer creates a new log filterer instance of TellorStorage, bound to a specific deployed contract.
func NewTellorStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorStorageFilterer, error) {
	contract, err := bindTellorStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorStorageFilterer{contract: contract}, nil
}

// bindTellorStorage binds a generic wrapper to an already deployed contract.
func bindTellorStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorStorageABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorStorage *TellorStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorStorage.Contract.TellorStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorStorage *TellorStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStorage.Contract.TellorStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorStorage *TellorStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorStorage.Contract.TellorStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorStorage *TellorStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorStorage *TellorStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorStorage *TellorStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorStorage.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStorage *TellorStorageCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStorage *TellorStorageSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TellorStorage.Contract.Allowances(&_TellorStorage.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_TellorStorage *TellorStorageCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TellorStorage.Contract.Allowances(&_TellorStorage.CallOpts, arg0, arg1)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStorage *TellorStorageCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStorage *TellorStorageSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _TellorStorage.Contract.Addresses(&_TellorStorage.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_TellorStorage *TellorStorageCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _TellorStorage.Contract.Addresses(&_TellorStorage.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStorage *TellorStorageCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStorage *TellorStorageSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _TellorStorage.Contract.Balances(&_TellorStorage.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_TellorStorage *TellorStorageCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _TellorStorage.Contract.Balances(&_TellorStorage.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStorage *TellorStorageCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStorage *TellorStorageSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _TellorStorage.Contract.BytesVars(&_TellorStorage.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_TellorStorage *TellorStorageCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _TellorStorage.Contract.BytesVars(&_TellorStorage.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStorage *TellorStorageCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStorage *TellorStorageSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _TellorStorage.Contract.CurrentMiners(&_TellorStorage.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_TellorStorage *TellorStorageCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _TellorStorage.Contract.CurrentMiners(&_TellorStorage.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.DisputeIdByDisputeHash(&_TellorStorage.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.DisputeIdByDisputeHash(&_TellorStorage.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStorage *TellorStorageCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStorage *TellorStorageSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _TellorStorage.Contract.DisputesById(&_TellorStorage.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_TellorStorage *TellorStorageCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _TellorStorage.Contract.DisputesById(&_TellorStorage.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStorage *TellorStorageCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStorage *TellorStorageSession) Migrated(arg0 common.Address) (bool, error) {
	return _TellorStorage.Contract.Migrated(&_TellorStorage.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_TellorStorage *TellorStorageCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _TellorStorage.Contract.Migrated(&_TellorStorage.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStorage *TellorStorageCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStorage *TellorStorageSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _TellorStorage.Contract.MinersByChallenge(&_TellorStorage.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_TellorStorage *TellorStorageCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _TellorStorage.Contract.MinersByChallenge(&_TellorStorage.CallOpts, arg0, arg1)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStorage *TellorStorageCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStorage *TellorStorageSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _TellorStorage.Contract.NewValueTimestamps(&_TellorStorage.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_TellorStorage *TellorStorageCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _TellorStorage.Contract.NewValueTimestamps(&_TellorStorage.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.RequestIdByQueryHash(&_TellorStorage.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.RequestIdByQueryHash(&_TellorStorage.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TellorStorage.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.Uints(&_TellorStorage.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_TellorStorage *TellorStorageCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _TellorStorage.Contract.Uints(&_TellorStorage.CallOpts, arg0)
}

// TellorVariablesMetaData contains all meta data concerning the TellorVariables contract.
var TellorVariablesMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200c1be9388d36d72db350f5347634b9342b23df1e595bd2e79be825c9cdd30ea364736f6c63430008030033",
}

// TellorVariablesABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorVariablesMetaData.ABI instead.
var TellorVariablesABI = TellorVariablesMetaData.ABI

// TellorVariablesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorVariablesMetaData.Bin instead.
var TellorVariablesBin = TellorVariablesMetaData.Bin

// DeployTellorVariables deploys a new Ethereum contract, binding an instance of TellorVariables to it.
func DeployTellorVariables(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorVariables, error) {
	parsed, err := TellorVariablesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorVariablesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorVariables{TellorVariablesCaller: TellorVariablesCaller{contract: contract}, TellorVariablesTransactor: TellorVariablesTransactor{contract: contract}, TellorVariablesFilterer: TellorVariablesFilterer{contract: contract}}, nil
}

// TellorVariables is an auto generated Go binding around an Ethereum contract.
type TellorVariables struct {
	TellorVariablesCaller     // Read-only binding to the contract
	TellorVariablesTransactor // Write-only binding to the contract
	TellorVariablesFilterer   // Log filterer for contract events
}

// TellorVariablesCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorVariablesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorVariablesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorVariablesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorVariablesSession struct {
	Contract     *TellorVariables  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorVariablesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorVariablesCallerSession struct {
	Contract *TellorVariablesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TellorVariablesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorVariablesTransactorSession struct {
	Contract     *TellorVariablesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TellorVariablesRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorVariablesRaw struct {
	Contract *TellorVariables // Generic contract binding to access the raw methods on
}

// TellorVariablesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorVariablesCallerRaw struct {
	Contract *TellorVariablesCaller // Generic read-only contract binding to access the raw methods on
}

// TellorVariablesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorVariablesTransactorRaw struct {
	Contract *TellorVariablesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorVariables creates a new instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariables(address common.Address, backend bind.ContractBackend) (*TellorVariables, error) {
	contract, err := bindTellorVariables(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorVariables{TellorVariablesCaller: TellorVariablesCaller{contract: contract}, TellorVariablesTransactor: TellorVariablesTransactor{contract: contract}, TellorVariablesFilterer: TellorVariablesFilterer{contract: contract}}, nil
}

// NewTellorVariablesCaller creates a new read-only instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesCaller(address common.Address, caller bind.ContractCaller) (*TellorVariablesCaller, error) {
	contract, err := bindTellorVariables(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesCaller{contract: contract}, nil
}

// NewTellorVariablesTransactor creates a new write-only instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorVariablesTransactor, error) {
	contract, err := bindTellorVariables(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesTransactor{contract: contract}, nil
}

// NewTellorVariablesFilterer creates a new log filterer instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorVariablesFilterer, error) {
	contract, err := bindTellorVariables(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesFilterer{contract: contract}, nil
}

// bindTellorVariables binds a generic wrapper to an already deployed contract.
func bindTellorVariables(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorVariablesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVariables *TellorVariablesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVariables.Contract.TellorVariablesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVariables *TellorVariablesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVariables.Contract.TellorVariablesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVariables *TellorVariablesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVariables.Contract.TellorVariablesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVariables *TellorVariablesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVariables.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVariables *TellorVariablesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVariables.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVariables *TellorVariablesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVariables.Contract.contract.Transact(opts, method, params...)
}

// TellorVarsMetaData contains all meta data concerning the TellorVars contract.
var TellorVarsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220de4f55b38a2bbf54c9004fba9ee272a8c66cda4b068f7735e41adf16f8f63a0764736f6c63430008030033",
}

// TellorVarsABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorVarsMetaData.ABI instead.
var TellorVarsABI = TellorVarsMetaData.ABI

// TellorVarsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorVarsMetaData.Bin instead.
var TellorVarsBin = TellorVarsMetaData.Bin

// DeployTellorVars deploys a new Ethereum contract, binding an instance of TellorVars to it.
func DeployTellorVars(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorVars, error) {
	parsed, err := TellorVarsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorVarsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorVars{TellorVarsCaller: TellorVarsCaller{contract: contract}, TellorVarsTransactor: TellorVarsTransactor{contract: contract}, TellorVarsFilterer: TellorVarsFilterer{contract: contract}}, nil
}

// TellorVars is an auto generated Go binding around an Ethereum contract.
type TellorVars struct {
	TellorVarsCaller     // Read-only binding to the contract
	TellorVarsTransactor // Write-only binding to the contract
	TellorVarsFilterer   // Log filterer for contract events
}

// TellorVarsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorVarsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorVarsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorVarsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorVarsSession struct {
	Contract     *TellorVars       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorVarsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorVarsCallerSession struct {
	Contract *TellorVarsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TellorVarsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorVarsTransactorSession struct {
	Contract     *TellorVarsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TellorVarsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorVarsRaw struct {
	Contract *TellorVars // Generic contract binding to access the raw methods on
}

// TellorVarsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorVarsCallerRaw struct {
	Contract *TellorVarsCaller // Generic read-only contract binding to access the raw methods on
}

// TellorVarsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorVarsTransactorRaw struct {
	Contract *TellorVarsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorVars creates a new instance of TellorVars, bound to a specific deployed contract.
func NewTellorVars(address common.Address, backend bind.ContractBackend) (*TellorVars, error) {
	contract, err := bindTellorVars(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorVars{TellorVarsCaller: TellorVarsCaller{contract: contract}, TellorVarsTransactor: TellorVarsTransactor{contract: contract}, TellorVarsFilterer: TellorVarsFilterer{contract: contract}}, nil
}

// NewTellorVarsCaller creates a new read-only instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsCaller(address common.Address, caller bind.ContractCaller) (*TellorVarsCaller, error) {
	contract, err := bindTellorVars(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVarsCaller{contract: contract}, nil
}

// NewTellorVarsTransactor creates a new write-only instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorVarsTransactor, error) {
	contract, err := bindTellorVars(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVarsTransactor{contract: contract}, nil
}

// NewTellorVarsFilterer creates a new log filterer instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorVarsFilterer, error) {
	contract, err := bindTellorVars(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorVarsFilterer{contract: contract}, nil
}

// bindTellorVars binds a generic wrapper to an already deployed contract.
func bindTellorVars(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorVarsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVars *TellorVarsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVars.Contract.TellorVarsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVars *TellorVarsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVars.Contract.TellorVarsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVars *TellorVarsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVars.Contract.TellorVarsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVars *TellorVarsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVars.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVars *TellorVarsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVars.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVars *TellorVarsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVars.Contract.contract.Transact(opts, method, params...)
}

// TokenMetaData contains all meta data concerning the Token contract.
var TokenMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"699f200f": "addresses(bytes32)",
		"dd62ed3e": "allowance(address,address)",
		"999cf26c": "allowedToTrade(address,uint256)",
		"095ea7b3": "approve(address,uint256)",
		"288c9c9d": "approveAndTransferFrom(address,address,uint256)",
		"70a08231": "balanceOf(address)",
		"4ee2cd7e": "balanceOfAt(address,uint256)",
		"cbf1304d": "balances(address,uint256)",
		"42966c68": "burn(uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"1fd22364": "currentMiners(uint256)",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"b59e14d4": "uints(bytes32)",
	},
	Bin: "0x608060405234801561001057600080fd5b506111a7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635700242c116100b8578063a9059cbb1161007c578063a9059cbb14610326578063b59e14d414610339578063cbf1304d14610359578063d01f4d9e1461038c578063db085beb146103ac578063dd62ed3e1461046557610137565b80635700242c1461027f57806362dd1d2a1461029f578063699f200f146102bf57806370a0823114610300578063999cf26c1461031357610137565b806342966c68116100ff57806342966c68146101f3578063438c0aa31461020857806348b18e541461021b5780634ba0a5ee146102495780634ee2cd7e1461026c57610137565b8063024c2ddd1461013c578063095ea7b31461017a5780631fd223641461019d57806323b872dd146101cd578063288c9c9d146101e0575b600080fd5b61016761014a366004610f82565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61018d610188366004610fef565b61049e565b6040519015158152602001610171565b6101b06101ab366004611038565b61056b565b604080519283526001600160a01b03909116602083015201610171565b61018d6101db366004610fb4565b610596565b61018d6101ee366004610fb4565b61064c565b610206610201366004611038565b610862565b005b610167610216366004611038565b61086f565b61018d610229366004611050565b603960209081526000928352604080842090915290825290205460ff1681565b61018d610257366004610f61565b604b6020526000908152604090205460ff1681565b61016761027a366004610fef565b610890565b61016761028d366004611038565b60376020526000908152604090205481565b6101676102ad366004611038565b60486020526000908152604090205481565b6102e86102cd366004611038565b6047602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610171565b61016761030e366004610f61565b610afb565b61018d610321366004610fef565b610b0f565b61018d610334366004610fef565b610bcf565b610167610347366004611038565b60466020526000908152604090205481565b61036c610367366004610fef565b610be5565b604080516001600160801b03938416815292909116602083015201610171565b61016761039a366004611038565b60386020526000908152604090205481565b6104166103ba366004611038565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e082015261010001610171565b610167610473366004610f82565b6001600160a01b039182166000908152604a6020908152604080832093909416825291909152205490565b60006001600160a01b0383166105065760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084015b60405180910390fd5b336000818152604a602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b603a816005811061057b57600080fd5b6002020180546001909101549091506001600160a01b031682565b6001600160a01b0383166000908152604a602090815260408083203384529091528120548211156105fe5760405162461bcd60e51b8152602060048201526012602482015271416c6c6f77616e63652069732077726f6e6760701b60448201526064016104fd565b6001600160a01b0384166000908152604a6020908152604080832033845290915281208054849290610631908490611144565b909155506106429050848484610c28565b5060019392505050565b7fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd93600090815260476020527f7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22d54604051637e98b8d960e11b81523360048201526001600160a01b039091169063fd3171b29060240160206040518083038186803b1580156106d957600080fd5b505afa1580156106ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107119190611018565b8061076e57507f1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa60005260476020527fdff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d546001600160a01b031633145b806107cb57507ffa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891e60005260476020527fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b5546001600160a01b031633145b6108575760405162461bcd60e51b815260206004820152605160248201527f4f6e6c792074686520476f7665726e616e63652c2054726561737572792c206f60448201527f72204f7261636c6520436f6e74726163742063616e20617070726f766520616e60648201527064207472616e7366657220746f6b656e7360781b608482015260a4016104fd565b610642848484610c28565b61086c3382610d81565b50565b6033818154811061087f57600080fd5b600091825260209091200154905081565b6001600160a01b0382166000908152604960205260408120805415806108ea575082816000815481106108d357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b0316115b156108f9576000915050610565565b8054819061090990600190611144565b8154811061092757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03168310610995578054819061095290600190611144565b8154811061097057634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b031691506105659050565b805460009081906109a890600290611144565b90505b81811115610ab457600060026109c184846110e4565b6109cc9060016110e4565b6109d691906110fc565b9050858482815481106109f957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03161415610a5c57838181548110610a3457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b031694506105659350505050565b85848281548110610a7d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b03161015610aa057809250610aae565b610aab600182611144565b91505b506109ab565b828281548110610ad457634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160801b90046001600160801b0316935061056592505050565b6000610b078243610890565b90505b919050565b6001600160a01b03821660009081526044602052604081205415801590610b4e57506001600160a01b0383166000908152604460205260409020546005115b15610bbc577f5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc9760005260466020527f167af83a0768d27540775cfef6d996eb63f8a61fcdfb26e654c18fb50960e3be548290610ba985610afb565b610bb39190611144565b10159050610565565b81610bc684610afb565b10159392505050565b6000610bdc338484610c28565b50600192915050565b60496020528160005260406000208181548110610c0157600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b80610c7f5760405162461bcd60e51b815260206004820152602160248201527f547269656420746f2073656e64206e6f6e2d706f73697469766520616d6f756e6044820152601d60fa1b60648201526084016104fd565b6001600160a01b038216610ccd5760405162461bcd60e51b815260206004820152601560248201527452656365697665722069732030206164647265737360581b60448201526064016104fd565b610cd78382610b0f565b610cf35760405162461bcd60e51b81526004016104fd90611072565b6000610cfe84610afb565b905081610d1485610d0f838561111c565b610e35565b610d1d84610afb565b9150610d2d84610d0f83856110b9565b836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610d7291815260200190565b60405180910390a35050505050565b80610d8b57610e31565b610d958282610b0f565b610db15760405162461bcd60e51b81526004016104fd90611072565b6000610dbc83610afb565b905081610dcd84610d0f838561111c565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160600090815260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e8054859290610e29908490611144565b909155505050505b5050565b6001600160a01b038216600090815260496020526040902080541580610e9e5750805443908290610e6890600190611144565b81548110610e8657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160801b031614155b15610eef57604080518082019091526001600160801b03438116825283811660208084019182528454600181018655600086815291909120935191518316600160801b029190921617910155610f45565b80546000908290610f0290600190611144565b81548110610f2057634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160801b03808616600160801b029116179055505b505050565b80356001600160a01b0381168114610b0a57600080fd5b600060208284031215610f72578081fd5b610f7b82610f4a565b9392505050565b60008060408385031215610f94578081fd5b610f9d83610f4a565b9150610fab60208401610f4a565b90509250929050565b600080600060608486031215610fc8578081fd5b610fd184610f4a565b9250610fdf60208501610f4a565b9150604084013590509250925092565b60008060408385031215611001578182fd5b61100a83610f4a565b946020939093013593505050565b600060208284031215611029578081fd5b81518015158114610f7b578182fd5b600060208284031215611049578081fd5b5035919050565b60008060408385031215611062578182fd5b82359150610fab60208401610f4a565b60208082526027908201527f53686f756c6420686176652073756666696369656e742062616c616e636520746040820152666f20747261646560c81b606082015260800190565b60006001600160801b038083168185168083038211156110db576110db61115b565b01949350505050565b600082198211156110f7576110f761115b565b500190565b60008261111757634e487b7160e01b81526012600452602481fd5b500490565b60006001600160801b038381169083168181101561113c5761113c61115b565b039392505050565b6000828210156111565761115661115b565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f798013c7303a7e8f0f29cca4627c7e1ff7bbc3715337e66926712d316476fdf64736f6c63430008030033",
}

// TokenABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenMetaData.ABI instead.
var TokenABI = TokenMetaData.ABI

// Deprecated: Use TokenMetaData.Sigs instead.
// TokenFuncSigs maps the 4-byte function signature to its string representation.
var TokenFuncSigs = TokenMetaData.Sigs

// TokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenMetaData.Bin instead.
var TokenBin = TokenMetaData.Bin

// DeployToken deploys a new Ethereum contract, binding an instance of Token to it.
func DeployToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Token, error) {
	parsed, err := TokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// Token is an auto generated Go binding around an Ethereum contract.
type Token struct {
	TokenCaller     // Read-only binding to the contract
	TokenTransactor // Write-only binding to the contract
	TokenFilterer   // Log filterer for contract events
}

// TokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenSession struct {
	Contract     *Token            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenCallerSession struct {
	Contract *TokenCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenTransactorSession struct {
	Contract     *TokenTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenRaw struct {
	Contract *Token // Generic contract binding to access the raw methods on
}

// TokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenCallerRaw struct {
	Contract *TokenCaller // Generic read-only contract binding to access the raw methods on
}

// TokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenTransactorRaw struct {
	Contract *TokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewToken creates a new instance of Token, bound to a specific deployed contract.
func NewToken(address common.Address, backend bind.ContractBackend) (*Token, error) {
	contract, err := bindToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Token{TokenCaller: TokenCaller{contract: contract}, TokenTransactor: TokenTransactor{contract: contract}, TokenFilterer: TokenFilterer{contract: contract}}, nil
}

// NewTokenCaller creates a new read-only instance of Token, bound to a specific deployed contract.
func NewTokenCaller(address common.Address, caller bind.ContractCaller) (*TokenCaller, error) {
	contract, err := bindToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenCaller{contract: contract}, nil
}

// NewTokenTransactor creates a new write-only instance of Token, bound to a specific deployed contract.
func NewTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenTransactor, error) {
	contract, err := bindToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenTransactor{contract: contract}, nil
}

// NewTokenFilterer creates a new log filterer instance of Token, bound to a specific deployed contract.
func NewTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFilterer, error) {
	contract, err := bindToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFilterer{contract: contract}, nil
}

// bindToken binds a generic wrapper to an already deployed contract.
func bindToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.TokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.TokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Token *TokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Token.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Token *TokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Token.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Token *TokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Token.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Token *TokenCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Token *TokenSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowances(&_Token.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Token *TokenCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Token.Contract.Allowances(&_Token.CallOpts, arg0, arg1)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Token *TokenCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Token *TokenSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Token.Contract.Addresses(&_Token.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Token *TokenCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Token.Contract.Addresses(&_Token.CallOpts, arg0)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Token *TokenCaller) Allowance(opts *bind.CallOpts, _user common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowance", _user, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Token *TokenSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, _user, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_Token *TokenCallerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _Token.Contract.Allowance(&_Token.CallOpts, _user, _spender)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Token *TokenCaller) AllowedToTrade(opts *bind.CallOpts, _user common.Address, _amount *big.Int) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "allowedToTrade", _user, _amount)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Token *TokenSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _Token.Contract.AllowedToTrade(&_Token.CallOpts, _user, _amount)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_Token *TokenCallerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _Token.Contract.AllowedToTrade(&_Token.CallOpts, _user, _amount)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Token *TokenCaller) BalanceOf(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOf", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Token *TokenSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, _user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _Token.Contract.BalanceOf(&_Token.CallOpts, _user)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Token *TokenCaller) BalanceOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balanceOfAt", _user, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Token *TokenSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _Token.Contract.BalanceOfAt(&_Token.CallOpts, _user, _blockNumber)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_Token *TokenCallerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _Token.Contract.BalanceOfAt(&_Token.CallOpts, _user, _blockNumber)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Token *TokenCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Token *TokenSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Token.Contract.Balances(&_Token.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Token *TokenCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Token.Contract.Balances(&_Token.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Token *TokenCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Token *TokenSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Token.Contract.BytesVars(&_Token.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Token *TokenCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Token.Contract.BytesVars(&_Token.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Token *TokenCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Token *TokenSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Token.Contract.CurrentMiners(&_Token.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Token *TokenCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Token.Contract.CurrentMiners(&_Token.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Token *TokenCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Token *TokenSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.DisputeIdByDisputeHash(&_Token.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Token *TokenCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.DisputeIdByDisputeHash(&_Token.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Token *TokenCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Token *TokenSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Token.Contract.DisputesById(&_Token.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Token *TokenCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Token.Contract.DisputesById(&_Token.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Token *TokenCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Token *TokenSession) Migrated(arg0 common.Address) (bool, error) {
	return _Token.Contract.Migrated(&_Token.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Token *TokenCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _Token.Contract.Migrated(&_Token.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Token *TokenCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Token *TokenSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Token.Contract.MinersByChallenge(&_Token.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Token *TokenCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Token.Contract.MinersByChallenge(&_Token.CallOpts, arg0, arg1)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Token *TokenCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Token *TokenSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.NewValueTimestamps(&_Token.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Token *TokenCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Token.Contract.NewValueTimestamps(&_Token.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Token *TokenCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Token *TokenSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.RequestIdByQueryHash(&_Token.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Token *TokenCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.RequestIdByQueryHash(&_Token.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Token *TokenCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Token.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Token *TokenSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.Uints(&_Token.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Token *TokenCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Token.Contract.Uints(&_Token.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Token *TokenTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Token *TokenSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_Token *TokenTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Approve(&_Token.TransactOpts, _spender, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Token *TokenTransactor) ApproveAndTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "approveAndTransferFrom", _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Token *TokenSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndTransferFrom(&_Token.TransactOpts, _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_Token *TokenTransactorSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.ApproveAndTransferFrom(&_Token.TransactOpts, _from, _to, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Token *TokenTransactor) Burn(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "burn", _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Token *TokenSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_Token *TokenTransactorSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Burn(&_Token.TransactOpts, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Token *TokenTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Token *TokenSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_Token *TokenTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.Transfer(&_Token.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Token *TokenTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.contract.Transact(opts, "transferFrom", _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Token *TokenSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_Token *TokenTransactorSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Token.Contract.TransferFrom(&_Token.TransactOpts, _from, _to, _amount)
}

// TokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Token contract.
type TokenApprovalIterator struct {
	Event *TokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenApproval represents a Approval event raised by the Token contract.
type TokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Token *TokenFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _spender []common.Address) (*TokenApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return &TokenApprovalIterator{contract: _Token.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Token *TokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TokenApproval, _owner []common.Address, _spender []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenApproval)
				if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Token *TokenFilterer) ParseApproval(log types.Log) (*TokenApproval, error) {
	event := new(TokenApproval)
	if err := _Token.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Token contract.
type TokenTransferIterator struct {
	Event *TokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenTransfer represents a Transfer event raised by the Token contract.
type TokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Token *TokenFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address) (*TokenTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Token.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &TokenTransferIterator{contract: _Token.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Token *TokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TokenTransfer, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Token.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenTransfer)
				if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Token *TokenFilterer) ParseTransfer(log types.Log) (*TokenTransfer, error) {
	event := new(TokenTransfer)
	if err := _Token.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransitionMetaData contains all meta data concerning the Transition contract.
var TransitionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_b\",\"type\":\"bytes\"}],\"name\":\"_sliceUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fromBlock\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bytesVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"disputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputesById\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"tally\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputeVotePassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPropFork\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"reportedMiner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reportingParty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposedForkAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_c\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[5]\",\"name\":\"_r\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_diff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minersByChallenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"newValueTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"024c2ddd": "_allowances(address,address)",
		"340a1372": "_sliceUint(bytes)",
		"699f200f": "addresses(bytes32)",
		"cbf1304d": "balances(address,uint256)",
		"62dd1d2a": "bytesVars(bytes32)",
		"1fd22364": "currentMiners(uint256)",
		"313ce567": "decimals()",
		"d01f4d9e": "disputeIdByDisputeHash(bytes32)",
		"db085beb": "disputesById(uint256)",
		"133bee5e": "getAddressVars(bytes32)",
		"af0b1327": "getAllDisputeVars(uint256)",
		"da379941": "getDisputeIdByDisputeHash(bytes32)",
		"7f6fd5d9": "getDisputeUintVars(uint256,bytes32)",
		"3180f8df": "getLastNewValueById(uint256)",
		"4049f198": "getNewCurrentVariables()",
		"46eee1c4": "getNewValueCountbyRequestId(uint256)",
		"77fbb663": "getTimestampbyRequestIDandIndex(uint256,uint256)",
		"612c8f7f": "getUintVar(bytes32)",
		"e1c7392a": "init()",
		"58421ed2": "isMigrated(address)",
		"4ba0a5ee": "migrated(address)",
		"48b18e54": "minersByChallenge(bytes32,address)",
		"06fdde03": "name()",
		"438c0aa3": "newValueTimestamps(uint256)",
		"5700242c": "requestIdByQueryHash(bytes32)",
		"93fa4915": "retrieveData(uint256,uint256)",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"b59e14d4": "uints(bytes32)",
	},
	Bin: "0x60806040523480156200001157600080fd5b5060405162001c5f38038062001c5f833981016040819052620000349162000175565b6001600160a01b0383166200008f5760405162461bcd60e51b815260206004820152601b60248201527f6d7573742073657420676f7665726e616e636520616464726573730000000000604482015260640160405180910390fd5b60476020527f7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22d80546001600160a01b039485166001600160a01b0319918216179091557fef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b58054938516938216939093179092557f1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa6000527fdff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d8054919093169116179055620001be565b80516001600160a01b03811681146200017057600080fd5b919050565b6000806000606084860312156200018a578283fd5b620001958462000158565b9250620001a56020850162000158565b9150620001b56040850162000158565b90509250925092565b611a9180620001ce6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806358421ed21161010457806395d89b41116100a2578063d01f4d9e11610071578063d01f4d9e1461071e578063da3799411461073e578063db085beb1461075e578063e1c7392a14610817576101cf565b806395d89b4114610684578063af0b1327146106a3578063b59e14d4146106cb578063cbf1304d146106eb576101cf565b8063699f200f116100de578063699f200f1461060657806377fbb6631461062f5780637f6fd5d91461064257806393fa491514610671576101cf565b806358421ed21461059a578063612c8f7f146105c657806362dd1d2a146105e6576101cf565b8063340a13721161017157806346eee1c41161014b57806346eee1c41461050657806348b18e54146105195780634ba0a5ee146105575780635700242c1461057a576101cf565b8063340a1372146104c85780634049f198146104db578063438c0aa3146104f3576101cf565b806318160ddd116101ad57806318160ddd146104115780631fd2236414610461578063313ce567146104915780633180f8df146104a0576101cf565b8063024c2ddd1461037457806306fdde03146103b2578063133bee5e146103e6575b732754da26f634e04b26c4decd27b3eb144cf405826000805b6004811015610246576101fc816008611956565b6000368381811061021d57634e487b7160e01b600052603260045260246000fd5b909101356001600160f81b03191690911c9290921791508061023e816119bc565b9150506101e8565b506001600160e01b03198116638581af1960e01b148061027657506001600160e01b031981166364e93d7f60e11b145b8061029157506001600160e01b03198116632698c58760e11b145b806102ac57506001600160e01b03198116639a01ca1360e01b145b6102fd5760405162461bcd60e51b815260206004820152601a60248201527f66756e6374696f6e2073686f756c6420626520616c6c6f77656400000000000060448201526064015b60405180910390fd5b6000826001600160a01b031660003660405161031a9291906117dc565b600060405180830381855af49150503d8060008114610355576040519150601f19603f3d011682016040523d82523d6000602084013e61035a565b606091505b505090503d6000803e80801561036f573d6000f35b3d6000fd5b61039f610382366004611618565b604a60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b60408051808201909152600f81526e54656c6c6f7220547269627574657360881b60208201525b6040516103a991906118b2565b6103f96103f436600461167b565b610821565b6040516001600160a01b0390911681526020016103a9565b7fe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb738016060005260466020527ffffeead1ec15181fd57b4590d95e0c076bccb59e311315e8b38f23c710aa7c3e5461039f565b61047461046f36600461167b565b61083f565b604080519283526001600160a01b039091166020830152016103a9565b604051601281526020016103a9565b6104b36104ae36600461167b565b61086a565b604080519283529015156020830152016103a9565b61039f6104d63660046116b7565b610a54565b6104e3610abd565b6040516103a994939291906117ec565b61039f61050136600461167b565b610bc6565b61039f61051436600461167b565b610be7565b610547610527366004611693565b603960209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016103a9565b6105476105653660046115d9565b604b6020526000908152604090205460ff1681565b61039f61058836600461167b565b60376020526000908152604090205481565b6105476105a83660046115d9565b6001600160a01b03166000908152604b602052604090205460ff1690565b61039f6105d436600461167b565b60009081526046602052604090205490565b61039f6105f436600461167b565b60486020526000908152604090205481565b6103f961061436600461167b565b6047602052600090815260409020546001600160a01b031681565b61039f61063d3660046117bb565b610cae565b61039f6106503660046117bb565b60009182526036602090815260408084209284526005909201905290205490565b61039f61067f3660046117bb565b610d9c565b6040805180820190915260038152622a292160e91b60208201526103d9565b6106b66106b136600461167b565b610ec0565b6040516103a999989796959493929190611830565b61039f6106d936600461167b565b60466020526000908152604090205481565b6106fe6106f9366004611650565b6110eb565b604080516001600160801b039384168152929091166020830152016103a9565b61039f61072c36600461167b565b60386020526000908152604090205481565b61039f61074c36600461167b565b60009081526038602052604090205490565b6107c861076c36600461167b565b603660205260009081526040902080546001820154600283015460038401546004909401549293919260ff808316936101008404821693620100008104909216926001600160a01b036301000000909304831692918216911688565b604080519889526020890197909752941515958701959095529115156060860152151560808501526001600160a01b0390811660a085015291821660c08401521660e0820152610100016103a9565b61081f61112e565b005b6000818152604760205260409020546001600160a01b03165b919050565b603a816005811061084f57600080fd5b6002020180546001909101549091506001600160a01b031682565b600080516020611a3c83398151915260009081526047602052600080516020611a1c83398151915254604051631af3921960e11b815260048101849052829182916001600160a01b03909116906335e724329060240160206040518083038186803b1580156108d857600080fd5b505afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091091906117a3565b905080156109df57600080516020611a3c8339815191526000526047602052600080516020611a1c833981519152546109d39085906001600160a01b0316637c37b8b48261095f600187611975565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067f91906117a3565b60019250925050610a4f565b6000848152604560205260409020805415610a45578054610a389086908390610a0a90600190611975565b81548110610a2857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154610d9c565b6001935093505050610a4f565b6000809350935050505b915091565b600080805b8351811015610ab657610a6e82610100611956565b9150838181518110610a9057634e487b7160e01b600052603260045260246000fd5b0160200151610aa29060f81c8361193e565b915080610aae816119bc565b915050610a59565b5092915050565b6000610ac761159c565b506040805160a08101825260018082526020808301829052828401829052606083018290526080830191909152600080516020611a3c833981519152600090815260478252600080516020611a1c83398151915254845163607caea960e11b815294519394919384936001600160a01b039092169263c0f95d52926004808301939192829003018186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9691906117a3565b604051602001610ba891815260200190565b60405160208183030381529060405280519060200120935090919293565b60338181548110610bd657600080fd5b600091825260209091200154905081565b600080516020611a3c83398151915260009081526047602052600080516020611a1c83398151915254604051631af3921960e11b81526004810184905282916001600160a01b0316906335e724329060240160206040518083038186803b158015610c5157600080fd5b505afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8991906117a3565b90508015610c9857905061083a565b505060008181526045602052604090205461083a565b600080516020611a3c83398151915260009081526047602052600080516020611a1c83398151915254604051631f0dee2d60e21b815260048101859052602481018490526001600160a01b0390911690637c37b8b49060440160206040518083038186803b158015610d1f57600080fd5b505afa925050508015610d4f575060408051601f3d908101601f19168201909252610d4c918101906117a3565b60015b610d93576000838152604560205260409020805483908110610d8157634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050610d96565b90505b92915050565b7f6c0e91a96227393eb6e42b88e9a99f7c5ebd588098b549c949baf27ac9509d8f600090815260466020527f9dd7c008ae091f0bb92d79df2a27d29a02d7be98e77be1227c4e243dccabda5854821015610e1357506000828152604560209081526040808320848452600301909152902054610d96565b600080516020611a3c8339815191526000526047602052600080516020611a1c83398151915254604051630b2d2b0d60e01b81526004810185905260248101849052610d93916001600160a01b031690630b2d2b0d9060440160006040518083038186803b158015610e8457600080fd5b505afa158015610e98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104d69190810190611730565b6000806000806000806000610ed36115ba565b5050506000958652505060366020908152604080862080546002820154600383015460048401548551610120810187527f9f47a2659c3d32b749ae717d975e7962959890862423c4318cf86e4ec220291f8c5260058601808952878d205482527f2f9328a9c75282bec25bb04befad06926366736e0030c985108445fa728335e58d52808952878d2054828a01527f9147231ab14efb72c38117f68521ddef8de64f092c18c69dbfb602ffc4de7f478d52808952878d2054828901527f46f7d53798d31923f6952572c6a19ad2d1a8238d26649c2f3493a6d69e425d288d52808952878d205460608301527f1da378694063870452ce03b189f48e04c1aa026348e74e6c86e10738514ad2c48d52808952878d205460808301527f4b4cefd5ced7569ef0d091282b4bca9c52a034c56471a6061afd1bf307a2de7c8d52808952878d205460a08301527f6de96ee4d33a0617f40a846309c8759048857f51b9d59a12d3c3786d4778883d8d52808952878d205460c08301527f30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b268d52808952878d205460e08301527f1da95f11543c9b03927178e07951795dfc95c7501a9d1cf00e13414ca33bc4098d52909752949099205461010080870191909152600190930154919960ff8083169a948304811699506201000083041697506001600160a01b036301000000909204821696509281169493169291565b6049602052816000526040600020818154811061110757600080fd5b6000918252602090912001546001600160801b038082169350600160801b90910416905082565b7fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd9360005260476020527f7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22d546001600160a01b0316156111c05760405162461bcd60e51b815260206004820152600e60248201526d4f6e6c7920676f6f64206f6e636560901b60448201526064016102f4565b68056bc75e2d631000007f167af83a0768d27540775cfef6d996eb63f8a61fcdfb26e654c18fb50960e3be55427f9dd7c008ae091f0bb92d79df2a27d29a02d7be98e77be1227c4e243dccabda5855678ac7230489e800007fa7dd4870ca148afe8854be8aed16d8286a45fa3ccd69baa311c29f333d7c830b557f0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a0860005260476020527ffe10c9a395cce5a324df121072934b83aa2f3aa5f594428b2a75cf926b73fae85460405163699f200f60e01b81527fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd9360048201526001600160a01b0390911690819063699f200f9060240160206040518083038186803b1580156112e757600080fd5b505afa1580156112fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131f91906115fc565b7fefa19baa864049f50491093580c5433e97e8d5e41f8db1a61108b4fa44cacd9360005260476020527f7d9ee2aaccfe8f70172569ff913448023f3ddb672f2bd893709418983f3ec22d80546001600160a01b0319166001600160a01b0392831617905560405163699f200f60e01b8152600080516020611a3c83398151915260048201529082169063699f200f9060240160206040518083038186803b1580156113c957600080fd5b505afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140191906115fc565b600080516020611a3c8339815191526000526047602052600080516020611a1c83398151915280546001600160a01b0319166001600160a01b0392831617905560405163699f200f60e01b81527f1436a1a60dca0ebb2be98547e57992a0fa082eb479e7576303cbd384e934f1fa60048201529082169063699f200f9060240160206040518083038186803b15801561149957600080fd5b505afa1580156114ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d191906115fc565b60476020527fdff38f4be09d4d5ca93ca85b25c70a2df93aeb79f23032ad60429718dab8fd0d80546001600160a01b0319166001600160a01b03928316179055604c54600080516020611a3c833981519152600052600080516020611a1c833981519152546040516340c10f1960e01b81529083166004820152691642910dea5ec680000060248201529116906340c10f1990604401600060405180830381600087803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b5050505050565b6040518060a001604052806005906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6000602082840312156115ea578081fd5b81356115f581611a03565b9392505050565b60006020828403121561160d578081fd5b81516115f581611a03565b6000806040838503121561162a578081fd5b823561163581611a03565b9150602083013561164581611a03565b809150509250929050565b60008060408385031215611662578182fd5b823561166d81611a03565b946020939093013593505050565b60006020828403121561168c578081fd5b5035919050565b600080604083850312156116a5578182fd5b82359150602083013561164581611a03565b6000602082840312156116c8578081fd5b813567ffffffffffffffff8111156116de578182fd5b8201601f810184136116ee578182fd5b80356117016116fc82611916565b6118e5565b818152856020838501011115611715578384fd5b81602084016020830137908101602001929092525092915050565b600060208284031215611741578081fd5b815167ffffffffffffffff811115611757578182fd5b8201601f81018413611767578182fd5b80516117756116fc82611916565b818152856020838501011115611789578384fd5b61179a82602083016020860161198c565b95945050505050565b6000602082840312156117b4578081fd5b5051919050565b600080604083850312156117cd578182fd5b50508035926020909101359150565b6000828483379101908152919050565b848152610100810160208083018660005b600581101561181a578151835291830191908301906001016117fd565b5050505060c082019390935260e0015292915050565b898152881515602080830191909152881515604083015287151560608301526001600160a01b03878116608084015286811660a0840152851660c083015261022082019060e083018560005b60098110156118995781518352918301919083019060010161187c565b50505050826102008301529a9950505050505050505050565b60006020825282518060208401526118d181604085016020870161198c565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561190e5761190e6119ed565b604052919050565b600067ffffffffffffffff821115611930576119306119ed565b50601f01601f191660200190565b60008219821115611951576119516119d7565b500190565b6000816000190483118215151615611970576119706119d7565b500290565b600082821015611987576119876119d7565b500390565b60005b838110156119a757818101518382015260200161198f565b838111156119b6576000848401525b50505050565b60006000198214156119d0576119d06119d7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a1857600080fd5b5056feef4ea54b5b61165ffc2ef656b4303b6e25d2ec33cc6bc62f39864cc7b0cfe7b5fa522e460446113e8fd353d7fa015625a68bc0369712213a42e006346440891ea2646970667358221220eea3fbcee57fc3d39813c977fb38fe3f2bb1b6de91ee051d4e87b94934a2834964736f6c63430008030033",
}

// TransitionABI is the input ABI used to generate the binding from.
// Deprecated: Use TransitionMetaData.ABI instead.
var TransitionABI = TransitionMetaData.ABI

// Deprecated: Use TransitionMetaData.Sigs instead.
// TransitionFuncSigs maps the 4-byte function signature to its string representation.
var TransitionFuncSigs = TransitionMetaData.Sigs

// TransitionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TransitionMetaData.Bin instead.
var TransitionBin = TransitionMetaData.Bin

// DeployTransition deploys a new Ethereum contract, binding an instance of Transition to it.
func DeployTransition(auth *bind.TransactOpts, backend bind.ContractBackend, _governance common.Address, _oracle common.Address, _treasury common.Address) (common.Address, *types.Transaction, *Transition, error) {
	parsed, err := TransitionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TransitionBin), backend, _governance, _oracle, _treasury)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Transition{TransitionCaller: TransitionCaller{contract: contract}, TransitionTransactor: TransitionTransactor{contract: contract}, TransitionFilterer: TransitionFilterer{contract: contract}}, nil
}

// Transition is an auto generated Go binding around an Ethereum contract.
type Transition struct {
	TransitionCaller     // Read-only binding to the contract
	TransitionTransactor // Write-only binding to the contract
	TransitionFilterer   // Log filterer for contract events
}

// TransitionCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransitionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransitionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransitionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransitionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransitionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransitionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransitionSession struct {
	Contract     *Transition       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransitionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransitionCallerSession struct {
	Contract *TransitionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TransitionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransitionTransactorSession struct {
	Contract     *TransitionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TransitionRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransitionRaw struct {
	Contract *Transition // Generic contract binding to access the raw methods on
}

// TransitionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransitionCallerRaw struct {
	Contract *TransitionCaller // Generic read-only contract binding to access the raw methods on
}

// TransitionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransitionTransactorRaw struct {
	Contract *TransitionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransition creates a new instance of Transition, bound to a specific deployed contract.
func NewTransition(address common.Address, backend bind.ContractBackend) (*Transition, error) {
	contract, err := bindTransition(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transition{TransitionCaller: TransitionCaller{contract: contract}, TransitionTransactor: TransitionTransactor{contract: contract}, TransitionFilterer: TransitionFilterer{contract: contract}}, nil
}

// NewTransitionCaller creates a new read-only instance of Transition, bound to a specific deployed contract.
func NewTransitionCaller(address common.Address, caller bind.ContractCaller) (*TransitionCaller, error) {
	contract, err := bindTransition(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransitionCaller{contract: contract}, nil
}

// NewTransitionTransactor creates a new write-only instance of Transition, bound to a specific deployed contract.
func NewTransitionTransactor(address common.Address, transactor bind.ContractTransactor) (*TransitionTransactor, error) {
	contract, err := bindTransition(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransitionTransactor{contract: contract}, nil
}

// NewTransitionFilterer creates a new log filterer instance of Transition, bound to a specific deployed contract.
func NewTransitionFilterer(address common.Address, filterer bind.ContractFilterer) (*TransitionFilterer, error) {
	contract, err := bindTransition(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransitionFilterer{contract: contract}, nil
}

// bindTransition binds a generic wrapper to an already deployed contract.
func bindTransition(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransitionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transition *TransitionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transition.Contract.TransitionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transition *TransitionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transition.Contract.TransitionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transition *TransitionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transition.Contract.TransitionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transition *TransitionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transition.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transition *TransitionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transition.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transition *TransitionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transition.Contract.contract.Transact(opts, method, params...)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Transition *TransitionCaller) Allowances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "_allowances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Transition *TransitionSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Transition.Contract.Allowances(&_Transition.CallOpts, arg0, arg1)
}

// Allowances is a free data retrieval call binding the contract method 0x024c2ddd.
//
// Solidity: function _allowances(address , address ) view returns(uint256)
func (_Transition *TransitionCallerSession) Allowances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Transition.Contract.Allowances(&_Transition.CallOpts, arg0, arg1)
}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Transition *TransitionCaller) SliceUint(opts *bind.CallOpts, _b []byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "_sliceUint", _b)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Transition *TransitionSession) SliceUint(_b []byte) (*big.Int, error) {
	return _Transition.Contract.SliceUint(&_Transition.CallOpts, _b)
}

// SliceUint is a free data retrieval call binding the contract method 0x340a1372.
//
// Solidity: function _sliceUint(bytes _b) pure returns(uint256 _x)
func (_Transition *TransitionCallerSession) SliceUint(_b []byte) (*big.Int, error) {
	return _Transition.Contract.SliceUint(&_Transition.CallOpts, _b)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Transition *TransitionCaller) Addresses(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "addresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Transition *TransitionSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Transition.Contract.Addresses(&_Transition.CallOpts, arg0)
}

// Addresses is a free data retrieval call binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) view returns(address)
func (_Transition *TransitionCallerSession) Addresses(arg0 [32]byte) (common.Address, error) {
	return _Transition.Contract.Addresses(&_Transition.CallOpts, arg0)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Transition *TransitionCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "balances", arg0, arg1)

	outstruct := new(struct {
		FromBlock *big.Int
		Value     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Value = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Transition *TransitionSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Transition.Contract.Balances(&_Transition.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xcbf1304d.
//
// Solidity: function balances(address , uint256 ) view returns(uint128 fromBlock, uint128 value)
func (_Transition *TransitionCallerSession) Balances(arg0 common.Address, arg1 *big.Int) (struct {
	FromBlock *big.Int
	Value     *big.Int
}, error) {
	return _Transition.Contract.Balances(&_Transition.CallOpts, arg0, arg1)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Transition *TransitionCaller) BytesVars(opts *bind.CallOpts, arg0 [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "bytesVars", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Transition *TransitionSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Transition.Contract.BytesVars(&_Transition.CallOpts, arg0)
}

// BytesVars is a free data retrieval call binding the contract method 0x62dd1d2a.
//
// Solidity: function bytesVars(bytes32 ) view returns(bytes32)
func (_Transition *TransitionCallerSession) BytesVars(arg0 [32]byte) ([32]byte, error) {
	return _Transition.Contract.BytesVars(&_Transition.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Transition *TransitionCaller) CurrentMiners(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "currentMiners", arg0)

	outstruct := new(struct {
		Value *big.Int
		Miner common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Value = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Miner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Transition *TransitionSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Transition.Contract.CurrentMiners(&_Transition.CallOpts, arg0)
}

// CurrentMiners is a free data retrieval call binding the contract method 0x1fd22364.
//
// Solidity: function currentMiners(uint256 ) view returns(uint256 value, address miner)
func (_Transition *TransitionCallerSession) CurrentMiners(arg0 *big.Int) (struct {
	Value *big.Int
	Miner common.Address
}, error) {
	return _Transition.Contract.CurrentMiners(&_Transition.CallOpts, arg0)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Transition *TransitionCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Transition *TransitionSession) Decimals() (uint8, error) {
	return _Transition.Contract.Decimals(&_Transition.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_Transition *TransitionCallerSession) Decimals() (uint8, error) {
	return _Transition.Contract.Decimals(&_Transition.CallOpts)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionCaller) DisputeIdByDisputeHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "disputeIdByDisputeHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.DisputeIdByDisputeHash(&_Transition.CallOpts, arg0)
}

// DisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xd01f4d9e.
//
// Solidity: function disputeIdByDisputeHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionCallerSession) DisputeIdByDisputeHash(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.DisputeIdByDisputeHash(&_Transition.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Transition *TransitionCaller) DisputesById(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "disputesById", arg0)

	outstruct := new(struct {
		Hash                [32]byte
		Tally               *big.Int
		Executed            bool
		DisputeVotePassed   bool
		IsPropFork          bool
		ReportedMiner       common.Address
		ReportingParty      common.Address
		ProposedForkAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Hash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Tally = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Executed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.DisputeVotePassed = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.IsPropFork = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.ReportedMiner = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.ReportingParty = *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	outstruct.ProposedForkAddress = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Transition *TransitionSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Transition.Contract.DisputesById(&_Transition.CallOpts, arg0)
}

// DisputesById is a free data retrieval call binding the contract method 0xdb085beb.
//
// Solidity: function disputesById(uint256 ) view returns(bytes32 hash, int256 tally, bool executed, bool disputeVotePassed, bool isPropFork, address reportedMiner, address reportingParty, address proposedForkAddress)
func (_Transition *TransitionCallerSession) DisputesById(arg0 *big.Int) (struct {
	Hash                [32]byte
	Tally               *big.Int
	Executed            bool
	DisputeVotePassed   bool
	IsPropFork          bool
	ReportedMiner       common.Address
	ReportingParty      common.Address
	ProposedForkAddress common.Address
}, error) {
	return _Transition.Contract.DisputesById(&_Transition.CallOpts, arg0)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Transition *TransitionCaller) GetAddressVars(opts *bind.CallOpts, _data [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getAddressVars", _data)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Transition *TransitionSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _Transition.Contract.GetAddressVars(&_Transition.CallOpts, _data)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_Transition *TransitionCallerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _Transition.Contract.GetAddressVars(&_Transition.CallOpts, _data)
}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Transition *TransitionCaller) GetAllDisputeVars(opts *bind.CallOpts, _disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getAllDisputeVars", _disputeId)

	if err != nil {
		return *new([32]byte), *new(bool), *new(bool), *new(bool), *new(common.Address), *new(common.Address), *new(common.Address), *new([9]*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)
	out2 := *abi.ConvertType(out[2], new(bool)).(*bool)
	out3 := *abi.ConvertType(out[3], new(bool)).(*bool)
	out4 := *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	out5 := *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	out6 := *abi.ConvertType(out[6], new(common.Address)).(*common.Address)
	out7 := *abi.ConvertType(out[7], new([9]*big.Int)).(*[9]*big.Int)
	out8 := *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, out5, out6, out7, out8, err

}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Transition *TransitionSession) GetAllDisputeVars(_disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	return _Transition.Contract.GetAllDisputeVars(&_Transition.CallOpts, _disputeId)
}

// GetAllDisputeVars is a free data retrieval call binding the contract method 0xaf0b1327.
//
// Solidity: function getAllDisputeVars(uint256 _disputeId) view returns(bytes32, bool, bool, bool, address, address, address, uint256[9], int256)
func (_Transition *TransitionCallerSession) GetAllDisputeVars(_disputeId *big.Int) ([32]byte, bool, bool, bool, common.Address, common.Address, common.Address, [9]*big.Int, *big.Int, error) {
	return _Transition.Contract.GetAllDisputeVars(&_Transition.CallOpts, _disputeId)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Transition *TransitionCaller) GetDisputeIdByDisputeHash(opts *bind.CallOpts, _hash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getDisputeIdByDisputeHash", _hash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Transition *TransitionSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetDisputeIdByDisputeHash(&_Transition.CallOpts, _hash)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_Transition *TransitionCallerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetDisputeIdByDisputeHash(&_Transition.CallOpts, _hash)
}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Transition *TransitionCaller) GetDisputeUintVars(opts *bind.CallOpts, _disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getDisputeUintVars", _disputeId, _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Transition *TransitionSession) GetDisputeUintVars(_disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetDisputeUintVars(&_Transition.CallOpts, _disputeId, _data)
}

// GetDisputeUintVars is a free data retrieval call binding the contract method 0x7f6fd5d9.
//
// Solidity: function getDisputeUintVars(uint256 _disputeId, bytes32 _data) view returns(uint256)
func (_Transition *TransitionCallerSession) GetDisputeUintVars(_disputeId *big.Int, _data [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetDisputeUintVars(&_Transition.CallOpts, _disputeId, _data)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Transition *TransitionCaller) GetLastNewValueById(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, bool, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getLastNewValueById", _requestId)

	if err != nil {
		return *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Transition *TransitionSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _Transition.Contract.GetLastNewValueById(&_Transition.CallOpts, _requestId)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_Transition *TransitionCallerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _Transition.Contract.GetLastNewValueById(&_Transition.CallOpts, _requestId)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Transition *TransitionCaller) GetNewCurrentVariables(opts *bind.CallOpts) (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getNewCurrentVariables")

	outstruct := new(struct {
		C    [32]byte
		R    [5]*big.Int
		Diff *big.Int
		Tip  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.C = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.R = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.Diff = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Tip = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Transition *TransitionSession) GetNewCurrentVariables() (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	return _Transition.Contract.GetNewCurrentVariables(&_Transition.CallOpts)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _diff, uint256 _tip)
func (_Transition *TransitionCallerSession) GetNewCurrentVariables() (struct {
	C    [32]byte
	R    [5]*big.Int
	Diff *big.Int
	Tip  *big.Int
}, error) {
	return _Transition.Contract.GetNewCurrentVariables(&_Transition.CallOpts)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Transition *TransitionCaller) GetNewValueCountbyRequestId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getNewValueCountbyRequestId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Transition *TransitionSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _Transition.Contract.GetNewValueCountbyRequestId(&_Transition.CallOpts, _requestId)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_Transition *TransitionCallerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _Transition.Contract.GetNewValueCountbyRequestId(&_Transition.CallOpts, _requestId)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Transition *TransitionCaller) GetTimestampbyRequestIDandIndex(opts *bind.CallOpts, _requestId *big.Int, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getTimestampbyRequestIDandIndex", _requestId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Transition *TransitionSession) GetTimestampbyRequestIDandIndex(_requestId *big.Int, _index *big.Int) (*big.Int, error) {
	return _Transition.Contract.GetTimestampbyRequestIDandIndex(&_Transition.CallOpts, _requestId, _index)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestId, uint256 _index) view returns(uint256)
func (_Transition *TransitionCallerSession) GetTimestampbyRequestIDandIndex(_requestId *big.Int, _index *big.Int) (*big.Int, error) {
	return _Transition.Contract.GetTimestampbyRequestIDandIndex(&_Transition.CallOpts, _requestId, _index)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Transition *TransitionCaller) GetUintVar(opts *bind.CallOpts, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "getUintVar", _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Transition *TransitionSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetUintVar(&_Transition.CallOpts, _data)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_Transition *TransitionCallerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _Transition.Contract.GetUintVar(&_Transition.CallOpts, _data)
}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Transition *TransitionCaller) IsMigrated(opts *bind.CallOpts, _addy common.Address) (bool, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "isMigrated", _addy)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Transition *TransitionSession) IsMigrated(_addy common.Address) (bool, error) {
	return _Transition.Contract.IsMigrated(&_Transition.CallOpts, _addy)
}

// IsMigrated is a free data retrieval call binding the contract method 0x58421ed2.
//
// Solidity: function isMigrated(address _addy) view returns(bool)
func (_Transition *TransitionCallerSession) IsMigrated(_addy common.Address) (bool, error) {
	return _Transition.Contract.IsMigrated(&_Transition.CallOpts, _addy)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Transition *TransitionCaller) Migrated(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "migrated", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Transition *TransitionSession) Migrated(arg0 common.Address) (bool, error) {
	return _Transition.Contract.Migrated(&_Transition.CallOpts, arg0)
}

// Migrated is a free data retrieval call binding the contract method 0x4ba0a5ee.
//
// Solidity: function migrated(address ) view returns(bool)
func (_Transition *TransitionCallerSession) Migrated(arg0 common.Address) (bool, error) {
	return _Transition.Contract.Migrated(&_Transition.CallOpts, arg0)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Transition *TransitionCaller) MinersByChallenge(opts *bind.CallOpts, arg0 [32]byte, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "minersByChallenge", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Transition *TransitionSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Transition.Contract.MinersByChallenge(&_Transition.CallOpts, arg0, arg1)
}

// MinersByChallenge is a free data retrieval call binding the contract method 0x48b18e54.
//
// Solidity: function minersByChallenge(bytes32 , address ) view returns(bool)
func (_Transition *TransitionCallerSession) MinersByChallenge(arg0 [32]byte, arg1 common.Address) (bool, error) {
	return _Transition.Contract.MinersByChallenge(&_Transition.CallOpts, arg0, arg1)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Transition *TransitionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Transition *TransitionSession) Name() (string, error) {
	return _Transition.Contract.Name(&_Transition.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_Transition *TransitionCallerSession) Name() (string, error) {
	return _Transition.Contract.Name(&_Transition.CallOpts)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Transition *TransitionCaller) NewValueTimestamps(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "newValueTimestamps", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Transition *TransitionSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Transition.Contract.NewValueTimestamps(&_Transition.CallOpts, arg0)
}

// NewValueTimestamps is a free data retrieval call binding the contract method 0x438c0aa3.
//
// Solidity: function newValueTimestamps(uint256 ) view returns(uint256)
func (_Transition *TransitionCallerSession) NewValueTimestamps(arg0 *big.Int) (*big.Int, error) {
	return _Transition.Contract.NewValueTimestamps(&_Transition.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionCaller) RequestIdByQueryHash(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "requestIdByQueryHash", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.RequestIdByQueryHash(&_Transition.CallOpts, arg0)
}

// RequestIdByQueryHash is a free data retrieval call binding the contract method 0x5700242c.
//
// Solidity: function requestIdByQueryHash(bytes32 ) view returns(uint256)
func (_Transition *TransitionCallerSession) RequestIdByQueryHash(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.RequestIdByQueryHash(&_Transition.CallOpts, arg0)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Transition *TransitionCaller) RetrieveData(opts *bind.CallOpts, _requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "retrieveData", _requestId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Transition *TransitionSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _Transition.Contract.RetrieveData(&_Transition.CallOpts, _requestId, _timestamp)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_Transition *TransitionCallerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _Transition.Contract.RetrieveData(&_Transition.CallOpts, _requestId, _timestamp)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Transition *TransitionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Transition *TransitionSession) Symbol() (string, error) {
	return _Transition.Contract.Symbol(&_Transition.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_Transition *TransitionCallerSession) Symbol() (string, error) {
	return _Transition.Contract.Symbol(&_Transition.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Transition *TransitionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Transition *TransitionSession) TotalSupply() (*big.Int, error) {
	return _Transition.Contract.TotalSupply(&_Transition.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Transition *TransitionCallerSession) TotalSupply() (*big.Int, error) {
	return _Transition.Contract.TotalSupply(&_Transition.CallOpts)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Transition *TransitionCaller) Uints(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Transition.contract.Call(opts, &out, "uints", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Transition *TransitionSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.Uints(&_Transition.CallOpts, arg0)
}

// Uints is a free data retrieval call binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) view returns(uint256)
func (_Transition *TransitionCallerSession) Uints(arg0 [32]byte) (*big.Int, error) {
	return _Transition.Contract.Uints(&_Transition.CallOpts, arg0)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Transition *TransitionTransactor) Init(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transition.contract.Transact(opts, "init")
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Transition *TransitionSession) Init() (*types.Transaction, error) {
	return _Transition.Contract.Init(&_Transition.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Transition *TransitionTransactorSession) Init() (*types.Transaction, error) {
	return _Transition.Contract.Init(&_Transition.TransactOpts)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Transition *TransitionTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Transition.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Transition *TransitionSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Transition.Contract.Fallback(&_Transition.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Transition *TransitionTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Transition.Contract.Fallback(&_Transition.TransactOpts, calldata)
}
