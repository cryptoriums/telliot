// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tellorX_governance

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GovernanceMetaData contains all meta data concerning the Governance contract.
var GovernanceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"}],\"name\":\"DelegateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"NewDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"_function\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumGovernance.VoteResult\",\"name\":\"_result\",\"type\":\"uint8\"}],\"name\":\"VoteExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumGovernance.VoteResult\",\"name\":\"_result\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"VoteTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_supports\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_voteWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_invalidQuery\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"beginDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"delegateOfAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"executeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getDelegateInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getOpenDisputesOnId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getVoteInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[8]\",\"name\":\"\",\"type\":\"uint256[8]\"},{\"internalType\":\"bool[2]\",\"name\":\"\",\"type\":\"bool[2]\"},{\"internalType\":\"enumGovernance.VoteResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getVoteRounds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isApprovedGovernanceContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"isFunctionApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_function\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"proposeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setApprovedFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMinDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supports\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_invalidQuery\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addys\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supports\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_invalidQuery\",\"type\":\"bool\"}],\"name\":\"voteFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"1f379acc": "beginDispute(bytes32,uint256)",
		"5c19a95c": "delegate(address)",
		"b3427a2b": "delegateOfAt(address,uint256)",
		"a7c438bc": "didVote(uint256,address)",
		"b9ce896b": "disputeFee()",
		"f98a4eca": "executeVote(uint256)",
		"10c67e1c": "getDelegateInfo(address)",
		"6169c308": "getDisputeInfo(uint256)",
		"0e1596ef": "getOpenDisputesOnId(bytes32)",
		"e7b3387c": "getVoteCount()",
		"8d824273": "getVoteInfo(uint256)",
		"248638e5": "getVoteRounds(bytes32)",
		"fd3171b2": "isApprovedGovernanceContract(address)",
		"2d2506a9": "isFunctionApproved(bytes4)",
		"0b5e95c3": "proposeVote(address,bytes4,bytes,uint256)",
		"e48d4b3b": "setApprovedFunction(bytes4,bool)",
		"4d318b0e": "tallyVotes(uint256)",
		"90e5b235": "updateMinDisputeFee()",
		"fc735e99": "verify()",
		"df133bca": "vote(uint256,bool,bool)",
		"c6384071": "voteCount()",
		"e5d91314": "voteFor(address[],uint256,bool,bool)",
	},
	Bin: "",
}

// GovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use GovernanceMetaData.ABI instead.
var GovernanceABI = GovernanceMetaData.ABI

// Deprecated: Use GovernanceMetaData.Sigs instead.
// GovernanceFuncSigs maps the 4-byte function signature to its string representation.
var GovernanceFuncSigs = GovernanceMetaData.Sigs

// GovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GovernanceMetaData.Bin instead.
var GovernanceBin = GovernanceMetaData.Bin

// DeployGovernance deploys a new Ethereum contract, binding an instance of Governance to it.
func DeployGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Governance, error) {
	parsed, err := GovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Governance{GovernanceCaller: GovernanceCaller{contract: contract}, GovernanceTransactor: GovernanceTransactor{contract: contract}, GovernanceFilterer: GovernanceFilterer{contract: contract}}, nil
}

// Governance is an auto generated Go binding around an Ethereum contract.
type Governance struct {
	GovernanceCaller     // Read-only binding to the contract
	GovernanceTransactor // Write-only binding to the contract
	GovernanceFilterer   // Log filterer for contract events
}

// GovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type GovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GovernanceSession struct {
	Contract     *Governance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GovernanceCallerSession struct {
	Contract *GovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// GovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GovernanceTransactorSession struct {
	Contract     *GovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// GovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type GovernanceRaw struct {
	Contract *Governance // Generic contract binding to access the raw methods on
}

// GovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GovernanceCallerRaw struct {
	Contract *GovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// GovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GovernanceTransactorRaw struct {
	Contract *GovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGovernance creates a new instance of Governance, bound to a specific deployed contract.
func NewGovernance(address common.Address, backend bind.ContractBackend) (*Governance, error) {
	contract, err := bindGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Governance{GovernanceCaller: GovernanceCaller{contract: contract}, GovernanceTransactor: GovernanceTransactor{contract: contract}, GovernanceFilterer: GovernanceFilterer{contract: contract}}, nil
}

// NewGovernanceCaller creates a new read-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceCaller(address common.Address, caller bind.ContractCaller) (*GovernanceCaller, error) {
	contract, err := bindGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceCaller{contract: contract}, nil
}

// NewGovernanceTransactor creates a new write-only instance of Governance, bound to a specific deployed contract.
func NewGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*GovernanceTransactor, error) {
	contract, err := bindGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GovernanceTransactor{contract: contract}, nil
}

// NewGovernanceFilterer creates a new log filterer instance of Governance, bound to a specific deployed contract.
func NewGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*GovernanceFilterer, error) {
	contract, err := bindGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GovernanceFilterer{contract: contract}, nil
}

// bindGovernance binds a generic wrapper to an already deployed contract.
func bindGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GovernanceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.GovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.GovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Governance *GovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Governance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Governance *GovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Governance *GovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Governance.Contract.contract.Transact(opts, method, params...)
}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_Governance *GovernanceCaller) DelegateOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "delegateOfAt", _user, _blockNumber)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_Governance *GovernanceSession) DelegateOfAt(_user common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _Governance.Contract.DelegateOfAt(&_Governance.CallOpts, _user, _blockNumber)
}

// DelegateOfAt is a free data retrieval call binding the contract method 0xb3427a2b.
//
// Solidity: function delegateOfAt(address _user, uint256 _blockNumber) view returns(address)
func (_Governance *GovernanceCallerSession) DelegateOfAt(_user common.Address, _blockNumber *big.Int) (common.Address, error) {
	return _Governance.Contract.DelegateOfAt(&_Governance.CallOpts, _user, _blockNumber)
}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_Governance *GovernanceCaller) DidVote(opts *bind.CallOpts, _disputeId *big.Int, _voter common.Address) (bool, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "didVote", _disputeId, _voter)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_Governance *GovernanceSession) DidVote(_disputeId *big.Int, _voter common.Address) (bool, error) {
	return _Governance.Contract.DidVote(&_Governance.CallOpts, _disputeId, _voter)
}

// DidVote is a free data retrieval call binding the contract method 0xa7c438bc.
//
// Solidity: function didVote(uint256 _disputeId, address _voter) view returns(bool)
func (_Governance *GovernanceCallerSession) DidVote(_disputeId *big.Int, _voter common.Address) (bool, error) {
	return _Governance.Contract.DidVote(&_Governance.CallOpts, _disputeId, _voter)
}

// DisputeFee is a free data retrieval call binding the contract method 0xb9ce896b.
//
// Solidity: function disputeFee() view returns(uint256)
func (_Governance *GovernanceCaller) DisputeFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "disputeFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DisputeFee is a free data retrieval call binding the contract method 0xb9ce896b.
//
// Solidity: function disputeFee() view returns(uint256)
func (_Governance *GovernanceSession) DisputeFee() (*big.Int, error) {
	return _Governance.Contract.DisputeFee(&_Governance.CallOpts)
}

// DisputeFee is a free data retrieval call binding the contract method 0xb9ce896b.
//
// Solidity: function disputeFee() view returns(uint256)
func (_Governance *GovernanceCallerSession) DisputeFee() (*big.Int, error) {
	return _Governance.Contract.DisputeFee(&_Governance.CallOpts)
}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_Governance *GovernanceCaller) GetDelegateInfo(opts *bind.CallOpts, _holder common.Address) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getDelegateInfo", _holder)

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_Governance *GovernanceSession) GetDelegateInfo(_holder common.Address) (common.Address, *big.Int, error) {
	return _Governance.Contract.GetDelegateInfo(&_Governance.CallOpts, _holder)
}

// GetDelegateInfo is a free data retrieval call binding the contract method 0x10c67e1c.
//
// Solidity: function getDelegateInfo(address _holder) view returns(address, uint256)
func (_Governance *GovernanceCallerSession) GetDelegateInfo(_holder common.Address) (common.Address, *big.Int, error) {
	return _Governance.Contract.GetDelegateInfo(&_Governance.CallOpts, _holder)
}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(bytes32, uint256, bytes, address)
func (_Governance *GovernanceCaller) GetDisputeInfo(opts *bind.CallOpts, _disputeId *big.Int) ([32]byte, *big.Int, []byte, common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getDisputeInfo", _disputeId)

	if err != nil {
		return *new([32]byte), *new(*big.Int), *new([]byte), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	out3 := *abi.ConvertType(out[3], new(common.Address)).(*common.Address)

	return out0, out1, out2, out3, err

}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(bytes32, uint256, bytes, address)
func (_Governance *GovernanceSession) GetDisputeInfo(_disputeId *big.Int) ([32]byte, *big.Int, []byte, common.Address, error) {
	return _Governance.Contract.GetDisputeInfo(&_Governance.CallOpts, _disputeId)
}

// GetDisputeInfo is a free data retrieval call binding the contract method 0x6169c308.
//
// Solidity: function getDisputeInfo(uint256 _disputeId) view returns(bytes32, uint256, bytes, address)
func (_Governance *GovernanceCallerSession) GetDisputeInfo(_disputeId *big.Int) ([32]byte, *big.Int, []byte, common.Address, error) {
	return _Governance.Contract.GetDisputeInfo(&_Governance.CallOpts, _disputeId)
}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x0e1596ef.
//
// Solidity: function getOpenDisputesOnId(bytes32 _queryId) view returns(uint256)
func (_Governance *GovernanceCaller) GetOpenDisputesOnId(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getOpenDisputesOnId", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x0e1596ef.
//
// Solidity: function getOpenDisputesOnId(bytes32 _queryId) view returns(uint256)
func (_Governance *GovernanceSession) GetOpenDisputesOnId(_queryId [32]byte) (*big.Int, error) {
	return _Governance.Contract.GetOpenDisputesOnId(&_Governance.CallOpts, _queryId)
}

// GetOpenDisputesOnId is a free data retrieval call binding the contract method 0x0e1596ef.
//
// Solidity: function getOpenDisputesOnId(bytes32 _queryId) view returns(uint256)
func (_Governance *GovernanceCallerSession) GetOpenDisputesOnId(_queryId [32]byte) (*big.Int, error) {
	return _Governance.Contract.GetOpenDisputesOnId(&_Governance.CallOpts, _queryId)
}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_Governance *GovernanceCaller) GetVoteCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getVoteCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_Governance *GovernanceSession) GetVoteCount() (*big.Int, error) {
	return _Governance.Contract.GetVoteCount(&_Governance.CallOpts)
}

// GetVoteCount is a free data retrieval call binding the contract method 0xe7b3387c.
//
// Solidity: function getVoteCount() view returns(uint256)
func (_Governance *GovernanceCallerSession) GetVoteCount() (*big.Int, error) {
	return _Governance.Contract.GetVoteCount(&_Governance.CallOpts)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_Governance *GovernanceCaller) GetVoteInfo(opts *bind.CallOpts, _disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getVoteInfo", _disputeId)

	if err != nil {
		return *new([32]byte), *new([8]*big.Int), *new([2]bool), *new(uint8), *new([]byte), *new([4]byte), *new([2]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new([8]*big.Int)).(*[8]*big.Int)
	out2 := *abi.ConvertType(out[2], new([2]bool)).(*[2]bool)
	out3 := *abi.ConvertType(out[3], new(uint8)).(*uint8)
	out4 := *abi.ConvertType(out[4], new([]byte)).(*[]byte)
	out5 := *abi.ConvertType(out[5], new([4]byte)).(*[4]byte)
	out6 := *abi.ConvertType(out[6], new([2]common.Address)).(*[2]common.Address)

	return out0, out1, out2, out3, out4, out5, out6, err

}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_Governance *GovernanceSession) GetVoteInfo(_disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	return _Governance.Contract.GetVoteInfo(&_Governance.CallOpts, _disputeId)
}

// GetVoteInfo is a free data retrieval call binding the contract method 0x8d824273.
//
// Solidity: function getVoteInfo(uint256 _disputeId) view returns(bytes32, uint256[8], bool[2], uint8, bytes, bytes4, address[2])
func (_Governance *GovernanceCallerSession) GetVoteInfo(_disputeId *big.Int) ([32]byte, [8]*big.Int, [2]bool, uint8, []byte, [4]byte, [2]common.Address, error) {
	return _Governance.Contract.GetVoteInfo(&_Governance.CallOpts, _disputeId)
}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_Governance *GovernanceCaller) GetVoteRounds(opts *bind.CallOpts, _hash [32]byte) ([]*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "getVoteRounds", _hash)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_Governance *GovernanceSession) GetVoteRounds(_hash [32]byte) ([]*big.Int, error) {
	return _Governance.Contract.GetVoteRounds(&_Governance.CallOpts, _hash)
}

// GetVoteRounds is a free data retrieval call binding the contract method 0x248638e5.
//
// Solidity: function getVoteRounds(bytes32 _hash) view returns(uint256[])
func (_Governance *GovernanceCallerSession) GetVoteRounds(_hash [32]byte) ([]*big.Int, error) {
	return _Governance.Contract.GetVoteRounds(&_Governance.CallOpts, _hash)
}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_Governance *GovernanceCaller) IsFunctionApproved(opts *bind.CallOpts, _func [4]byte) (bool, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "isFunctionApproved", _func)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_Governance *GovernanceSession) IsFunctionApproved(_func [4]byte) (bool, error) {
	return _Governance.Contract.IsFunctionApproved(&_Governance.CallOpts, _func)
}

// IsFunctionApproved is a free data retrieval call binding the contract method 0x2d2506a9.
//
// Solidity: function isFunctionApproved(bytes4 _func) view returns(bool)
func (_Governance *GovernanceCallerSession) IsFunctionApproved(_func [4]byte) (bool, error) {
	return _Governance.Contract.IsFunctionApproved(&_Governance.CallOpts, _func)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Governance *GovernanceCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Governance *GovernanceSession) Verify() (*big.Int, error) {
	return _Governance.Contract.Verify(&_Governance.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_Governance *GovernanceCallerSession) Verify() (*big.Int, error) {
	return _Governance.Contract.Verify(&_Governance.CallOpts)
}

// VoteCount is a free data retrieval call binding the contract method 0xc6384071.
//
// Solidity: function voteCount() view returns(uint256)
func (_Governance *GovernanceCaller) VoteCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Governance.contract.Call(opts, &out, "voteCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VoteCount is a free data retrieval call binding the contract method 0xc6384071.
//
// Solidity: function voteCount() view returns(uint256)
func (_Governance *GovernanceSession) VoteCount() (*big.Int, error) {
	return _Governance.Contract.VoteCount(&_Governance.CallOpts)
}

// VoteCount is a free data retrieval call binding the contract method 0xc6384071.
//
// Solidity: function voteCount() view returns(uint256)
func (_Governance *GovernanceCallerSession) VoteCount() (*big.Int, error) {
	return _Governance.Contract.VoteCount(&_Governance.CallOpts)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_Governance *GovernanceTransactor) BeginDispute(opts *bind.TransactOpts, _queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "beginDispute", _queryId, _timestamp)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_Governance *GovernanceSession) BeginDispute(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.BeginDispute(&_Governance.TransactOpts, _queryId, _timestamp)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x1f379acc.
//
// Solidity: function beginDispute(bytes32 _queryId, uint256 _timestamp) returns()
func (_Governance *GovernanceTransactorSession) BeginDispute(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.BeginDispute(&_Governance.TransactOpts, _queryId, _timestamp)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_Governance *GovernanceTransactor) Delegate(opts *bind.TransactOpts, _delegate common.Address) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "delegate", _delegate)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_Governance *GovernanceSession) Delegate(_delegate common.Address) (*types.Transaction, error) {
	return _Governance.Contract.Delegate(&_Governance.TransactOpts, _delegate)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address _delegate) returns()
func (_Governance *GovernanceTransactorSession) Delegate(_delegate common.Address) (*types.Transaction, error) {
	return _Governance.Contract.Delegate(&_Governance.TransactOpts, _delegate)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_Governance *GovernanceTransactor) ExecuteVote(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "executeVote", _disputeId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_Governance *GovernanceSession) ExecuteVote(_disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.ExecuteVote(&_Governance.TransactOpts, _disputeId)
}

// ExecuteVote is a paid mutator transaction binding the contract method 0xf98a4eca.
//
// Solidity: function executeVote(uint256 _disputeId) returns()
func (_Governance *GovernanceTransactorSession) ExecuteVote(_disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.ExecuteVote(&_Governance.TransactOpts, _disputeId)
}

// IsApprovedGovernanceContract is a paid mutator transaction binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) returns(bool)
func (_Governance *GovernanceTransactor) IsApprovedGovernanceContract(opts *bind.TransactOpts, _contract common.Address) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "isApprovedGovernanceContract", _contract)
}

// IsApprovedGovernanceContract is a paid mutator transaction binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) returns(bool)
func (_Governance *GovernanceSession) IsApprovedGovernanceContract(_contract common.Address) (*types.Transaction, error) {
	return _Governance.Contract.IsApprovedGovernanceContract(&_Governance.TransactOpts, _contract)
}

// IsApprovedGovernanceContract is a paid mutator transaction binding the contract method 0xfd3171b2.
//
// Solidity: function isApprovedGovernanceContract(address _contract) returns(bool)
func (_Governance *GovernanceTransactorSession) IsApprovedGovernanceContract(_contract common.Address) (*types.Transaction, error) {
	return _Governance.Contract.IsApprovedGovernanceContract(&_Governance.TransactOpts, _contract)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_Governance *GovernanceTransactor) ProposeVote(opts *bind.TransactOpts, _contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "proposeVote", _contract, _function, _data, _timestamp)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_Governance *GovernanceSession) ProposeVote(_contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.ProposeVote(&_Governance.TransactOpts, _contract, _function, _data, _timestamp)
}

// ProposeVote is a paid mutator transaction binding the contract method 0x0b5e95c3.
//
// Solidity: function proposeVote(address _contract, bytes4 _function, bytes _data, uint256 _timestamp) returns()
func (_Governance *GovernanceTransactorSession) ProposeVote(_contract common.Address, _function [4]byte, _data []byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.ProposeVote(&_Governance.TransactOpts, _contract, _function, _data, _timestamp)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_Governance *GovernanceTransactor) SetApprovedFunction(opts *bind.TransactOpts, _func [4]byte, _val bool) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "setApprovedFunction", _func, _val)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_Governance *GovernanceSession) SetApprovedFunction(_func [4]byte, _val bool) (*types.Transaction, error) {
	return _Governance.Contract.SetApprovedFunction(&_Governance.TransactOpts, _func, _val)
}

// SetApprovedFunction is a paid mutator transaction binding the contract method 0xe48d4b3b.
//
// Solidity: function setApprovedFunction(bytes4 _func, bool _val) returns()
func (_Governance *GovernanceTransactorSession) SetApprovedFunction(_func [4]byte, _val bool) (*types.Transaction, error) {
	return _Governance.Contract.SetApprovedFunction(&_Governance.TransactOpts, _func, _val)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_Governance *GovernanceTransactor) TallyVotes(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "tallyVotes", _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_Governance *GovernanceSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.TallyVotes(&_Governance.TransactOpts, _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_Governance *GovernanceTransactorSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _Governance.Contract.TallyVotes(&_Governance.TransactOpts, _disputeId)
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_Governance *GovernanceTransactor) UpdateMinDisputeFee(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "updateMinDisputeFee")
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_Governance *GovernanceSession) UpdateMinDisputeFee() (*types.Transaction, error) {
	return _Governance.Contract.UpdateMinDisputeFee(&_Governance.TransactOpts)
}

// UpdateMinDisputeFee is a paid mutator transaction binding the contract method 0x90e5b235.
//
// Solidity: function updateMinDisputeFee() returns()
func (_Governance *GovernanceTransactorSession) UpdateMinDisputeFee() (*types.Transaction, error) {
	return _Governance.Contract.UpdateMinDisputeFee(&_Governance.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceTransactor) Vote(opts *bind.TransactOpts, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "vote", _disputeId, _supports, _invalidQuery)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceSession) Vote(_disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.Contract.Vote(&_Governance.TransactOpts, _disputeId, _supports, _invalidQuery)
}

// Vote is a paid mutator transaction binding the contract method 0xdf133bca.
//
// Solidity: function vote(uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceTransactorSession) Vote(_disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.Contract.Vote(&_Governance.TransactOpts, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceTransactor) VoteFor(opts *bind.TransactOpts, _addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.contract.Transact(opts, "voteFor", _addys, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceSession) VoteFor(_addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.Contract.VoteFor(&_Governance.TransactOpts, _addys, _disputeId, _supports, _invalidQuery)
}

// VoteFor is a paid mutator transaction binding the contract method 0xe5d91314.
//
// Solidity: function voteFor(address[] _addys, uint256 _disputeId, bool _supports, bool _invalidQuery) returns()
func (_Governance *GovernanceTransactorSession) VoteFor(_addys []common.Address, _disputeId *big.Int, _supports bool, _invalidQuery bool) (*types.Transaction, error) {
	return _Governance.Contract.VoteFor(&_Governance.TransactOpts, _addys, _disputeId, _supports, _invalidQuery)
}

// GovernanceDelegateSetIterator is returned from FilterDelegateSet and is used to iterate over the raw logs and unpacked data for DelegateSet events raised by the Governance contract.
type GovernanceDelegateSetIterator struct {
	Event *GovernanceDelegateSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceDelegateSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceDelegateSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceDelegateSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceDelegateSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceDelegateSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceDelegateSet represents a DelegateSet event raised by the Governance contract.
type GovernanceDelegateSet struct {
	Delegate  common.Address
	Delegator common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDelegateSet is a free log retrieval operation binding the contract event 0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981.
//
// Solidity: event DelegateSet(address _delegate, address _delegator)
func (_Governance *GovernanceFilterer) FilterDelegateSet(opts *bind.FilterOpts) (*GovernanceDelegateSetIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "DelegateSet")
	if err != nil {
		return nil, err
	}
	return &GovernanceDelegateSetIterator{contract: _Governance.contract, event: "DelegateSet", logs: logs, sub: sub}, nil
}

// WatchDelegateSet is a free log subscription operation binding the contract event 0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981.
//
// Solidity: event DelegateSet(address _delegate, address _delegator)
func (_Governance *GovernanceFilterer) WatchDelegateSet(opts *bind.WatchOpts, sink chan<- *GovernanceDelegateSet) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "DelegateSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceDelegateSet)
				if err := _Governance.contract.UnpackLog(event, "DelegateSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateSet is a log parse operation binding the contract event 0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981.
//
// Solidity: event DelegateSet(address _delegate, address _delegator)
func (_Governance *GovernanceFilterer) ParseDelegateSet(log types.Log) (*GovernanceDelegateSet, error) {
	event := new(GovernanceDelegateSet)
	if err := _Governance.contract.UnpackLog(event, "DelegateSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernanceNewDisputeIterator is returned from FilterNewDispute and is used to iterate over the raw logs and unpacked data for NewDispute events raised by the Governance contract.
type GovernanceNewDisputeIterator struct {
	Event *GovernanceNewDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceNewDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceNewDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceNewDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceNewDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceNewDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceNewDispute represents a NewDispute event raised by the Governance contract.
type GovernanceNewDispute struct {
	DisputeId *big.Int
	QueryId   [32]byte
	Timestamp *big.Int
	Reporter  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewDispute is a free log retrieval operation binding the contract event 0x12b7317353cd7caa8eae8057464e3de356c1429d814fb3421797eccb19043044.
//
// Solidity: event NewDispute(uint256 _disputeId, bytes32 _queryId, uint256 _timestamp, address _reporter)
func (_Governance *GovernanceFilterer) FilterNewDispute(opts *bind.FilterOpts) (*GovernanceNewDisputeIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "NewDispute")
	if err != nil {
		return nil, err
	}
	return &GovernanceNewDisputeIterator{contract: _Governance.contract, event: "NewDispute", logs: logs, sub: sub}, nil
}

// WatchNewDispute is a free log subscription operation binding the contract event 0x12b7317353cd7caa8eae8057464e3de356c1429d814fb3421797eccb19043044.
//
// Solidity: event NewDispute(uint256 _disputeId, bytes32 _queryId, uint256 _timestamp, address _reporter)
func (_Governance *GovernanceFilterer) WatchNewDispute(opts *bind.WatchOpts, sink chan<- *GovernanceNewDispute) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "NewDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceNewDispute)
				if err := _Governance.contract.UnpackLog(event, "NewDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewDispute is a log parse operation binding the contract event 0x12b7317353cd7caa8eae8057464e3de356c1429d814fb3421797eccb19043044.
//
// Solidity: event NewDispute(uint256 _disputeId, bytes32 _queryId, uint256 _timestamp, address _reporter)
func (_Governance *GovernanceFilterer) ParseNewDispute(log types.Log) (*GovernanceNewDispute, error) {
	event := new(GovernanceNewDispute)
	if err := _Governance.contract.UnpackLog(event, "NewDispute", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernanceNewVoteIterator is returned from FilterNewVote and is used to iterate over the raw logs and unpacked data for NewVote events raised by the Governance contract.
type GovernanceNewVoteIterator struct {
	Event *GovernanceNewVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceNewVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceNewVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceNewVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceNewVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceNewVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceNewVote represents a NewVote event raised by the Governance contract.
type GovernanceNewVote struct {
	Contract  common.Address
	Function  [4]byte
	Data      []byte
	DisputeId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewVote is a free log retrieval operation binding the contract event 0x03cd1db94c84fbf802bb289f9fec190fc43fcb105eee5554433e8d642ceab118.
//
// Solidity: event NewVote(address _contract, bytes4 _function, bytes _data, uint256 _disputeId)
func (_Governance *GovernanceFilterer) FilterNewVote(opts *bind.FilterOpts) (*GovernanceNewVoteIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "NewVote")
	if err != nil {
		return nil, err
	}
	return &GovernanceNewVoteIterator{contract: _Governance.contract, event: "NewVote", logs: logs, sub: sub}, nil
}

// WatchNewVote is a free log subscription operation binding the contract event 0x03cd1db94c84fbf802bb289f9fec190fc43fcb105eee5554433e8d642ceab118.
//
// Solidity: event NewVote(address _contract, bytes4 _function, bytes _data, uint256 _disputeId)
func (_Governance *GovernanceFilterer) WatchNewVote(opts *bind.WatchOpts, sink chan<- *GovernanceNewVote) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "NewVote")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceNewVote)
				if err := _Governance.contract.UnpackLog(event, "NewVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewVote is a log parse operation binding the contract event 0x03cd1db94c84fbf802bb289f9fec190fc43fcb105eee5554433e8d642ceab118.
//
// Solidity: event NewVote(address _contract, bytes4 _function, bytes _data, uint256 _disputeId)
func (_Governance *GovernanceFilterer) ParseNewVote(log types.Log) (*GovernanceNewVote, error) {
	event := new(GovernanceNewVote)
	if err := _Governance.contract.UnpackLog(event, "NewVote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernanceVoteExecutedIterator is returned from FilterVoteExecuted and is used to iterate over the raw logs and unpacked data for VoteExecuted events raised by the Governance contract.
type GovernanceVoteExecutedIterator struct {
	Event *GovernanceVoteExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceVoteExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceVoteExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceVoteExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceVoteExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceVoteExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceVoteExecuted represents a VoteExecuted event raised by the Governance contract.
type GovernanceVoteExecuted struct {
	DisputeId *big.Int
	Result    uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVoteExecuted is a free log retrieval operation binding the contract event 0x40d231bf91823121de9e1c012d95f835ea5684dc1d93360d9510a30543345da4.
//
// Solidity: event VoteExecuted(uint256 _disputeId, uint8 _result)
func (_Governance *GovernanceFilterer) FilterVoteExecuted(opts *bind.FilterOpts) (*GovernanceVoteExecutedIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "VoteExecuted")
	if err != nil {
		return nil, err
	}
	return &GovernanceVoteExecutedIterator{contract: _Governance.contract, event: "VoteExecuted", logs: logs, sub: sub}, nil
}

// WatchVoteExecuted is a free log subscription operation binding the contract event 0x40d231bf91823121de9e1c012d95f835ea5684dc1d93360d9510a30543345da4.
//
// Solidity: event VoteExecuted(uint256 _disputeId, uint8 _result)
func (_Governance *GovernanceFilterer) WatchVoteExecuted(opts *bind.WatchOpts, sink chan<- *GovernanceVoteExecuted) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "VoteExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceVoteExecuted)
				if err := _Governance.contract.UnpackLog(event, "VoteExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteExecuted is a log parse operation binding the contract event 0x40d231bf91823121de9e1c012d95f835ea5684dc1d93360d9510a30543345da4.
//
// Solidity: event VoteExecuted(uint256 _disputeId, uint8 _result)
func (_Governance *GovernanceFilterer) ParseVoteExecuted(log types.Log) (*GovernanceVoteExecuted, error) {
	event := new(GovernanceVoteExecuted)
	if err := _Governance.contract.UnpackLog(event, "VoteExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernanceVoteTalliedIterator is returned from FilterVoteTallied and is used to iterate over the raw logs and unpacked data for VoteTallied events raised by the Governance contract.
type GovernanceVoteTalliedIterator struct {
	Event *GovernanceVoteTallied // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceVoteTalliedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceVoteTallied)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceVoteTallied)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceVoteTalliedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceVoteTalliedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceVoteTallied represents a VoteTallied event raised by the Governance contract.
type GovernanceVoteTallied struct {
	DisputeId *big.Int
	Result    uint8
	Initiator common.Address
	Reporter  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVoteTallied is a free log retrieval operation binding the contract event 0xa2d4e500801849d40ad00f0f12ba92a5263f83ec68946e647be95cfbe581c7b6.
//
// Solidity: event VoteTallied(uint256 _disputeId, uint8 _result, address _initiator, address _reporter)
func (_Governance *GovernanceFilterer) FilterVoteTallied(opts *bind.FilterOpts) (*GovernanceVoteTalliedIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "VoteTallied")
	if err != nil {
		return nil, err
	}
	return &GovernanceVoteTalliedIterator{contract: _Governance.contract, event: "VoteTallied", logs: logs, sub: sub}, nil
}

// WatchVoteTallied is a free log subscription operation binding the contract event 0xa2d4e500801849d40ad00f0f12ba92a5263f83ec68946e647be95cfbe581c7b6.
//
// Solidity: event VoteTallied(uint256 _disputeId, uint8 _result, address _initiator, address _reporter)
func (_Governance *GovernanceFilterer) WatchVoteTallied(opts *bind.WatchOpts, sink chan<- *GovernanceVoteTallied) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "VoteTallied")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceVoteTallied)
				if err := _Governance.contract.UnpackLog(event, "VoteTallied", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoteTallied is a log parse operation binding the contract event 0xa2d4e500801849d40ad00f0f12ba92a5263f83ec68946e647be95cfbe581c7b6.
//
// Solidity: event VoteTallied(uint256 _disputeId, uint8 _result, address _initiator, address _reporter)
func (_Governance *GovernanceFilterer) ParseVoteTallied(log types.Log) (*GovernanceVoteTallied, error) {
	event := new(GovernanceVoteTallied)
	if err := _Governance.contract.UnpackLog(event, "VoteTallied", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GovernanceVotedIterator is returned from FilterVoted and is used to iterate over the raw logs and unpacked data for Voted events raised by the Governance contract.
type GovernanceVotedIterator struct {
	Event *GovernanceVoted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GovernanceVotedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GovernanceVoted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GovernanceVoted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GovernanceVotedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GovernanceVotedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GovernanceVoted represents a Voted event raised by the Governance contract.
type GovernanceVoted struct {
	DisputeId    *big.Int
	Supports     bool
	Voter        common.Address
	VoteWeight   *big.Int
	InvalidQuery bool
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVoted is a free log retrieval operation binding the contract event 0x687119431787025fac8e5b4b0fc31f4cf9701bd16535c717e286c568c1dc8356.
//
// Solidity: event Voted(uint256 _disputeId, bool _supports, address _voter, uint256 _voteWeight, bool _invalidQuery)
func (_Governance *GovernanceFilterer) FilterVoted(opts *bind.FilterOpts) (*GovernanceVotedIterator, error) {

	logs, sub, err := _Governance.contract.FilterLogs(opts, "Voted")
	if err != nil {
		return nil, err
	}
	return &GovernanceVotedIterator{contract: _Governance.contract, event: "Voted", logs: logs, sub: sub}, nil
}

// WatchVoted is a free log subscription operation binding the contract event 0x687119431787025fac8e5b4b0fc31f4cf9701bd16535c717e286c568c1dc8356.
//
// Solidity: event Voted(uint256 _disputeId, bool _supports, address _voter, uint256 _voteWeight, bool _invalidQuery)
func (_Governance *GovernanceFilterer) WatchVoted(opts *bind.WatchOpts, sink chan<- *GovernanceVoted) (event.Subscription, error) {

	logs, sub, err := _Governance.contract.WatchLogs(opts, "Voted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GovernanceVoted)
				if err := _Governance.contract.UnpackLog(event, "Voted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVoted is a log parse operation binding the contract event 0x687119431787025fac8e5b4b0fc31f4cf9701bd16535c717e286c568c1dc8356.
//
// Solidity: event Voted(uint256 _disputeId, bool _supports, address _voter, uint256 _voteWeight, bool _invalidQuery)
func (_Governance *GovernanceFilterer) ParseVoted(log types.Log) (*GovernanceVoted, error) {
	event := new(GovernanceVoted)
	if err := _Governance.contract.UnpackLog(event, "Voted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IControllerMetaData contains all meta data concerning the IController contract.
var IControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveAndTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minerIndex\",\"type\":\"uint256\"}],\"name\":\"beginDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeControllerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"changeOracleContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"changeStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"changeTreasuryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_target\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_c\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[5]\",\"name\":\"_r\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"idsOnDeck\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"tipsOnDeck\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"slashReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tipQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"uints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"unlockDisputeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supportsDispute\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"699f200f": "addresses(bytes32)",
		"dd62ed3e": "allowance(address,address)",
		"999cf26c": "allowedToTrade(address,uint256)",
		"095ea7b3": "approve(address,uint256)",
		"288c9c9d": "approveAndTransferFrom(address,address,uint256)",
		"70a08231": "balanceOf(address)",
		"4ee2cd7e": "balanceOfAt(address,uint256)",
		"8581af19": "beginDispute(uint256,uint256,uint256)",
		"42966c68": "burn(uint256)",
		"3c46a185": "changeControllerContract(address)",
		"47abd7f1": "changeDeity(address)",
		"e8ce51d7": "changeGovernanceContract(address)",
		"1cbd3151": "changeOracleContract(address)",
		"a6f9dae1": "changeOwner(address)",
		"a1332c5c": "changeStakingStatus(address,uint256)",
		"ae0a8279": "changeTellorContract(address)",
		"bd87e0c9": "changeTreasuryContract(address)",
		"740358e6": "changeUint(bytes32,uint256)",
		"313ce567": "decimals()",
		"0d2d76a2": "depositStake()",
		"133bee5e": "getAddressVars(bytes32)",
		"da379941": "getDisputeIdByDisputeHash(bytes32)",
		"3180f8df": "getLastNewValueById(uint256)",
		"4049f198": "getNewCurrentVariables()",
		"46eee1c4": "getNewValueCountbyRequestId(uint256)",
		"9a7077ab": "getNewVariablesOnDeck()",
		"733bdef0": "getStakerInfo(address)",
		"77fbb663": "getTimestampbyRequestIDandIndex(uint256,uint256)",
		"612c8f7f": "getUintVar(bytes32)",
		"e1c7392a": "init()",
		"8fd3ab80": "migrate()",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"28449c3a": "requestStakingWithdraw()",
		"93fa4915": "retrieveData(uint256,uint256)",
		"4dfc2a34": "slashReporter(address,address)",
		"95d89b41": "symbol()",
		"4d318b0e": "tallyVotes(uint256)",
		"2227dff8": "tipQuery(uint256,uint256,bytes)",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"b59e14d4": "uints(bytes32)",
		"9a01ca13": "unlockDisputeFee(uint256)",
		"c9d27afe": "vote(uint256,bool)",
		"bed9d861": "withdrawStake()",
	},
}

// IControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use IControllerMetaData.ABI instead.
var IControllerABI = IControllerMetaData.ABI

// Deprecated: Use IControllerMetaData.Sigs instead.
// IControllerFuncSigs maps the 4-byte function signature to its string representation.
var IControllerFuncSigs = IControllerMetaData.Sigs

// IController is an auto generated Go binding around an Ethereum contract.
type IController struct {
	IControllerCaller     // Read-only binding to the contract
	IControllerTransactor // Write-only binding to the contract
	IControllerFilterer   // Log filterer for contract events
}

// IControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IControllerSession struct {
	Contract     *IController      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IControllerCallerSession struct {
	Contract *IControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// IControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IControllerTransactorSession struct {
	Contract     *IControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// IControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IControllerRaw struct {
	Contract *IController // Generic contract binding to access the raw methods on
}

// IControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IControllerCallerRaw struct {
	Contract *IControllerCaller // Generic read-only contract binding to access the raw methods on
}

// IControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IControllerTransactorRaw struct {
	Contract *IControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIController creates a new instance of IController, bound to a specific deployed contract.
func NewIController(address common.Address, backend bind.ContractBackend) (*IController, error) {
	contract, err := bindIController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IController{IControllerCaller: IControllerCaller{contract: contract}, IControllerTransactor: IControllerTransactor{contract: contract}, IControllerFilterer: IControllerFilterer{contract: contract}}, nil
}

// NewIControllerCaller creates a new read-only instance of IController, bound to a specific deployed contract.
func NewIControllerCaller(address common.Address, caller bind.ContractCaller) (*IControllerCaller, error) {
	contract, err := bindIController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IControllerCaller{contract: contract}, nil
}

// NewIControllerTransactor creates a new write-only instance of IController, bound to a specific deployed contract.
func NewIControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*IControllerTransactor, error) {
	contract, err := bindIController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IControllerTransactor{contract: contract}, nil
}

// NewIControllerFilterer creates a new log filterer instance of IController, bound to a specific deployed contract.
func NewIControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*IControllerFilterer, error) {
	contract, err := bindIController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IControllerFilterer{contract: contract}, nil
}

// bindIController binds a generic wrapper to an already deployed contract.
func bindIController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IController *IControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IController.Contract.IControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IController *IControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.Contract.IControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IController *IControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IController.Contract.IControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IController *IControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IController.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IController *IControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IController *IControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IController.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerCaller) Allowance(opts *bind.CallOpts, _user common.Address, _spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "allowance", _user, _spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _IController.Contract.Allowance(&_IController.CallOpts, _user, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address _user, address _spender) view returns(uint256)
func (_IController *IControllerCallerSession) Allowance(_user common.Address, _spender common.Address) (*big.Int, error) {
	return _IController.Contract.Allowance(&_IController.CallOpts, _user, _spender)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerCaller) AllowedToTrade(opts *bind.CallOpts, _user common.Address, _amount *big.Int) (bool, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "allowedToTrade", _user, _amount)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _IController.Contract.AllowedToTrade(&_IController.CallOpts, _user, _amount)
}

// AllowedToTrade is a free data retrieval call binding the contract method 0x999cf26c.
//
// Solidity: function allowedToTrade(address _user, uint256 _amount) view returns(bool)
func (_IController *IControllerCallerSession) AllowedToTrade(_user common.Address, _amount *big.Int) (bool, error) {
	return _IController.Contract.AllowedToTrade(&_IController.CallOpts, _user, _amount)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerCaller) BalanceOf(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "balanceOf", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _IController.Contract.BalanceOf(&_IController.CallOpts, _user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address _user) view returns(uint256)
func (_IController *IControllerCallerSession) BalanceOf(_user common.Address) (*big.Int, error) {
	return _IController.Contract.BalanceOf(&_IController.CallOpts, _user)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerCaller) BalanceOfAt(opts *bind.CallOpts, _user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "balanceOfAt", _user, _blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _IController.Contract.BalanceOfAt(&_IController.CallOpts, _user, _blockNumber)
}

// BalanceOfAt is a free data retrieval call binding the contract method 0x4ee2cd7e.
//
// Solidity: function balanceOfAt(address _user, uint256 _blockNumber) view returns(uint256)
func (_IController *IControllerCallerSession) BalanceOfAt(_user common.Address, _blockNumber *big.Int) (*big.Int, error) {
	return _IController.Contract.BalanceOfAt(&_IController.CallOpts, _user, _blockNumber)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerSession) Decimals() (uint8, error) {
	return _IController.Contract.Decimals(&_IController.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() pure returns(uint8)
func (_IController *IControllerCallerSession) Decimals() (uint8, error) {
	return _IController.Contract.Decimals(&_IController.CallOpts)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerCaller) GetAddressVars(opts *bind.CallOpts, _data [32]byte) (common.Address, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getAddressVars", _data)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _IController.Contract.GetAddressVars(&_IController.CallOpts, _data)
}

// GetAddressVars is a free data retrieval call binding the contract method 0x133bee5e.
//
// Solidity: function getAddressVars(bytes32 _data) view returns(address)
func (_IController *IControllerCallerSession) GetAddressVars(_data [32]byte) (common.Address, error) {
	return _IController.Contract.GetAddressVars(&_IController.CallOpts, _data)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerCaller) GetDisputeIdByDisputeHash(opts *bind.CallOpts, _hash [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getDisputeIdByDisputeHash", _hash)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _IController.Contract.GetDisputeIdByDisputeHash(&_IController.CallOpts, _hash)
}

// GetDisputeIdByDisputeHash is a free data retrieval call binding the contract method 0xda379941.
//
// Solidity: function getDisputeIdByDisputeHash(bytes32 _hash) view returns(uint256)
func (_IController *IControllerCallerSession) GetDisputeIdByDisputeHash(_hash [32]byte) (*big.Int, error) {
	return _IController.Contract.GetDisputeIdByDisputeHash(&_IController.CallOpts, _hash)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerCaller) GetLastNewValueById(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, bool, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getLastNewValueById", _requestId)

	if err != nil {
		return *new(*big.Int), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _IController.Contract.GetLastNewValueById(&_IController.CallOpts, _requestId)
}

// GetLastNewValueById is a free data retrieval call binding the contract method 0x3180f8df.
//
// Solidity: function getLastNewValueById(uint256 _requestId) view returns(uint256, bool)
func (_IController *IControllerCallerSession) GetLastNewValueById(_requestId *big.Int) (*big.Int, bool, error) {
	return _IController.Contract.GetLastNewValueById(&_IController.CallOpts, _requestId)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerCaller) GetNewCurrentVariables(opts *bind.CallOpts) (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewCurrentVariables")

	outstruct := new(struct {
		C [32]byte
		R [5]*big.Int
		D *big.Int
		T *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.C = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.R = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.D = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.T = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerSession) GetNewCurrentVariables() (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	return _IController.Contract.GetNewCurrentVariables(&_IController.CallOpts)
}

// GetNewCurrentVariables is a free data retrieval call binding the contract method 0x4049f198.
//
// Solidity: function getNewCurrentVariables() view returns(bytes32 _c, uint256[5] _r, uint256 _d, uint256 _t)
func (_IController *IControllerCallerSession) GetNewCurrentVariables() (struct {
	C [32]byte
	R [5]*big.Int
	D *big.Int
	T *big.Int
}, error) {
	return _IController.Contract.GetNewCurrentVariables(&_IController.CallOpts)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerCaller) GetNewValueCountbyRequestId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewValueCountbyRequestId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _IController.Contract.GetNewValueCountbyRequestId(&_IController.CallOpts, _requestId)
}

// GetNewValueCountbyRequestId is a free data retrieval call binding the contract method 0x46eee1c4.
//
// Solidity: function getNewValueCountbyRequestId(uint256 _requestId) view returns(uint256)
func (_IController *IControllerCallerSession) GetNewValueCountbyRequestId(_requestId *big.Int) (*big.Int, error) {
	return _IController.Contract.GetNewValueCountbyRequestId(&_IController.CallOpts, _requestId)
}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerCaller) GetNewVariablesOnDeck(opts *bind.CallOpts) (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getNewVariablesOnDeck")

	outstruct := new(struct {
		IdsOnDeck  [5]*big.Int
		TipsOnDeck [5]*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IdsOnDeck = *abi.ConvertType(out[0], new([5]*big.Int)).(*[5]*big.Int)
	outstruct.TipsOnDeck = *abi.ConvertType(out[1], new([5]*big.Int)).(*[5]*big.Int)

	return *outstruct, err

}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerSession) GetNewVariablesOnDeck() (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	return _IController.Contract.GetNewVariablesOnDeck(&_IController.CallOpts)
}

// GetNewVariablesOnDeck is a free data retrieval call binding the contract method 0x9a7077ab.
//
// Solidity: function getNewVariablesOnDeck() view returns(uint256[5] idsOnDeck, uint256[5] tipsOnDeck)
func (_IController *IControllerCallerSession) GetNewVariablesOnDeck() (struct {
	IdsOnDeck  [5]*big.Int
	TipsOnDeck [5]*big.Int
}, error) {
	return _IController.Contract.GetNewVariablesOnDeck(&_IController.CallOpts)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerCaller) GetStakerInfo(opts *bind.CallOpts, _staker common.Address) (*big.Int, *big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getStakerInfo", _staker)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _IController.Contract.GetStakerInfo(&_IController.CallOpts, _staker)
}

// GetStakerInfo is a free data retrieval call binding the contract method 0x733bdef0.
//
// Solidity: function getStakerInfo(address _staker) view returns(uint256, uint256)
func (_IController *IControllerCallerSession) GetStakerInfo(_staker common.Address) (*big.Int, *big.Int, error) {
	return _IController.Contract.GetStakerInfo(&_IController.CallOpts, _staker)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerCaller) GetTimestampbyRequestIDandIndex(opts *bind.CallOpts, _requestID *big.Int, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getTimestampbyRequestIDandIndex", _requestID, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerSession) GetTimestampbyRequestIDandIndex(_requestID *big.Int, _index *big.Int) (*big.Int, error) {
	return _IController.Contract.GetTimestampbyRequestIDandIndex(&_IController.CallOpts, _requestID, _index)
}

// GetTimestampbyRequestIDandIndex is a free data retrieval call binding the contract method 0x77fbb663.
//
// Solidity: function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index) view returns(uint256)
func (_IController *IControllerCallerSession) GetTimestampbyRequestIDandIndex(_requestID *big.Int, _index *big.Int) (*big.Int, error) {
	return _IController.Contract.GetTimestampbyRequestIDandIndex(&_IController.CallOpts, _requestID, _index)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerCaller) GetUintVar(opts *bind.CallOpts, _data [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "getUintVar", _data)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _IController.Contract.GetUintVar(&_IController.CallOpts, _data)
}

// GetUintVar is a free data retrieval call binding the contract method 0x612c8f7f.
//
// Solidity: function getUintVar(bytes32 _data) view returns(uint256)
func (_IController *IControllerCallerSession) GetUintVar(_data [32]byte) (*big.Int, error) {
	return _IController.Contract.GetUintVar(&_IController.CallOpts, _data)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerSession) Name() (string, error) {
	return _IController.Contract.Name(&_IController.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() pure returns(string)
func (_IController *IControllerCallerSession) Name() (string, error) {
	return _IController.Contract.Name(&_IController.CallOpts)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerCaller) RetrieveData(opts *bind.CallOpts, _requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "retrieveData", _requestId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _IController.Contract.RetrieveData(&_IController.CallOpts, _requestId, _timestamp)
}

// RetrieveData is a free data retrieval call binding the contract method 0x93fa4915.
//
// Solidity: function retrieveData(uint256 _requestId, uint256 _timestamp) view returns(uint256)
func (_IController *IControllerCallerSession) RetrieveData(_requestId *big.Int, _timestamp *big.Int) (*big.Int, error) {
	return _IController.Contract.RetrieveData(&_IController.CallOpts, _requestId, _timestamp)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerSession) Symbol() (string, error) {
	return _IController.Contract.Symbol(&_IController.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() pure returns(string)
func (_IController *IControllerCallerSession) Symbol() (string, error) {
	return _IController.Contract.Symbol(&_IController.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IController.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerSession) TotalSupply() (*big.Int, error) {
	return _IController.Contract.TotalSupply(&_IController.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IController *IControllerCallerSession) TotalSupply() (*big.Int, error) {
	return _IController.Contract.TotalSupply(&_IController.CallOpts)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerTransactor) Addresses(opts *bind.TransactOpts, arg0 [32]byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "addresses", arg0)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerSession) Addresses(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Addresses(&_IController.TransactOpts, arg0)
}

// Addresses is a paid mutator transaction binding the contract method 0x699f200f.
//
// Solidity: function addresses(bytes32 ) returns(address)
func (_IController *IControllerTransactorSession) Addresses(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Addresses(&_IController.TransactOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "approve", _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Approve(&_IController.TransactOpts, _spender, _amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _amount) returns(bool)
func (_IController *IControllerTransactorSession) Approve(_spender common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Approve(&_IController.TransactOpts, _spender, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerTransactor) ApproveAndTransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "approveAndTransferFrom", _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ApproveAndTransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// ApproveAndTransferFrom is a paid mutator transaction binding the contract method 0x288c9c9d.
//
// Solidity: function approveAndTransferFrom(address _from, address _to, uint256 _amount) returns(bool)
func (_IController *IControllerTransactorSession) ApproveAndTransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ApproveAndTransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerTransactor) BeginDispute(opts *bind.TransactOpts, _requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "beginDispute", _requestId, _timestamp, _minerIndex)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerSession) BeginDispute(_requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.Contract.BeginDispute(&_IController.TransactOpts, _requestId, _timestamp, _minerIndex)
}

// BeginDispute is a paid mutator transaction binding the contract method 0x8581af19.
//
// Solidity: function beginDispute(uint256 _requestId, uint256 _timestamp, uint256 _minerIndex) returns()
func (_IController *IControllerTransactorSession) BeginDispute(_requestId *big.Int, _timestamp *big.Int, _minerIndex *big.Int) (*types.Transaction, error) {
	return _IController.Contract.BeginDispute(&_IController.TransactOpts, _requestId, _timestamp, _minerIndex)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerTransactor) Burn(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "burn", _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Burn(&_IController.TransactOpts, _amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 _amount) returns()
func (_IController *IControllerTransactorSession) Burn(_amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Burn(&_IController.TransactOpts, _amount)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerTransactor) ChangeControllerContract(opts *bind.TransactOpts, _newController common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeControllerContract", _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeControllerContract(&_IController.TransactOpts, _newController)
}

// ChangeControllerContract is a paid mutator transaction binding the contract method 0x3c46a185.
//
// Solidity: function changeControllerContract(address _newController) returns()
func (_IController *IControllerTransactorSession) ChangeControllerContract(_newController common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeControllerContract(&_IController.TransactOpts, _newController)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerTransactor) ChangeDeity(opts *bind.TransactOpts, _newDeity common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeDeity", _newDeity)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerSession) ChangeDeity(_newDeity common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeDeity(&_IController.TransactOpts, _newDeity)
}

// ChangeDeity is a paid mutator transaction binding the contract method 0x47abd7f1.
//
// Solidity: function changeDeity(address _newDeity) returns()
func (_IController *IControllerTransactorSession) ChangeDeity(_newDeity common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeDeity(&_IController.TransactOpts, _newDeity)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerTransactor) ChangeGovernanceContract(opts *bind.TransactOpts, _newGovernance common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeGovernanceContract", _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeGovernanceContract(&_IController.TransactOpts, _newGovernance)
}

// ChangeGovernanceContract is a paid mutator transaction binding the contract method 0xe8ce51d7.
//
// Solidity: function changeGovernanceContract(address _newGovernance) returns()
func (_IController *IControllerTransactorSession) ChangeGovernanceContract(_newGovernance common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeGovernanceContract(&_IController.TransactOpts, _newGovernance)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerTransactor) ChangeOracleContract(opts *bind.TransactOpts, _newOracle common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeOracleContract", _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOracleContract(&_IController.TransactOpts, _newOracle)
}

// ChangeOracleContract is a paid mutator transaction binding the contract method 0x1cbd3151.
//
// Solidity: function changeOracleContract(address _newOracle) returns()
func (_IController *IControllerTransactorSession) ChangeOracleContract(_newOracle common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOracleContract(&_IController.TransactOpts, _newOracle)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerTransactor) ChangeOwner(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeOwner", _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOwner(&_IController.TransactOpts, _newOwner)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xa6f9dae1.
//
// Solidity: function changeOwner(address _newOwner) returns()
func (_IController *IControllerTransactorSession) ChangeOwner(_newOwner common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeOwner(&_IController.TransactOpts, _newOwner)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerTransactor) ChangeStakingStatus(opts *bind.TransactOpts, _reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeStakingStatus", _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeStakingStatus(&_IController.TransactOpts, _reporter, _status)
}

// ChangeStakingStatus is a paid mutator transaction binding the contract method 0xa1332c5c.
//
// Solidity: function changeStakingStatus(address _reporter, uint256 _status) returns()
func (_IController *IControllerTransactorSession) ChangeStakingStatus(_reporter common.Address, _status *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeStakingStatus(&_IController.TransactOpts, _reporter, _status)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerTransactor) ChangeTellorContract(opts *bind.TransactOpts, _tContract common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeTellorContract", _tContract)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerSession) ChangeTellorContract(_tContract common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTellorContract(&_IController.TransactOpts, _tContract)
}

// ChangeTellorContract is a paid mutator transaction binding the contract method 0xae0a8279.
//
// Solidity: function changeTellorContract(address _tContract) returns()
func (_IController *IControllerTransactorSession) ChangeTellorContract(_tContract common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTellorContract(&_IController.TransactOpts, _tContract)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerTransactor) ChangeTreasuryContract(opts *bind.TransactOpts, _newTreasury common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeTreasuryContract", _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTreasuryContract(&_IController.TransactOpts, _newTreasury)
}

// ChangeTreasuryContract is a paid mutator transaction binding the contract method 0xbd87e0c9.
//
// Solidity: function changeTreasuryContract(address _newTreasury) returns()
func (_IController *IControllerTransactorSession) ChangeTreasuryContract(_newTreasury common.Address) (*types.Transaction, error) {
	return _IController.Contract.ChangeTreasuryContract(&_IController.TransactOpts, _newTreasury)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerTransactor) ChangeUint(opts *bind.TransactOpts, _target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "changeUint", _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeUint(&_IController.TransactOpts, _target, _amount)
}

// ChangeUint is a paid mutator transaction binding the contract method 0x740358e6.
//
// Solidity: function changeUint(bytes32 _target, uint256 _amount) returns()
func (_IController *IControllerTransactorSession) ChangeUint(_target [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.ChangeUint(&_IController.TransactOpts, _target, _amount)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerTransactor) DepositStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "depositStake")
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerSession) DepositStake() (*types.Transaction, error) {
	return _IController.Contract.DepositStake(&_IController.TransactOpts)
}

// DepositStake is a paid mutator transaction binding the contract method 0x0d2d76a2.
//
// Solidity: function depositStake() returns()
func (_IController *IControllerTransactorSession) DepositStake() (*types.Transaction, error) {
	return _IController.Contract.DepositStake(&_IController.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerTransactor) Init(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "init")
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerSession) Init() (*types.Transaction, error) {
	return _IController.Contract.Init(&_IController.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_IController *IControllerTransactorSession) Init() (*types.Transaction, error) {
	return _IController.Contract.Init(&_IController.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerSession) Migrate() (*types.Transaction, error) {
	return _IController.Contract.Migrate(&_IController.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_IController *IControllerTransactorSession) Migrate() (*types.Transaction, error) {
	return _IController.Contract.Migrate(&_IController.TransactOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerTransactor) Mint(opts *bind.TransactOpts, _reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "mint", _reciever, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerSession) Mint(_reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Mint(&_IController.TransactOpts, _reciever, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _reciever, uint256 _amount) returns()
func (_IController *IControllerTransactorSession) Mint(_reciever common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Mint(&_IController.TransactOpts, _reciever, _amount)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerTransactor) RequestStakingWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "requestStakingWithdraw")
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _IController.Contract.RequestStakingWithdraw(&_IController.TransactOpts)
}

// RequestStakingWithdraw is a paid mutator transaction binding the contract method 0x28449c3a.
//
// Solidity: function requestStakingWithdraw() returns()
func (_IController *IControllerTransactorSession) RequestStakingWithdraw() (*types.Transaction, error) {
	return _IController.Contract.RequestStakingWithdraw(&_IController.TransactOpts)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerTransactor) SlashReporter(opts *bind.TransactOpts, _reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "slashReporter", _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.Contract.SlashReporter(&_IController.TransactOpts, _reporter, _disputer)
}

// SlashReporter is a paid mutator transaction binding the contract method 0x4dfc2a34.
//
// Solidity: function slashReporter(address _reporter, address _disputer) returns()
func (_IController *IControllerTransactorSession) SlashReporter(_reporter common.Address, _disputer common.Address) (*types.Transaction, error) {
	return _IController.Contract.SlashReporter(&_IController.TransactOpts, _reporter, _disputer)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerTransactor) TallyVotes(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "tallyVotes", _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TallyVotes(&_IController.TransactOpts, _disputeId)
}

// TallyVotes is a paid mutator transaction binding the contract method 0x4d318b0e.
//
// Solidity: function tallyVotes(uint256 _disputeId) returns()
func (_IController *IControllerTransactorSession) TallyVotes(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TallyVotes(&_IController.TransactOpts, _disputeId)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerTransactor) TipQuery(opts *bind.TransactOpts, arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "tipQuery", arg0, arg1, arg2)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerSession) TipQuery(arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.Contract.TipQuery(&_IController.TransactOpts, arg0, arg1, arg2)
}

// TipQuery is a paid mutator transaction binding the contract method 0x2227dff8.
//
// Solidity: function tipQuery(uint256 , uint256 , bytes ) returns()
func (_IController *IControllerTransactorSession) TipQuery(arg0 *big.Int, arg1 *big.Int, arg2 []byte) (*types.Transaction, error) {
	return _IController.Contract.TipQuery(&_IController.TransactOpts, arg0, arg1, arg2)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "transfer", _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Transfer(&_IController.TransactOpts, _to, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactorSession) Transfer(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.Transfer(&_IController.TransactOpts, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "transferFrom", _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _amount) returns(bool success)
func (_IController *IControllerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IController.Contract.TransferFrom(&_IController.TransactOpts, _from, _to, _amount)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerTransactor) Uints(opts *bind.TransactOpts, arg0 [32]byte) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "uints", arg0)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerSession) Uints(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Uints(&_IController.TransactOpts, arg0)
}

// Uints is a paid mutator transaction binding the contract method 0xb59e14d4.
//
// Solidity: function uints(bytes32 ) returns(uint256)
func (_IController *IControllerTransactorSession) Uints(arg0 [32]byte) (*types.Transaction, error) {
	return _IController.Contract.Uints(&_IController.TransactOpts, arg0)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerTransactor) UnlockDisputeFee(opts *bind.TransactOpts, _disputeId *big.Int) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "unlockDisputeFee", _disputeId)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerSession) UnlockDisputeFee(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.UnlockDisputeFee(&_IController.TransactOpts, _disputeId)
}

// UnlockDisputeFee is a paid mutator transaction binding the contract method 0x9a01ca13.
//
// Solidity: function unlockDisputeFee(uint256 _disputeId) returns()
func (_IController *IControllerTransactorSession) UnlockDisputeFee(_disputeId *big.Int) (*types.Transaction, error) {
	return _IController.Contract.UnlockDisputeFee(&_IController.TransactOpts, _disputeId)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerTransactor) Vote(opts *bind.TransactOpts, _disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "vote", _disputeId, _supportsDispute)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerSession) Vote(_disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.Contract.Vote(&_IController.TransactOpts, _disputeId, _supportsDispute)
}

// Vote is a paid mutator transaction binding the contract method 0xc9d27afe.
//
// Solidity: function vote(uint256 _disputeId, bool _supportsDispute) returns()
func (_IController *IControllerTransactorSession) Vote(_disputeId *big.Int, _supportsDispute bool) (*types.Transaction, error) {
	return _IController.Contract.Vote(&_IController.TransactOpts, _disputeId, _supportsDispute)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerTransactor) WithdrawStake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IController.contract.Transact(opts, "withdrawStake")
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerSession) WithdrawStake() (*types.Transaction, error) {
	return _IController.Contract.WithdrawStake(&_IController.TransactOpts)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xbed9d861.
//
// Solidity: function withdrawStake() returns()
func (_IController *IControllerTransactorSession) WithdrawStake() (*types.Transaction, error) {
	return _IController.Contract.WithdrawStake(&_IController.TransactOpts)
}

// IOracleMetaData contains all meta data concerning the IOracle contract.
var IOracleMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"burnTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReportingLock\",\"type\":\"uint256\"}],\"name\":\"changeReportingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeBasedReward\",\"type\":\"uint256\"}],\"name\":\"changeTimeBasedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBlockNumberByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getCurrentValue\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReportTimestampByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getReporterByTimestamp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReporterLastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"getReportsSubmittedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeOfLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTimestampCountById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTimestampIndexByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"}],\"name\":\"getTipsById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTipsByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getValueByTimestamp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"removeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportingLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"submitValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_queryId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_queryData\",\"type\":\"bytes\"}],\"name\":\"tipQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"df0a6eb7": "burnTips()",
		"5d183cfa": "changeReportingLock(uint256)",
		"6d53585f": "changeTimeBasedReward(uint256)",
		"935408d0": "getBlockNumberByTimestamp(bytes32,uint256)",
		"adf1639d": "getCurrentValue(bytes32)",
		"7c37b8b4": "getReportTimestampByIndex(bytes32,uint256)",
		"e07c5486": "getReporterByTimestamp(bytes32,uint256)",
		"50005b83": "getReporterLastTimestamp(address)",
		"3878293e": "getReportsSubmittedByAddress(address)",
		"c0f95d52": "getTimeOfLastNewValue()",
		"35e72432": "getTimestampCountById(bytes32)",
		"9d9b16ed": "getTimestampIndexByTimestamp(bytes32,uint256)",
		"ef4c262d": "getTipsById(bytes32)",
		"b736ec36": "getTipsByUser(address)",
		"0b2d2b0d": "getValueByTimestamp(bytes32,uint256)",
		"5b5edcfc": "removeValue(bytes32,uint256)",
		"3321fc41": "reportingLock()",
		"5eaa9ced": "submitValue(bytes32,bytes,uint256,bytes)",
		"ef0234ad": "tipQuery(bytes32,uint256,bytes)",
		"fc735e99": "verify()",
	},
}

// IOracleABI is the input ABI used to generate the binding from.
// Deprecated: Use IOracleMetaData.ABI instead.
var IOracleABI = IOracleMetaData.ABI

// Deprecated: Use IOracleMetaData.Sigs instead.
// IOracleFuncSigs maps the 4-byte function signature to its string representation.
var IOracleFuncSigs = IOracleMetaData.Sigs

// IOracle is an auto generated Go binding around an Ethereum contract.
type IOracle struct {
	IOracleCaller     // Read-only binding to the contract
	IOracleTransactor // Write-only binding to the contract
	IOracleFilterer   // Log filterer for contract events
}

// IOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type IOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IOracleSession struct {
	Contract     *IOracle          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IOracleCallerSession struct {
	Contract *IOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IOracleTransactorSession struct {
	Contract     *IOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type IOracleRaw struct {
	Contract *IOracle // Generic contract binding to access the raw methods on
}

// IOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IOracleCallerRaw struct {
	Contract *IOracleCaller // Generic read-only contract binding to access the raw methods on
}

// IOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IOracleTransactorRaw struct {
	Contract *IOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIOracle creates a new instance of IOracle, bound to a specific deployed contract.
func NewIOracle(address common.Address, backend bind.ContractBackend) (*IOracle, error) {
	contract, err := bindIOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IOracle{IOracleCaller: IOracleCaller{contract: contract}, IOracleTransactor: IOracleTransactor{contract: contract}, IOracleFilterer: IOracleFilterer{contract: contract}}, nil
}

// NewIOracleCaller creates a new read-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleCaller(address common.Address, caller bind.ContractCaller) (*IOracleCaller, error) {
	contract, err := bindIOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleCaller{contract: contract}, nil
}

// NewIOracleTransactor creates a new write-only instance of IOracle, bound to a specific deployed contract.
func NewIOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*IOracleTransactor, error) {
	contract, err := bindIOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IOracleTransactor{contract: contract}, nil
}

// NewIOracleFilterer creates a new log filterer instance of IOracle, bound to a specific deployed contract.
func NewIOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*IOracleFilterer, error) {
	contract, err := bindIOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IOracleFilterer{contract: contract}, nil
}

// bindIOracle binds a generic wrapper to an already deployed contract.
func bindIOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.IOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.IOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IOracle *IOracleCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IOracle *IOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IOracle *IOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IOracle.Contract.contract.Transact(opts, method, params...)
}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCaller) GetBlockNumberByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getBlockNumberByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleSession) GetBlockNumberByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetBlockNumberByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetBlockNumberByTimestamp is a free data retrieval call binding the contract method 0x935408d0.
//
// Solidity: function getBlockNumberByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetBlockNumberByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetBlockNumberByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleCaller) GetCurrentValue(opts *bind.CallOpts, _queryId [32]byte) ([]byte, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getCurrentValue", _queryId)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleSession) GetCurrentValue(_queryId [32]byte) ([]byte, error) {
	return _IOracle.Contract.GetCurrentValue(&_IOracle.CallOpts, _queryId)
}

// GetCurrentValue is a free data retrieval call binding the contract method 0xadf1639d.
//
// Solidity: function getCurrentValue(bytes32 _queryId) view returns(bytes)
func (_IOracle *IOracleCallerSession) GetCurrentValue(_queryId [32]byte) ([]byte, error) {
	return _IOracle.Contract.GetCurrentValue(&_IOracle.CallOpts, _queryId)
}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleCaller) GetReportTimestampByIndex(opts *bind.CallOpts, _queryId [32]byte, _index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReportTimestampByIndex", _queryId, _index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleSession) GetReportTimestampByIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetReportTimestampByIndex(&_IOracle.CallOpts, _queryId, _index)
}

// GetReportTimestampByIndex is a free data retrieval call binding the contract method 0x7c37b8b4.
//
// Solidity: function getReportTimestampByIndex(bytes32 _queryId, uint256 _index) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReportTimestampByIndex(_queryId [32]byte, _index *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetReportTimestampByIndex(&_IOracle.CallOpts, _queryId, _index)
}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleCaller) GetReporterByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReporterByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleSession) GetReporterByTimestamp(_queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	return _IOracle.Contract.GetReporterByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetReporterByTimestamp is a free data retrieval call binding the contract method 0xe07c5486.
//
// Solidity: function getReporterByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(address)
func (_IOracle *IOracleCallerSession) GetReporterByTimestamp(_queryId [32]byte, _timestamp *big.Int) (common.Address, error) {
	return _IOracle.Contract.GetReporterByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleCaller) GetReporterLastTimestamp(opts *bind.CallOpts, _reporter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReporterLastTimestamp", _reporter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleSession) GetReporterLastTimestamp(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReporterLastTimestamp(&_IOracle.CallOpts, _reporter)
}

// GetReporterLastTimestamp is a free data retrieval call binding the contract method 0x50005b83.
//
// Solidity: function getReporterLastTimestamp(address _reporter) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReporterLastTimestamp(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReporterLastTimestamp(&_IOracle.CallOpts, _reporter)
}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleCaller) GetReportsSubmittedByAddress(opts *bind.CallOpts, _reporter common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getReportsSubmittedByAddress", _reporter)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleSession) GetReportsSubmittedByAddress(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReportsSubmittedByAddress(&_IOracle.CallOpts, _reporter)
}

// GetReportsSubmittedByAddress is a free data retrieval call binding the contract method 0x3878293e.
//
// Solidity: function getReportsSubmittedByAddress(address _reporter) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetReportsSubmittedByAddress(_reporter common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetReportsSubmittedByAddress(&_IOracle.CallOpts, _reporter)
}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleCaller) GetTimeOfLastNewValue(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimeOfLastNewValue")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleSession) GetTimeOfLastNewValue() (*big.Int, error) {
	return _IOracle.Contract.GetTimeOfLastNewValue(&_IOracle.CallOpts)
}

// GetTimeOfLastNewValue is a free data retrieval call binding the contract method 0xc0f95d52.
//
// Solidity: function getTimeOfLastNewValue() view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimeOfLastNewValue() (*big.Int, error) {
	return _IOracle.Contract.GetTimeOfLastNewValue(&_IOracle.CallOpts)
}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCaller) GetTimestampCountById(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimestampCountById", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleSession) GetTimestampCountById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampCountById(&_IOracle.CallOpts, _queryId)
}

// GetTimestampCountById is a free data retrieval call binding the contract method 0x35e72432.
//
// Solidity: function getTimestampCountById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimestampCountById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampCountById(&_IOracle.CallOpts, _queryId)
}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCaller) GetTimestampIndexByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTimestampIndexByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleSession) GetTimestampIndexByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampIndexByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetTimestampIndexByTimestamp is a free data retrieval call binding the contract method 0x9d9b16ed.
//
// Solidity: function getTimestampIndexByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTimestampIndexByTimestamp(_queryId [32]byte, _timestamp *big.Int) (*big.Int, error) {
	return _IOracle.Contract.GetTimestampIndexByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCaller) GetTipsById(opts *bind.CallOpts, _queryId [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTipsById", _queryId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleSession) GetTipsById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTipsById(&_IOracle.CallOpts, _queryId)
}

// GetTipsById is a free data retrieval call binding the contract method 0xef4c262d.
//
// Solidity: function getTipsById(bytes32 _queryId) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTipsById(_queryId [32]byte) (*big.Int, error) {
	return _IOracle.Contract.GetTipsById(&_IOracle.CallOpts, _queryId)
}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleCaller) GetTipsByUser(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getTipsByUser", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleSession) GetTipsByUser(_user common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetTipsByUser(&_IOracle.CallOpts, _user)
}

// GetTipsByUser is a free data retrieval call binding the contract method 0xb736ec36.
//
// Solidity: function getTipsByUser(address _user) view returns(uint256)
func (_IOracle *IOracleCallerSession) GetTipsByUser(_user common.Address) (*big.Int, error) {
	return _IOracle.Contract.GetTipsByUser(&_IOracle.CallOpts, _user)
}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleCaller) GetValueByTimestamp(opts *bind.CallOpts, _queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "getValueByTimestamp", _queryId, _timestamp)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleSession) GetValueByTimestamp(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _IOracle.Contract.GetValueByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// GetValueByTimestamp is a free data retrieval call binding the contract method 0x0b2d2b0d.
//
// Solidity: function getValueByTimestamp(bytes32 _queryId, uint256 _timestamp) view returns(bytes)
func (_IOracle *IOracleCallerSession) GetValueByTimestamp(_queryId [32]byte, _timestamp *big.Int) ([]byte, error) {
	return _IOracle.Contract.GetValueByTimestamp(&_IOracle.CallOpts, _queryId, _timestamp)
}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleCaller) ReportingLock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "reportingLock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleSession) ReportingLock() (*big.Int, error) {
	return _IOracle.Contract.ReportingLock(&_IOracle.CallOpts)
}

// ReportingLock is a free data retrieval call binding the contract method 0x3321fc41.
//
// Solidity: function reportingLock() view returns(uint256)
func (_IOracle *IOracleCallerSession) ReportingLock() (*big.Int, error) {
	return _IOracle.Contract.ReportingLock(&_IOracle.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IOracle.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleSession) Verify() (*big.Int, error) {
	return _IOracle.Contract.Verify(&_IOracle.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_IOracle *IOracleCallerSession) Verify() (*big.Int, error) {
	return _IOracle.Contract.Verify(&_IOracle.CallOpts)
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleTransactor) BurnTips(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "burnTips")
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleSession) BurnTips() (*types.Transaction, error) {
	return _IOracle.Contract.BurnTips(&_IOracle.TransactOpts)
}

// BurnTips is a paid mutator transaction binding the contract method 0xdf0a6eb7.
//
// Solidity: function burnTips() returns()
func (_IOracle *IOracleTransactorSession) BurnTips() (*types.Transaction, error) {
	return _IOracle.Contract.BurnTips(&_IOracle.TransactOpts)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleTransactor) ChangeReportingLock(opts *bind.TransactOpts, _newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "changeReportingLock", _newReportingLock)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleSession) ChangeReportingLock(_newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeReportingLock(&_IOracle.TransactOpts, _newReportingLock)
}

// ChangeReportingLock is a paid mutator transaction binding the contract method 0x5d183cfa.
//
// Solidity: function changeReportingLock(uint256 _newReportingLock) returns()
func (_IOracle *IOracleTransactorSession) ChangeReportingLock(_newReportingLock *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeReportingLock(&_IOracle.TransactOpts, _newReportingLock)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleTransactor) ChangeTimeBasedReward(opts *bind.TransactOpts, _newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "changeTimeBasedReward", _newTimeBasedReward)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleSession) ChangeTimeBasedReward(_newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeTimeBasedReward(&_IOracle.TransactOpts, _newTimeBasedReward)
}

// ChangeTimeBasedReward is a paid mutator transaction binding the contract method 0x6d53585f.
//
// Solidity: function changeTimeBasedReward(uint256 _newTimeBasedReward) returns()
func (_IOracle *IOracleTransactorSession) ChangeTimeBasedReward(_newTimeBasedReward *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.ChangeTimeBasedReward(&_IOracle.TransactOpts, _newTimeBasedReward)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleTransactor) RemoveValue(opts *bind.TransactOpts, _queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "removeValue", _queryId, _timestamp)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleSession) RemoveValue(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.RemoveValue(&_IOracle.TransactOpts, _queryId, _timestamp)
}

// RemoveValue is a paid mutator transaction binding the contract method 0x5b5edcfc.
//
// Solidity: function removeValue(bytes32 _queryId, uint256 _timestamp) returns()
func (_IOracle *IOracleTransactorSession) RemoveValue(_queryId [32]byte, _timestamp *big.Int) (*types.Transaction, error) {
	return _IOracle.Contract.RemoveValue(&_IOracle.TransactOpts, _queryId, _timestamp)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleTransactor) SubmitValue(opts *bind.TransactOpts, _queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "submitValue", _queryId, _value, _nonce, _queryData)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleSession) SubmitValue(_queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.SubmitValue(&_IOracle.TransactOpts, _queryId, _value, _nonce, _queryData)
}

// SubmitValue is a paid mutator transaction binding the contract method 0x5eaa9ced.
//
// Solidity: function submitValue(bytes32 _queryId, bytes _value, uint256 _nonce, bytes _queryData) returns()
func (_IOracle *IOracleTransactorSession) SubmitValue(_queryId [32]byte, _value []byte, _nonce *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.SubmitValue(&_IOracle.TransactOpts, _queryId, _value, _nonce, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleTransactor) TipQuery(opts *bind.TransactOpts, _queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.contract.Transact(opts, "tipQuery", _queryId, _tip, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleSession) TipQuery(_queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.TipQuery(&_IOracle.TransactOpts, _queryId, _tip, _queryData)
}

// TipQuery is a paid mutator transaction binding the contract method 0xef0234ad.
//
// Solidity: function tipQuery(bytes32 _queryId, uint256 _tip, bytes _queryData) returns()
func (_IOracle *IOracleTransactorSession) TipQuery(_queryId [32]byte, _tip *big.Int, _queryData []byte) (*types.Transaction, error) {
	return _IOracle.Contract.TipQuery(&_IOracle.TransactOpts, _queryId, _tip, _queryData)
}

// ITreasuryMetaData contains all meta data concerning the ITreasury contract.
var ITreasuryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getTreasuryAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTreasuryDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTreasuryFundsByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTreasuryOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"issueTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"wasPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Sigs: map[string]string{
		"6a64b815": "buyTreasury(uint256,uint256)",
		"ae23fae1": "getTreasuryAccount(uint256,address)",
		"73342a47": "getTreasuryDetails(uint256)",
		"770d458f": "getTreasuryFundsByUser(address)",
		"1683ca53": "getTreasuryOwners(uint256)",
		"6274885f": "issueTreasury(uint256,uint256,uint256)",
		"ef362980": "payTreasury(address,uint256)",
		"fc735e99": "verify()",
		"4d90d705": "wasPaid(uint256,address)",
	},
}

// ITreasuryABI is the input ABI used to generate the binding from.
// Deprecated: Use ITreasuryMetaData.ABI instead.
var ITreasuryABI = ITreasuryMetaData.ABI

// Deprecated: Use ITreasuryMetaData.Sigs instead.
// ITreasuryFuncSigs maps the 4-byte function signature to its string representation.
var ITreasuryFuncSigs = ITreasuryMetaData.Sigs

// ITreasury is an auto generated Go binding around an Ethereum contract.
type ITreasury struct {
	ITreasuryCaller     // Read-only binding to the contract
	ITreasuryTransactor // Write-only binding to the contract
	ITreasuryFilterer   // Log filterer for contract events
}

// ITreasuryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ITreasuryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITreasuryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ITreasuryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITreasuryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ITreasuryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITreasurySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ITreasurySession struct {
	Contract     *ITreasury        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ITreasuryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ITreasuryCallerSession struct {
	Contract *ITreasuryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// ITreasuryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ITreasuryTransactorSession struct {
	Contract     *ITreasuryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ITreasuryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ITreasuryRaw struct {
	Contract *ITreasury // Generic contract binding to access the raw methods on
}

// ITreasuryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ITreasuryCallerRaw struct {
	Contract *ITreasuryCaller // Generic read-only contract binding to access the raw methods on
}

// ITreasuryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ITreasuryTransactorRaw struct {
	Contract *ITreasuryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewITreasury creates a new instance of ITreasury, bound to a specific deployed contract.
func NewITreasury(address common.Address, backend bind.ContractBackend) (*ITreasury, error) {
	contract, err := bindITreasury(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ITreasury{ITreasuryCaller: ITreasuryCaller{contract: contract}, ITreasuryTransactor: ITreasuryTransactor{contract: contract}, ITreasuryFilterer: ITreasuryFilterer{contract: contract}}, nil
}

// NewITreasuryCaller creates a new read-only instance of ITreasury, bound to a specific deployed contract.
func NewITreasuryCaller(address common.Address, caller bind.ContractCaller) (*ITreasuryCaller, error) {
	contract, err := bindITreasury(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ITreasuryCaller{contract: contract}, nil
}

// NewITreasuryTransactor creates a new write-only instance of ITreasury, bound to a specific deployed contract.
func NewITreasuryTransactor(address common.Address, transactor bind.ContractTransactor) (*ITreasuryTransactor, error) {
	contract, err := bindITreasury(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ITreasuryTransactor{contract: contract}, nil
}

// NewITreasuryFilterer creates a new log filterer instance of ITreasury, bound to a specific deployed contract.
func NewITreasuryFilterer(address common.Address, filterer bind.ContractFilterer) (*ITreasuryFilterer, error) {
	contract, err := bindITreasury(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ITreasuryFilterer{contract: contract}, nil
}

// bindITreasury binds a generic wrapper to an already deployed contract.
func bindITreasury(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ITreasuryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITreasury *ITreasuryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITreasury.Contract.ITreasuryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITreasury *ITreasuryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITreasury.Contract.ITreasuryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITreasury *ITreasuryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITreasury.Contract.ITreasuryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITreasury *ITreasuryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITreasury.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITreasury *ITreasuryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITreasury.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITreasury *ITreasuryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITreasury.Contract.contract.Transact(opts, method, params...)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xae23fae1.
//
// Solidity: function getTreasuryAccount(uint256 _id, address _investor) view returns(uint256)
func (_ITreasury *ITreasuryCaller) GetTreasuryAccount(opts *bind.CallOpts, _id *big.Int, _investor common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "getTreasuryAccount", _id, _investor)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xae23fae1.
//
// Solidity: function getTreasuryAccount(uint256 _id, address _investor) view returns(uint256)
func (_ITreasury *ITreasurySession) GetTreasuryAccount(_id *big.Int, _investor common.Address) (*big.Int, error) {
	return _ITreasury.Contract.GetTreasuryAccount(&_ITreasury.CallOpts, _id, _investor)
}

// GetTreasuryAccount is a free data retrieval call binding the contract method 0xae23fae1.
//
// Solidity: function getTreasuryAccount(uint256 _id, address _investor) view returns(uint256)
func (_ITreasury *ITreasuryCallerSession) GetTreasuryAccount(_id *big.Int, _investor common.Address) (*big.Int, error) {
	return _ITreasury.Contract.GetTreasuryAccount(&_ITreasury.CallOpts, _id, _investor)
}

// GetTreasuryDetails is a free data retrieval call binding the contract method 0x73342a47.
//
// Solidity: function getTreasuryDetails(uint256 _id) view returns(uint256, uint256, uint256, uint256)
func (_ITreasury *ITreasuryCaller) GetTreasuryDetails(opts *bind.CallOpts, _id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "getTreasuryDetails", _id)

	if err != nil {
		return *new(*big.Int), *new(*big.Int), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, err

}

// GetTreasuryDetails is a free data retrieval call binding the contract method 0x73342a47.
//
// Solidity: function getTreasuryDetails(uint256 _id) view returns(uint256, uint256, uint256, uint256)
func (_ITreasury *ITreasurySession) GetTreasuryDetails(_id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ITreasury.Contract.GetTreasuryDetails(&_ITreasury.CallOpts, _id)
}

// GetTreasuryDetails is a free data retrieval call binding the contract method 0x73342a47.
//
// Solidity: function getTreasuryDetails(uint256 _id) view returns(uint256, uint256, uint256, uint256)
func (_ITreasury *ITreasuryCallerSession) GetTreasuryDetails(_id *big.Int) (*big.Int, *big.Int, *big.Int, *big.Int, error) {
	return _ITreasury.Contract.GetTreasuryDetails(&_ITreasury.CallOpts, _id)
}

// GetTreasuryFundsByUser is a free data retrieval call binding the contract method 0x770d458f.
//
// Solidity: function getTreasuryFundsByUser(address _user) view returns(uint256)
func (_ITreasury *ITreasuryCaller) GetTreasuryFundsByUser(opts *bind.CallOpts, _user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "getTreasuryFundsByUser", _user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTreasuryFundsByUser is a free data retrieval call binding the contract method 0x770d458f.
//
// Solidity: function getTreasuryFundsByUser(address _user) view returns(uint256)
func (_ITreasury *ITreasurySession) GetTreasuryFundsByUser(_user common.Address) (*big.Int, error) {
	return _ITreasury.Contract.GetTreasuryFundsByUser(&_ITreasury.CallOpts, _user)
}

// GetTreasuryFundsByUser is a free data retrieval call binding the contract method 0x770d458f.
//
// Solidity: function getTreasuryFundsByUser(address _user) view returns(uint256)
func (_ITreasury *ITreasuryCallerSession) GetTreasuryFundsByUser(_user common.Address) (*big.Int, error) {
	return _ITreasury.Contract.GetTreasuryFundsByUser(&_ITreasury.CallOpts, _user)
}

// GetTreasuryOwners is a free data retrieval call binding the contract method 0x1683ca53.
//
// Solidity: function getTreasuryOwners(uint256 _id) view returns(address[])
func (_ITreasury *ITreasuryCaller) GetTreasuryOwners(opts *bind.CallOpts, _id *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "getTreasuryOwners", _id)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTreasuryOwners is a free data retrieval call binding the contract method 0x1683ca53.
//
// Solidity: function getTreasuryOwners(uint256 _id) view returns(address[])
func (_ITreasury *ITreasurySession) GetTreasuryOwners(_id *big.Int) ([]common.Address, error) {
	return _ITreasury.Contract.GetTreasuryOwners(&_ITreasury.CallOpts, _id)
}

// GetTreasuryOwners is a free data retrieval call binding the contract method 0x1683ca53.
//
// Solidity: function getTreasuryOwners(uint256 _id) view returns(address[])
func (_ITreasury *ITreasuryCallerSession) GetTreasuryOwners(_id *big.Int) ([]common.Address, error) {
	return _ITreasury.Contract.GetTreasuryOwners(&_ITreasury.CallOpts, _id)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_ITreasury *ITreasuryCaller) Verify(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "verify")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_ITreasury *ITreasurySession) Verify() (*big.Int, error) {
	return _ITreasury.Contract.Verify(&_ITreasury.CallOpts)
}

// Verify is a free data retrieval call binding the contract method 0xfc735e99.
//
// Solidity: function verify() pure returns(uint256)
func (_ITreasury *ITreasuryCallerSession) Verify() (*big.Int, error) {
	return _ITreasury.Contract.Verify(&_ITreasury.CallOpts)
}

// WasPaid is a free data retrieval call binding the contract method 0x4d90d705.
//
// Solidity: function wasPaid(uint256 _id, address _investor) view returns(bool)
func (_ITreasury *ITreasuryCaller) WasPaid(opts *bind.CallOpts, _id *big.Int, _investor common.Address) (bool, error) {
	var out []interface{}
	err := _ITreasury.contract.Call(opts, &out, "wasPaid", _id, _investor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WasPaid is a free data retrieval call binding the contract method 0x4d90d705.
//
// Solidity: function wasPaid(uint256 _id, address _investor) view returns(bool)
func (_ITreasury *ITreasurySession) WasPaid(_id *big.Int, _investor common.Address) (bool, error) {
	return _ITreasury.Contract.WasPaid(&_ITreasury.CallOpts, _id, _investor)
}

// WasPaid is a free data retrieval call binding the contract method 0x4d90d705.
//
// Solidity: function wasPaid(uint256 _id, address _investor) view returns(bool)
func (_ITreasury *ITreasuryCallerSession) WasPaid(_id *big.Int, _investor common.Address) (bool, error) {
	return _ITreasury.Contract.WasPaid(&_ITreasury.CallOpts, _id, _investor)
}

// BuyTreasury is a paid mutator transaction binding the contract method 0x6a64b815.
//
// Solidity: function buyTreasury(uint256 _id, uint256 _amount) returns()
func (_ITreasury *ITreasuryTransactor) BuyTreasury(opts *bind.TransactOpts, _id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _ITreasury.contract.Transact(opts, "buyTreasury", _id, _amount)
}

// BuyTreasury is a paid mutator transaction binding the contract method 0x6a64b815.
//
// Solidity: function buyTreasury(uint256 _id, uint256 _amount) returns()
func (_ITreasury *ITreasurySession) BuyTreasury(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.BuyTreasury(&_ITreasury.TransactOpts, _id, _amount)
}

// BuyTreasury is a paid mutator transaction binding the contract method 0x6a64b815.
//
// Solidity: function buyTreasury(uint256 _id, uint256 _amount) returns()
func (_ITreasury *ITreasuryTransactorSession) BuyTreasury(_id *big.Int, _amount *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.BuyTreasury(&_ITreasury.TransactOpts, _id, _amount)
}

// IssueTreasury is a paid mutator transaction binding the contract method 0x6274885f.
//
// Solidity: function issueTreasury(uint256 _amount, uint256 _rate, uint256 _duration) returns()
func (_ITreasury *ITreasuryTransactor) IssueTreasury(opts *bind.TransactOpts, _amount *big.Int, _rate *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _ITreasury.contract.Transact(opts, "issueTreasury", _amount, _rate, _duration)
}

// IssueTreasury is a paid mutator transaction binding the contract method 0x6274885f.
//
// Solidity: function issueTreasury(uint256 _amount, uint256 _rate, uint256 _duration) returns()
func (_ITreasury *ITreasurySession) IssueTreasury(_amount *big.Int, _rate *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.IssueTreasury(&_ITreasury.TransactOpts, _amount, _rate, _duration)
}

// IssueTreasury is a paid mutator transaction binding the contract method 0x6274885f.
//
// Solidity: function issueTreasury(uint256 _amount, uint256 _rate, uint256 _duration) returns()
func (_ITreasury *ITreasuryTransactorSession) IssueTreasury(_amount *big.Int, _rate *big.Int, _duration *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.IssueTreasury(&_ITreasury.TransactOpts, _amount, _rate, _duration)
}

// PayTreasury is a paid mutator transaction binding the contract method 0xef362980.
//
// Solidity: function payTreasury(address _investor, uint256 _id) returns()
func (_ITreasury *ITreasuryTransactor) PayTreasury(opts *bind.TransactOpts, _investor common.Address, _id *big.Int) (*types.Transaction, error) {
	return _ITreasury.contract.Transact(opts, "payTreasury", _investor, _id)
}

// PayTreasury is a paid mutator transaction binding the contract method 0xef362980.
//
// Solidity: function payTreasury(address _investor, uint256 _id) returns()
func (_ITreasury *ITreasurySession) PayTreasury(_investor common.Address, _id *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.PayTreasury(&_ITreasury.TransactOpts, _investor, _id)
}

// PayTreasury is a paid mutator transaction binding the contract method 0xef362980.
//
// Solidity: function payTreasury(address _investor, uint256 _id) returns()
func (_ITreasury *ITreasuryTransactorSession) PayTreasury(_investor common.Address, _id *big.Int) (*types.Transaction, error) {
	return _ITreasury.Contract.PayTreasury(&_ITreasury.TransactOpts, _investor, _id)
}

// TellorVariablesMetaData contains all meta data concerning the TellorVariables contract.
var TellorVariablesMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212204c31569c8091c0568f5577bffa2d19c063021a9d8e39d717573a28edd88ebb1264736f6c63430008030033",
}

// TellorVariablesABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorVariablesMetaData.ABI instead.
var TellorVariablesABI = TellorVariablesMetaData.ABI

// TellorVariablesBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorVariablesMetaData.Bin instead.
var TellorVariablesBin = TellorVariablesMetaData.Bin

// DeployTellorVariables deploys a new Ethereum contract, binding an instance of TellorVariables to it.
func DeployTellorVariables(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorVariables, error) {
	parsed, err := TellorVariablesMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorVariablesBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorVariables{TellorVariablesCaller: TellorVariablesCaller{contract: contract}, TellorVariablesTransactor: TellorVariablesTransactor{contract: contract}, TellorVariablesFilterer: TellorVariablesFilterer{contract: contract}}, nil
}

// TellorVariables is an auto generated Go binding around an Ethereum contract.
type TellorVariables struct {
	TellorVariablesCaller     // Read-only binding to the contract
	TellorVariablesTransactor // Write-only binding to the contract
	TellorVariablesFilterer   // Log filterer for contract events
}

// TellorVariablesCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorVariablesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorVariablesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorVariablesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVariablesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorVariablesSession struct {
	Contract     *TellorVariables  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorVariablesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorVariablesCallerSession struct {
	Contract *TellorVariablesCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TellorVariablesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorVariablesTransactorSession struct {
	Contract     *TellorVariablesTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TellorVariablesRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorVariablesRaw struct {
	Contract *TellorVariables // Generic contract binding to access the raw methods on
}

// TellorVariablesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorVariablesCallerRaw struct {
	Contract *TellorVariablesCaller // Generic read-only contract binding to access the raw methods on
}

// TellorVariablesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorVariablesTransactorRaw struct {
	Contract *TellorVariablesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorVariables creates a new instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariables(address common.Address, backend bind.ContractBackend) (*TellorVariables, error) {
	contract, err := bindTellorVariables(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorVariables{TellorVariablesCaller: TellorVariablesCaller{contract: contract}, TellorVariablesTransactor: TellorVariablesTransactor{contract: contract}, TellorVariablesFilterer: TellorVariablesFilterer{contract: contract}}, nil
}

// NewTellorVariablesCaller creates a new read-only instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesCaller(address common.Address, caller bind.ContractCaller) (*TellorVariablesCaller, error) {
	contract, err := bindTellorVariables(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesCaller{contract: contract}, nil
}

// NewTellorVariablesTransactor creates a new write-only instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorVariablesTransactor, error) {
	contract, err := bindTellorVariables(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesTransactor{contract: contract}, nil
}

// NewTellorVariablesFilterer creates a new log filterer instance of TellorVariables, bound to a specific deployed contract.
func NewTellorVariablesFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorVariablesFilterer, error) {
	contract, err := bindTellorVariables(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorVariablesFilterer{contract: contract}, nil
}

// bindTellorVariables binds a generic wrapper to an already deployed contract.
func bindTellorVariables(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorVariablesABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVariables *TellorVariablesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVariables.Contract.TellorVariablesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVariables *TellorVariablesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVariables.Contract.TellorVariablesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVariables *TellorVariablesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVariables.Contract.TellorVariablesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVariables *TellorVariablesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVariables.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVariables *TellorVariablesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVariables.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVariables *TellorVariablesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVariables.Contract.contract.Transact(opts, method, params...)
}

// TellorVarsMetaData contains all meta data concerning the TellorVars contract.
var TellorVarsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208df56fe6e395506833a85b6761a4b2f03b755442c9ad46938cac1ab35ded537a64736f6c63430008030033",
}

// TellorVarsABI is the input ABI used to generate the binding from.
// Deprecated: Use TellorVarsMetaData.ABI instead.
var TellorVarsABI = TellorVarsMetaData.ABI

// TellorVarsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TellorVarsMetaData.Bin instead.
var TellorVarsBin = TellorVarsMetaData.Bin

// DeployTellorVars deploys a new Ethereum contract, binding an instance of TellorVars to it.
func DeployTellorVars(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TellorVars, error) {
	parsed, err := TellorVarsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TellorVarsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TellorVars{TellorVarsCaller: TellorVarsCaller{contract: contract}, TellorVarsTransactor: TellorVarsTransactor{contract: contract}, TellorVarsFilterer: TellorVarsFilterer{contract: contract}}, nil
}

// TellorVars is an auto generated Go binding around an Ethereum contract.
type TellorVars struct {
	TellorVarsCaller     // Read-only binding to the contract
	TellorVarsTransactor // Write-only binding to the contract
	TellorVarsFilterer   // Log filterer for contract events
}

// TellorVarsCaller is an auto generated read-only Go binding around an Ethereum contract.
type TellorVarsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TellorVarsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TellorVarsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TellorVarsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TellorVarsSession struct {
	Contract     *TellorVars       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TellorVarsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TellorVarsCallerSession struct {
	Contract *TellorVarsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TellorVarsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TellorVarsTransactorSession struct {
	Contract     *TellorVarsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TellorVarsRaw is an auto generated low-level Go binding around an Ethereum contract.
type TellorVarsRaw struct {
	Contract *TellorVars // Generic contract binding to access the raw methods on
}

// TellorVarsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TellorVarsCallerRaw struct {
	Contract *TellorVarsCaller // Generic read-only contract binding to access the raw methods on
}

// TellorVarsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TellorVarsTransactorRaw struct {
	Contract *TellorVarsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTellorVars creates a new instance of TellorVars, bound to a specific deployed contract.
func NewTellorVars(address common.Address, backend bind.ContractBackend) (*TellorVars, error) {
	contract, err := bindTellorVars(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TellorVars{TellorVarsCaller: TellorVarsCaller{contract: contract}, TellorVarsTransactor: TellorVarsTransactor{contract: contract}, TellorVarsFilterer: TellorVarsFilterer{contract: contract}}, nil
}

// NewTellorVarsCaller creates a new read-only instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsCaller(address common.Address, caller bind.ContractCaller) (*TellorVarsCaller, error) {
	contract, err := bindTellorVars(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVarsCaller{contract: contract}, nil
}

// NewTellorVarsTransactor creates a new write-only instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsTransactor(address common.Address, transactor bind.ContractTransactor) (*TellorVarsTransactor, error) {
	contract, err := bindTellorVars(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TellorVarsTransactor{contract: contract}, nil
}

// NewTellorVarsFilterer creates a new log filterer instance of TellorVars, bound to a specific deployed contract.
func NewTellorVarsFilterer(address common.Address, filterer bind.ContractFilterer) (*TellorVarsFilterer, error) {
	contract, err := bindTellorVars(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TellorVarsFilterer{contract: contract}, nil
}

// bindTellorVars binds a generic wrapper to an already deployed contract.
func bindTellorVars(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TellorVarsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVars *TellorVarsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVars.Contract.TellorVarsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVars *TellorVarsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVars.Contract.TellorVarsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVars *TellorVarsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVars.Contract.TellorVarsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TellorVars *TellorVarsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TellorVars.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TellorVars *TellorVarsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TellorVars.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TellorVars *TellorVarsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TellorVars.Contract.contract.Transact(opts, method, params...)
}
